<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Python爬虫</title>
      <link href="/2022/10/24/Python%E7%88%AC%E8%99%AB/"/>
      <url>/2022/10/24/Python%E7%88%AC%E8%99%AB/</url>
      
        <content type="html"><![CDATA[<h1 id="Python爬虫"><a href="#Python爬虫" class="headerlink" title="Python爬虫"></a>Python爬虫</h1><p>在Python爬虫中，基本上会经历三个过程。</p><ol><li>使用 Requests 爬取内容。我们可以使用 Requests库来抓取网页信息。Requests 库可以说是 Python 爬虫的利器，也就是Python的HTTP 库，通过这个库爬取网页中的数据，非常方便，可以帮我们节约大量的时间。</li><li>使用 XPath 解析内容。XPath 是XML Path的缩写，也就是XML 路径语言。它是一种用来确定 XML 文档中某部分位置的语言，在开发中经常用来当作小型查询语言。XPath可以通过元素和属性进行位置索引。</li><li>使用 Pandas 保存数据。Pandas 是让数据分析工作变得更加简单的高级数据结构，我们可以用 Pandas 保存爬取的数据。最后通过Pandas再写入到XLS或者MySQL等数据库中。</li></ol><h1 id="八爪鱼"><a href="#八爪鱼" class="headerlink" title="八爪鱼"></a>八爪鱼</h1><p><strong>1. 打开网页</strong></p><p>所有的采集默认第一项都是打开网页。所以在新建任务之后，系统会提示你输入网址。当你输入之后，八爪鱼就会自动建立一个“打开网页”的流程。</p><p><strong>2. 点击元素</strong></p><p>这里元素的定义比较广泛，它可以是某个按钮，或者某个链接，也或者是某个图片或文字。使用这个步骤是你在搜索或者提交某个请求。当你点击元素后，八爪鱼会提示你想要达到的目的：点击该按钮、采集该元素文本、还是鼠标移到该链接上。然后再选择“点击该按钮”进行确认即可。</p><p>如果我们点击某个元素的目的是循环翻页，或者提取数据，那么在点击之后，八爪鱼会确认你的目的，你只要点击相关的按钮即可。</p><p><strong>3. 循环翻页</strong></p><p>很多数据都存在翻页的情况，通常你需要找到翻页的位置，比如网页底部的“下一页”按钮，点击它，会提示你“循环点击下一页”、“采集该链接文本”还是“点击该链接”。你需要确认这里是进行的“循环点击下一页”。</p><p><strong>4. 提取数据</strong></p><p>在网页上选择你想要提取的页面范围，鼠标移动到页面上会呈现蓝色的阴影面积，它表明了你想提取的数据范围。然后点击鼠标后，在右侧选择“采集数据”即可。</p><p>这4个基本操作就像它们的名称一样简单直接，这里我给你一些使用的建议：</p><ol><li>尽量使用用户操作视角进行模拟的方式进行操作，而不是在“流程视图”中手动创建相应的步骤。因为八爪鱼最大的特点就是所见即所得，所以一切就按照用户使用的流程进行操作即可。</li><li>使用“流程视图”方便管理和调整。右侧有“流程视图”的按钮，点击之后进入到流程视图，会把你之前的操作以流程图的方式进行展示</li></ol>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
          <category> 爬虫 </category>
          
          <category> 八爪鱼 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 爬虫 </tag>
            
            <tag> 八爪鱼 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习比赛及常用函数</title>
      <link href="/2022/10/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%AF%94%E8%B5%9B%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
      <url>/2022/10/24/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E6%AF%94%E8%B5%9B%E5%8F%8A%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="机器学习比赛"><a href="#机器学习比赛" class="headerlink" title="机器学习比赛"></a>机器学习比赛</h1><h2 id="机器学习建模流程及常用函数"><a href="#机器学习建模流程及常用函数" class="headerlink" title="机器学习建模流程及常用函数"></a>机器学习建模流程及常用函数</h2><h3 id="一、数据探索"><a href="#一、数据探索" class="headerlink" title="一、数据探索"></a>一、数据探索</h3><ul><li>观察字段的缺失值</li><li>观察Label分布</li><li>观察唯一值的个数</li><li>观察字段的相关性</li></ul><h4 id="1、以直方图的形式展示数据信息"><a href="#1、以直方图的形式展示数据信息" class="headerlink" title="1、以直方图的形式展示数据信息"></a>1、以直方图的形式展示数据信息</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns<span class="token comment"># 以直方图的形式展示，isDefault表示显示数量</span>sns<span class="token punctuation">.</span>countplot<span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token string">'grade'</span><span class="token punctuation">,</span>hue<span class="token operator">=</span><span class="token string">'isDefault'</span><span class="token punctuation">,</span>data<span class="token operator">=</span>train<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、进行字段之间的相关性相关性分析"><a href="#2、进行字段之间的相关性相关性分析" class="headerlink" title="2、进行字段之间的相关性相关性分析"></a>2、进行字段之间的相关性相关性分析</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 对特征列进行相关性分析</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token operator">%</span>matplotlib inline<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> snsplt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>heatmap<span class="token punctuation">(</span>train<span class="token punctuation">.</span>corr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cbar<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>annot<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>cmap<span class="token operator">=</span><span class="token string">'Blues'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、数据预处理"><a href="#二、数据预处理" class="headerlink" title="二、数据预处理"></a>二、数据预处理</h3><ul><li>数值类型和类别类型缺失值处理</li><li>处理唯一值的个数为1字段</li><li>数据规范化(深度学习才需要)</li></ul><h4 id="1、删除全部唯一值为1字段"><a href="#1、删除全部唯一值为1字段" class="headerlink" title="1、删除全部唯一值为1字段"></a>1、删除全部唯一值为1字段</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">features <span class="token operator">=</span> train<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> feature <span class="token keyword">in</span> features<span class="token punctuation">:</span>    <span class="token keyword">if</span> train<span class="token punctuation">[</span>feature<span class="token punctuation">]</span><span class="token punctuation">.</span>nunique<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        train<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span>feature<span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        test<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span>feature<span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'删除全部唯一值为1字段完成'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、将数值类型的缺失值全部以中位数补全"><a href="#2、将数值类型的缺失值全部以中位数补全" class="headerlink" title="2、将数值类型的缺失值全部以中位数补全"></a>2、将数值类型的缺失值全部以中位数补全</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#将数值类型的缺失值全部以中位数补全</span>numerical_fea <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>train<span class="token punctuation">.</span>select_dtypes<span class="token punctuation">(</span>include<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'float'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>columns<span class="token punctuation">)</span>train<span class="token punctuation">[</span>numerical_fea<span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span>numerical_fea<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>train<span class="token punctuation">[</span>numerical_fea<span class="token punctuation">]</span><span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span>numerical_fea<span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span>numerical_fea<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>test<span class="token punctuation">[</span>numerical_fea<span class="token punctuation">]</span><span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'数值类型缺失值,中位数填充完成'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、将类别类型的缺失值全部以众数补全"><a href="#3、将类别类型的缺失值全部以众数补全" class="headerlink" title="3、将类别类型的缺失值全部以众数补全"></a>3、将类别类型的缺失值全部以众数补全</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#将类别类型的缺失值全部以众数补全</span><span class="token keyword">from</span> scipy <span class="token keyword">import</span> stats cat_fea <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>train<span class="token punctuation">.</span>select_dtypes<span class="token punctuation">(</span>exclude<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'float'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span class="token keyword">for</span> cf <span class="token keyword">in</span> cat_fea<span class="token punctuation">:</span>    <span class="token keyword">if</span> train<span class="token punctuation">[</span>cf<span class="token punctuation">]</span><span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        train<span class="token punctuation">[</span>cf<span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span>cf<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>stats<span class="token punctuation">.</span>mode<span class="token punctuation">(</span>train<span class="token punctuation">[</span>cf<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cat_fea <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>select_dtypes<span class="token punctuation">(</span>exclude<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'float'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span class="token keyword">for</span> cf <span class="token keyword">in</span> cat_fea<span class="token punctuation">:</span>    <span class="token keyword">if</span> test<span class="token punctuation">[</span>cf<span class="token punctuation">]</span><span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        test<span class="token punctuation">[</span>cf<span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span>cf<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>stats<span class="token punctuation">.</span>mode<span class="token punctuation">(</span>test<span class="token punctuation">[</span>cf<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'类别类型缺失值,众数填充完成'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、特征工程"><a href="#三、特征工程" class="headerlink" title="三、特征工程"></a>三、特征工程</h3><p>特征编码（原来是个类别类型，比如说是个字符串，还需要把它变成数值类型），构造新特征，特征变换，</p><h4 id="1、特征编码，将object转换为数值类型"><a href="#1、特征编码，将object转换为数值类型" class="headerlink" title="1、特征编码，将object转换为数值类型"></a>1、特征编码，将object转换为数值类型</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> LabelEncoderle <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'grade'</span><span class="token punctuation">]</span> <span class="token operator">=</span> le<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>train<span class="token punctuation">[</span><span class="token string">'grade'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>testA<span class="token punctuation">[</span><span class="token string">'grade'</span><span class="token punctuation">]</span> <span class="token operator">=</span> le<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>testA<span class="token punctuation">[</span><span class="token string">'grade'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>或者利用map自定义特征，</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#数据清洗特征添加</span><span class="token keyword">for</span> data <span class="token keyword">in</span> <span class="token punctuation">[</span>train<span class="token punctuation">]</span><span class="token punctuation">:</span>    data<span class="token punctuation">[</span><span class="token string">'grade'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'grade'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'F'</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'G'</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        data<span class="token punctuation">[</span><span class="token string">'employmentLength'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'employmentLength'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span><span class="token string">'1 year'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2 years'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'3 years'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'4 years'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'5 years'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'6 years'</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">,</span>    <span class="token string">'7 years'</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'8 years'</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'9 years'</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">'10+ years'</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'&lt; 1 year'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        data<span class="token punctuation">[</span><span class="token string">'subGrade'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'subGrade'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>    <span class="token punctuation">&#123;</span><span class="token string">'E2'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'D2'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'D3'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'A4'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'C2'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'A5'</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'C3'</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'B4'</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'B5'</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">'E5'</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span>    <span class="token string">'D4'</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">'B3'</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">'B2'</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string">'D1'</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token string">'E1'</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'C5'</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">'C1'</span><span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token string">'A2'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'A3'</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">'B1'</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span>    <span class="token string">'E3'</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token string">'F1'</span><span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token string">'C4'</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">'A1'</span><span class="token punctuation">:</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token string">'D5'</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token string">'F2'</span><span class="token punctuation">:</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token string">'E4'</span><span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token string">'F3'</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token string">'G2'</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token string">'F5'</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">,</span>    <span class="token string">'G3'</span><span class="token punctuation">:</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token string">'G1'</span><span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token string">'F4'</span><span class="token punctuation">:</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token string">'G4'</span><span class="token punctuation">:</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token string">'G5'</span><span class="token punctuation">:</span><span class="token number">35</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、时间多尺度变换与时间差计算"><a href="#2、时间多尺度变换与时间差计算" class="headerlink" title="2、时间多尺度变换与时间差计算"></a>2、时间多尺度变换与时间差计算</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime<span class="token keyword">def</span> <span class="token function">create_days_diff</span><span class="token punctuation">(</span>selected_cols<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> selected <span class="token keyword">in</span> selected_cols<span class="token punctuation">:</span>        train<span class="token punctuation">[</span>selected<span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>train<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">)</span>        tmp_str <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>train<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>year<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token string">"%02d"</span> <span class="token operator">%</span> train<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>month<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token string">"%02d"</span> <span class="token operator">%</span> train<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>day<span class="token punctuation">)</span>        startdate <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>tmp_str<span class="token punctuation">,</span> <span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>        train<span class="token punctuation">[</span>selected<span class="token operator">+</span><span class="token string">'_diff'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">-</span>startdate<span class="token punctuation">)</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>days                test<span class="token punctuation">[</span>selected<span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>test<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">)</span>        tmp_str <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>test<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>year<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token string">"%02d"</span> <span class="token operator">%</span> test<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>month<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token string">"%02d"</span> <span class="token operator">%</span> test<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>day<span class="token punctuation">)</span>        startdate <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>tmp_str<span class="token punctuation">,</span> <span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>        test<span class="token punctuation">[</span>selected<span class="token operator">+</span><span class="token string">'_diff'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">-</span>startdate<span class="token punctuation">)</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>days                <span class="token keyword">print</span><span class="token punctuation">(</span>selected<span class="token operator">+</span><span class="token string">'_diff'</span><span class="token operator">+</span><span class="token string">' 时间差字段 已经创建'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create_ymd_features</span><span class="token punctuation">(</span>selected_cols<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> selected <span class="token keyword">in</span> selected_cols<span class="token punctuation">:</span>        test<span class="token punctuation">[</span>selected<span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>test<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">)</span>        train_temp <span class="token operator">=</span> pd<span class="token punctuation">.</span>DatetimeIndex<span class="token punctuation">(</span>train<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">)</span>        test_temp <span class="token operator">=</span> pd<span class="token punctuation">.</span>DatetimeIndex<span class="token punctuation">(</span>test<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">)</span>                train<span class="token punctuation">[</span>selected<span class="token operator">+</span><span class="token string">'_year'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_temp<span class="token punctuation">.</span>year        test<span class="token punctuation">[</span>selected<span class="token operator">+</span><span class="token string">'_year'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_temp<span class="token punctuation">.</span>year        <span class="token keyword">print</span><span class="token punctuation">(</span>selected<span class="token operator">+</span><span class="token string">'_year'</span><span class="token operator">+</span><span class="token string">'字段 已经创建'</span><span class="token punctuation">)</span>                train<span class="token punctuation">[</span>selected<span class="token operator">+</span><span class="token string">'_month'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_temp<span class="token punctuation">.</span>month        test<span class="token punctuation">[</span>selected<span class="token operator">+</span><span class="token string">'_month'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_temp<span class="token punctuation">.</span>month        <span class="token keyword">print</span><span class="token punctuation">(</span>selected<span class="token operator">+</span><span class="token string">'_month'</span><span class="token operator">+</span><span class="token string">'字段 已经创建'</span><span class="token punctuation">)</span>                train<span class="token punctuation">[</span>selected<span class="token operator">+</span><span class="token string">'_day'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_temp<span class="token punctuation">.</span>day        test<span class="token punctuation">[</span>selected<span class="token operator">+</span><span class="token string">'_day'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_temp<span class="token punctuation">.</span>day        <span class="token keyword">print</span><span class="token punctuation">(</span>selected<span class="token operator">+</span><span class="token string">'_day'</span><span class="token operator">+</span><span class="token string">'字段 已经创建'</span><span class="token punctuation">)</span><span class="token comment">#只需要在selected_cols列表中加入需要转换的字段</span>selected_cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'issueDate'</span><span class="token punctuation">]</span>create_ymd_features<span class="token punctuation">(</span>selected_cols<span class="token punctuation">)</span>create_days_diff<span class="token punctuation">(</span>selected_cols<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、类别特征"><a href="#3、类别特征" class="headerlink" title="3、类别特征"></a>3、类别特征</h4><p><strong>min，max，mean，std没有意义，因为是单一特征</strong></p><p><strong>只增加count，isDefault_mean（唯一值个数少的情况，如果唯一值多，会造成成标签泄露问题）</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#cat_fea 为类别特征（一般是出float以外，时间类型也不算）</span>cat_fea <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'term'</span><span class="token punctuation">,</span><span class="token string">'grade'</span><span class="token punctuation">,</span><span class="token string">'subGrade'</span><span class="token punctuation">,</span><span class="token string">'employmentLength'</span><span class="token punctuation">,</span><span class="token string">'homeOwnership'</span><span class="token punctuation">,</span><span class="token string">'verificationStatus'</span><span class="token punctuation">,</span><span class="token string">'purpose'</span><span class="token punctuation">,</span><span class="token string">'regionCode'</span><span class="token punctuation">,</span><span class="token string">'initialListStatus'</span><span class="token punctuation">,</span><span class="token string">'applicationType'</span><span class="token punctuation">]</span><span class="token comment">#先看一下类别特征唯一值的个数</span><span class="token keyword">for</span> feature <span class="token keyword">in</span> cat_fea<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>feature<span class="token punctuation">,</span>train<span class="token punctuation">[</span>feature<span class="token punctuation">]</span><span class="token punctuation">.</span>nunique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>train<span class="token punctuation">,</span>test<span class="token punctuation">]</span><span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> col <span class="token keyword">in</span> cat_fea<span class="token punctuation">:</span>    temp <span class="token operator">=</span> train<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>col<span class="token punctuation">,</span>as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>col<span class="token operator">+</span><span class="token string">'_count'</span><span class="token punctuation">:</span> <span class="token string">'count'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df<span class="token punctuation">,</span>temp<span class="token punctuation">,</span>on <span class="token operator">=</span> col<span class="token punctuation">,</span>how <span class="token operator">=</span> <span class="token string">'left'</span><span class="token punctuation">)</span>    <span class="token comment">#isDefault为标签项，需要替换</span>    temp <span class="token operator">=</span> train<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>col<span class="token punctuation">,</span>as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'isDefault'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>col<span class="token operator">+</span><span class="token string">'_isDefault_mean'</span><span class="token punctuation">:</span> <span class="token string">'mean'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df<span class="token punctuation">,</span>temp<span class="token punctuation">,</span>on <span class="token operator">=</span> col<span class="token punctuation">,</span>how <span class="token operator">=</span> <span class="token string">'left'</span><span class="token punctuation">)</span>train <span class="token operator">=</span> df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'isDefault'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>notnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>test <span class="token operator">=</span> df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'isDefault'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、批量删除字段为object的字段"><a href="#4、批量删除字段为object的字段" class="headerlink" title="4、批量删除字段为object的字段"></a>4、批量删除字段为object的字段</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># features = list(train.select_dtypes(include=['object']).columns)</span>features <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'lan'</span><span class="token punctuation">,</span> <span class="token string">'os'</span><span class="token punctuation">,</span> <span class="token string">'osv'</span><span class="token punctuation">,</span> <span class="token string">'version'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">,</span> <span class="token string">'sid'</span><span class="token punctuation">,</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span> <span class="token comment">#自定义删除字段</span><span class="token keyword">for</span> feature <span class="token keyword">in</span> features<span class="token punctuation">:</span>        train<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span>feature<span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'批量删除字段已完成'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、模型建立"><a href="#四、模型建立" class="headerlink" title="四、模型建立"></a>四、模型建立</h3><p>机器学习神器：XGBoost，LightGBM，Catboost</p><p>图像&#x2F;文本分类：各种NN</p><p>通常LightGBM更快（在CPU机上，优先使用）</p><h3 id="五、参数调优"><a href="#五、参数调优" class="headerlink" title="五、参数调优"></a>五、参数调优</h3><p>1、可视化的方式查看特征的重要程度</p><p>lightgbm</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> lightgbm <span class="token keyword">as</span> lgb<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltfig<span class="token punctuation">,</span>ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>lgb<span class="token punctuation">.</span>plot_importance<span class="token punctuation">(</span>model_lgb<span class="token punctuation">,</span>ax <span class="token operator">=</span>ax<span class="token punctuation">,</span>max_num_features <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">#模型训练结果为model_lgb</span>plt<span class="token punctuation">.</span>tirle<span class="token punctuation">(</span><span class="token string">'Important Features'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>xgboost </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> xgboost <span class="token keyword">import</span> plot_importance<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltfig<span class="token punctuation">,</span>ax <span class="token operator">=</span> plt<span class="token punctuation">.</span>subplots<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plot_importance<span class="token punctuation">(</span>model_xgb<span class="token punctuation">,</span>ax <span class="token operator">=</span>ax<span class="token punctuation">,</span>max_num_features <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment">#模型训练结果为model_xgb</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>贝叶斯优化(主要是调树的深度)</p><h3 id="六、模型融合"><a href="#六、模型融合" class="headerlink" title="六、模型融合"></a>六、模型融合</h3><p>五折交叉验证融合</p><p>不同模型之间的融合</p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度飞桨-用户购买预测</title>
      <link href="/2022/10/24/%E7%99%BE%E5%BA%A6%E9%A3%9E%E6%A1%A8-%E7%94%A8%E6%88%B7%E8%B4%AD%E4%B9%B0%E9%A2%84%E6%B5%8B/"/>
      <url>/2022/10/24/%E7%99%BE%E5%BA%A6%E9%A3%9E%E6%A1%A8-%E7%94%A8%E6%88%B7%E8%B4%AD%E4%B9%B0%E9%A2%84%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="百度飞桨-用户购买预测"><a href="#百度飞桨-用户购买预测" class="headerlink" title="百度飞桨-用户购买预测"></a>百度飞桨-用户购买预测</h1><h2 id="赛题说明"><a href="#赛题说明" class="headerlink" title="赛题说明"></a>赛题说明</h2><p>赛题链接：<a href="https://aistudio.baidu.com/aistudio/competition/detail/51/0/introduction">百度飞桨:  用户购买预测 </a></p><p>代码仓库：</p><h3 id="一、背景介绍"><a href="#一、背景介绍" class="headerlink" title="一、背景介绍"></a>一、背景介绍</h3><h3 id="二、任务介绍"><a href="#二、任务介绍" class="headerlink" title="二、任务介绍"></a>二、任务介绍</h3><h3 id="三、数据集"><a href="#三、数据集" class="headerlink" title="三、数据集"></a>三、数据集</h3><h3 id="四、字段说明"><a href="#四、字段说明" class="headerlink" title="四、字段说明"></a>四、字段说明</h3>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云天池-恶意程序检测</title>
      <link href="/2022/10/24/%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A9%E6%B1%A0-%E6%81%B6%E6%84%8F%E7%A8%8B%E5%BA%8F%E6%A3%80%E6%B5%8B/"/>
      <url>/2022/10/24/%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A9%E6%B1%A0-%E6%81%B6%E6%84%8F%E7%A8%8B%E5%BA%8F%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="阿里云天池-恶意程序检测"><a href="#阿里云天池-恶意程序检测" class="headerlink" title="阿里云天池-恶意程序检测"></a>阿里云天池-恶意程序检测</h1><h2 id="赛题说明"><a href="#赛题说明" class="headerlink" title="赛题说明"></a>赛题说明</h2><p>赛题链接：<a href="https://tianchi.aliyun.com/competition/entrance/231694/information">阿里云天池-安全恶意程序检测</a></p><p>代码仓库：<a href="https://github.com/wxydaydayup/Aliyun_MalwareDetection/tree/master">阿里云天池-安全恶意程序检测–代码仓库</a></p><h3 id="一、背景介绍"><a href="#一、背景介绍" class="headerlink" title="一、背景介绍"></a>一、背景介绍</h3><p>恶意软件是一种被设计用来对目标计算机造成破坏或者占用目标计算机资源的软件，传统的恶意软件包括蠕虫、木马等，这些恶意软件严重侵犯用户合法权益，甚至将为用户及他人带来巨大的经济或其他形式的利益损失。近年来随着虚拟货币进入大众视野，挖矿类的恶意程序也开始大量涌现，黑客通过入侵恶意挖矿程序获取巨额收益。当前恶意软件的检测技术主要有特征码检测、行为检测和启发式检测等，配合使用机器学习可以在一定程度上提高泛化能力，提升恶意样本的识别率。</p><h3 id="二、任务介绍"><a href="#二、任务介绍" class="headerlink" title="二、任务介绍"></a>二、任务介绍</h3><p>本题目提供的数据来自文件（windows 可执行程序）经过沙箱程序模拟运行后的API指令序列，全为windows二进制可执行程序，经过脱敏处理。<br>其中恶意文件的类型有感染型病毒、木马程序、挖矿程序、DDOS木马、勒索病毒等，数据总计6亿条。</p><h3 id="三、数据集"><a href="#三、数据集" class="headerlink" title="三、数据集"></a>三、数据集</h3><p>1、训练数据（train.zip）：调用记录近9000万次，文件1万多个（以文件编号汇总）</p><ul><li><p>一个文件调用的api数量有可能很多，对于一个tid中调用超过5000个api的文件，我们进行了截断，按照顺序保留了每个tid前5000个api的记录。</p></li><li><p>不同线程tid之间没有顺序关系，同一个tid里的index由小到大代表调用的先后顺序关系。<br>  注3：index是单个文件在沙箱执行时的全局顺序，由于沙箱执行时间有精度限制，所以会出现一个index上出现同线程或者不同线程都在执行多次api的情况，可以保证同tid内部的顺序，但不保证连续。</p></li></ul><p>2、测试数据（test.zip）：调用记录近8000万次，文件1万多个。</p><p>说明：格式除了没有label字段，其他数据规格与训练数据一致。</p><h3 id="四、字段说明"><a href="#四、字段说明" class="headerlink" title="四、字段说明"></a>四、字段说明</h3><p>train.csv和test.csv字段说明</p><table><thead><tr><th>字段</th><th>类型</th><th>解释</th></tr></thead><tbody><tr><td>file_id</td><td>bigint</td><td>文件编号</td></tr><tr><td>label</td><td>bigint</td><td>文件标签，0-正常&#x2F;1-勒索病毒&#x2F;2-挖矿程序&#x2F;3-DDoS木马&#x2F;4-蠕虫病毒&#x2F;5-感染型病毒&#x2F;6-后门程序&#x2F;7-木马程序</td></tr><tr><td>api</td><td>string</td><td>文件调用的API名称</td></tr><tr><td>tid</td><td>bigint</td><td>调用API的线程编号</td></tr><tr><td>index</td><td>string</td><td>线程中API调用的顺序编号</td></tr></tbody></table><h2 id="BaseLine-V1-lgb–分数-0-715840"><a href="#BaseLine-V1-lgb–分数-0-715840" class="headerlink" title="BaseLine V1_lgb–分数: 0.715840"></a>BaseLine V1_lgb–分数: 0.715840</h2><h3 id="一、数据探索"><a href="#一、数据探索" class="headerlink" title="一、数据探索"></a>一、数据探索</h3><p><strong>写法1</strong></p><p>Pandas使用chunksize分块处理大型csv文件，加载数据</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token comment"># 分段数据加载基础方法</span><span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span>file_name<span class="token punctuation">)</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    chunk_index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> df <span class="token keyword">in</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span>file_name<span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> chunksize <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>df<span class="token punctuation">)</span>        chunk_index <span class="token operator">+=</span> <span class="token number">1</span>    result <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span>result<span class="token punctuation">,</span> ignore_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> result<span class="token comment">#数据加载</span>train <span class="token operator">=</span> get_data<span class="token punctuation">(</span><span class="token string">'./security_train.csv'</span><span class="token punctuation">)</span>test <span class="token operator">=</span> get_data<span class="token punctuation">(</span><span class="token string">'./security_test.csv'</span><span class="token punctuation">)</span><span class="token comment">#将数据采用pickle方式存储，加快文件的读取速度</span><span class="token keyword">import</span> pickle<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./train.pkl'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>train<span class="token punctuation">,</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./test.pkl'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>test<span class="token punctuation">,</span><span class="token builtin">file</span><span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./train.pkl'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    train <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./test.pkl'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    test <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span>f<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>写法2</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 获取读文件指针 </span>data<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>filename<span class="token punctuation">,</span> iterator<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment"># 顺序读取100000行数据 </span>chunk <span class="token operator">=</span> data<span class="token punctuation">.</span>get_chunk<span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查看内存使用情况</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> os<span class="token keyword">import</span> psutilmem <span class="token operator">=</span> psutil<span class="token punctuation">.</span>virtual_memory<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'总内存：'</span><span class="token punctuation">,</span>mem<span class="token punctuation">.</span>total<span class="token operator">/</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'已使用内存：'</span><span class="token punctuation">,</span>mem<span class="token punctuation">.</span>used<span class="token operator">/</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'空闲内存：'</span><span class="token punctuation">,</span>mem<span class="token punctuation">.</span>free<span class="token operator">/</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'使用占卜：'</span><span class="token punctuation">,</span>mem<span class="token punctuation">.</span>percent<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'当前线程PID：'</span><span class="token punctuation">,</span>os<span class="token punctuation">.</span>getpid<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查看某个变量的资源使用情况</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> syssys<span class="token punctuation">.</span>getsizeof<span class="token punctuation">(</span>df_all<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">1024</span><span class="token operator">/</span><span class="token number">1024</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>针对不同的变量，进行内存释放</p><h3 id="二、特征工程"><a href="#二、特征工程" class="headerlink" title="二、特征工程"></a>二、特征工程</h3><h4 id="1、对api字段做LabelEncoder"><a href="#1、对api字段做LabelEncoder" class="headerlink" title="1、对api字段做LabelEncoder"></a>1、对api字段做LabelEncoder</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 对api字段进行LabelEncoder</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>preprocessing <span class="token keyword">import</span> LabelEncoderle <span class="token operator">=</span> LabelEncoder<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 将训练集和测试集进行合并</span>df_all <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>train<span class="token punctuation">,</span> test<span class="token punctuation">]</span><span class="token punctuation">)</span>df_all<span class="token punctuation">[</span><span class="token string">'api'</span><span class="token punctuation">]</span> <span class="token operator">=</span> le<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>df_all<span class="token punctuation">[</span><span class="token string">'api'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>train<span class="token punctuation">[</span><span class="token string">'api'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df_all<span class="token punctuation">[</span>df_all<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>notnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'api'</span><span class="token punctuation">]</span>test<span class="token punctuation">[</span><span class="token string">'api'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df_all<span class="token punctuation">[</span>df_all<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'api'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、对File-id做聚合处理"><a href="#2、对File-id做聚合处理" class="headerlink" title="2、对File_id做聚合处理"></a>2、对File_id做聚合处理</h4><p>对File_id做聚合处理，并去重操作和使用统计特征，主要包括数量，最大值，最小值，平均值，并保存下来</p><ol><li>去除完全重复的行数据</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ol start="2"><li>去除某几列重复的行数据</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python">data<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span>subset<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'A'</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>keep<span class="token operator">=</span><span class="token string">'first'</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>subset： 列名，可选，默认为None</li><li>keep： {‘first’, ‘last’, False}, 默认值 ‘first’<ul><li>first： 保留第一次出现的重复行，删除后面的重复行。</li><li>last： 删除重复项，除了最后一次出现。</li><li>False： 删除所有重复项。</li></ul></li><li>inplace：布尔值，默认为False表示生成一个副本，inplace&#x3D;True表示直接在原来的DataFrame上删除重复项。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#定义重要特征，主要包括数量，最大值，最小值，平均值等等</span><span class="token keyword">def</span> <span class="token function">get_features</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">:</span>    df_file <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'file_id'</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'label'</span> <span class="token keyword">in</span> df<span class="token punctuation">.</span>columns<span class="token punctuation">:</span>         df1 <span class="token operator">=</span> df<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span>subset<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'file_id'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> keep<span class="token operator">=</span><span class="token string">'first'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        df1 <span class="token operator">=</span> df<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span>subset<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'file_id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> keep<span class="token operator">=</span><span class="token string">'first'</span><span class="token punctuation">)</span>    df1 <span class="token operator">=</span> df1<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token string">'file_id'</span><span class="token punctuation">)</span>    features <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'api'</span><span class="token punctuation">,</span> <span class="token string">'tid'</span><span class="token punctuation">,</span> <span class="token string">'index'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> f <span class="token keyword">in</span> features<span class="token punctuation">:</span>        df1<span class="token punctuation">[</span>f<span class="token operator">+</span><span class="token string">'_count'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df_file<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>count<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values        df1<span class="token punctuation">[</span>f<span class="token operator">+</span><span class="token string">'_nunique'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df_file<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>nunique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values        df1<span class="token punctuation">[</span>f<span class="token operator">+</span><span class="token string">'_min'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df_file<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values        df1<span class="token punctuation">[</span>f<span class="token operator">+</span><span class="token string">'_max'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df_file<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values        df1<span class="token punctuation">[</span>f<span class="token operator">+</span><span class="token string">'_mean'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df_file<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values          df1<span class="token punctuation">[</span>f<span class="token operator">+</span><span class="token string">'_median'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df_file<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values          df1<span class="token punctuation">[</span>f<span class="token operator">+</span><span class="token string">'_std'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df_file<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>std<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>values          df1<span class="token punctuation">[</span>f<span class="token operator">+</span><span class="token string">'_ptp'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df1<span class="token punctuation">[</span>f<span class="token operator">+</span><span class="token string">'_max'</span><span class="token punctuation">]</span> <span class="token operator">-</span> df1<span class="token punctuation">[</span>f<span class="token operator">+</span><span class="token string">'_min'</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> df1<span class="token comment">#训练集与测试集添加特征</span>df_train <span class="token operator">=</span> get_features<span class="token punctuation">(</span>train<span class="token punctuation">)</span>df_test <span class="token operator">=</span> get_features<span class="token punctuation">(</span>test<span class="token punctuation">)</span><span class="token comment">#将特征的结果集保持，一遍后续直接使用</span>df_train<span class="token punctuation">.</span>to_pickle<span class="token punctuation">(</span><span class="token string">'.df_train.pkl'</span><span class="token punctuation">)</span>df_test<span class="token punctuation">.</span>to_pickle<span class="token punctuation">(</span><span class="token string">'./df_test.pkl'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、建立模型"><a href="#三、建立模型" class="headerlink" title="三、建立模型"></a>三、建立模型</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> lightgbm <span class="token keyword">as</span> lgb<span class="token keyword">import</span> pandas <span class="token keyword">as</span> pdclf <span class="token operator">=</span> lgb<span class="token punctuation">.</span>LGBMClassifier<span class="token punctuation">(</span>num_leaves<span class="token operator">=</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">5</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>reg_alpha<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">,</span>reg_lambda<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">,</span>objective<span class="token operator">=</span><span class="token string">'multiclass'</span><span class="token punctuation">,</span>                                                       max_depth<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>learning_rate<span class="token operator">=</span><span class="token number">0.005</span><span class="token punctuation">,</span>min_child_sample<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span>random_state<span class="token operator">=</span><span class="token number">2021</span><span class="token punctuation">,</span>                         n_estimators<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">,</span>subsample<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>colsample_bytree<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span> clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>df_train<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>df_train<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> result <span class="token operator">=</span> clf<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>df_test<span class="token punctuation">)</span>result_lgb <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>result<span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'prob0'</span><span class="token punctuation">,</span><span class="token string">'prob1'</span><span class="token punctuation">,</span><span class="token string">'prob2'</span><span class="token punctuation">,</span><span class="token string">'prob3'</span><span class="token punctuation">,</span><span class="token string">'prob4'</span><span class="token punctuation">,</span><span class="token string">'prob5'</span><span class="token punctuation">,</span><span class="token string">'prob6'</span><span class="token punctuation">,</span><span class="token string">'prob7'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>result_lgb<span class="token punctuation">[</span><span class="token string">'file_id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df_test<span class="token punctuation">[</span><span class="token string">'file_id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>valuescolumns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'file_id'</span><span class="token punctuation">,</span><span class="token string">'prob0'</span><span class="token punctuation">,</span><span class="token string">'prob1'</span><span class="token punctuation">,</span><span class="token string">'prob2'</span><span class="token punctuation">,</span><span class="token string">'prob3'</span><span class="token punctuation">,</span><span class="token string">'prob4'</span><span class="token punctuation">,</span><span class="token string">'prob5'</span><span class="token punctuation">,</span><span class="token string">'prob6'</span><span class="token punctuation">,</span><span class="token string">'prob7'</span><span class="token punctuation">]</span>result_lgb<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'./baselineV1.csv'</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>columns <span class="token operator">=</span> columns <span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"已完成"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BaseLine-V2-lgb–分数-0-517596"><a href="#BaseLine-V2-lgb–分数-0-517596" class="headerlink" title="BaseLine V2_lgb–分数: 0.517596"></a>BaseLine V2_lgb–分数: 0.517596</h2><h2 id="一、特征工程优化"><a href="#一、特征工程优化" class="headerlink" title="一、特征工程优化"></a>一、特征工程优化</h2><p>针对file_id 按照线程tid 和 顺序index进行排序 , 并拼接成字符串</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">get_apis</span><span class="token punctuation">(</span>df<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 按照file_id进行分组</span>    group_fileid <span class="token operator">=</span> df<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span><span class="token string">'file_id'</span><span class="token punctuation">)</span>        <span class="token comment"># 统计file_id 和对应的 api_sequence</span>    file_api <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token comment"># 计算每个file_id的api_sequence</span>    <span class="token keyword">for</span> file_id<span class="token punctuation">,</span> file_group <span class="token keyword">in</span> group_fileid<span class="token punctuation">:</span>        <span class="token comment"># 针对file_id 按照线程tid 和 顺序index进行排序</span>        result <span class="token operator">=</span> file_group<span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'tid'</span><span class="token punctuation">,</span> <span class="token string">'index'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ascending<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        <span class="token comment">#得到api的调用序列</span>        api_sequence <span class="token operator">=</span> <span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>result<span class="token punctuation">[</span><span class="token string">'api'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token comment">#print(api_sequence)</span>        file_api<span class="token punctuation">[</span>file_id<span class="token punctuation">]</span> <span class="token operator">=</span> api_sequence    <span class="token keyword">return</span> file_apitrain_apis <span class="token operator">=</span> get_apis<span class="token punctuation">(</span>train<span class="token punctuation">)</span>test_apis <span class="token operator">=</span> get_apis<span class="token punctuation">(</span>test<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将文本信息与BaselineV1中的统计特征合并</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./df_train.pkl'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    df_train <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'./df_test.pkl'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> <span class="token builtin">file</span><span class="token punctuation">:</span>    df_test <span class="token operator">=</span> pickle<span class="token punctuation">.</span>load<span class="token punctuation">(</span><span class="token builtin">file</span><span class="token punctuation">)</span>    df_train<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'api'</span><span class="token punctuation">,</span><span class="token string">'tid'</span><span class="token punctuation">,</span><span class="token string">'index'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>df_test<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'api'</span><span class="token punctuation">,</span><span class="token string">'tid'</span><span class="token punctuation">,</span><span class="token string">'index'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>temp <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">.</span>from_dict<span class="token punctuation">(</span>train_apis<span class="token punctuation">,</span> orient<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'api'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'index'</span><span class="token punctuation">:</span> <span class="token string">'file_id'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df_train <span class="token operator">=</span> df_train<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>temp<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'file_id'</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span> temp <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">.</span>from_dict<span class="token punctuation">(</span>test_apis<span class="token punctuation">,</span> orient<span class="token operator">=</span><span class="token string">'index'</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'api'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>temp <span class="token operator">=</span> temp<span class="token punctuation">.</span>reset_index<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'index'</span><span class="token punctuation">:</span> <span class="token string">'file_id'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>df_test <span class="token operator">=</span> df_test<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>temp<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'file_id'</span><span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span> df_all <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>df_train<span class="token punctuation">,</span> df_test<span class="token punctuation">]</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>放入TfidfVectorizer做训练</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>feature_extraction<span class="token punctuation">.</span>text <span class="token keyword">import</span> TfidfVectorizer<span class="token comment">#使用1-3元语法（1元语法 + 2元语法 + 3 元语法）</span>vec<span class="token operator">=</span>TfidfVectorizer<span class="token punctuation">(</span>ngram_range<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>min_df<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>api_features<span class="token operator">=</span>vec<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>df_all<span class="token punctuation">[</span><span class="token string">'api'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df_apis <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>api_features<span class="token punctuation">.</span>toarray<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> columns<span class="token operator">=</span>vec<span class="token punctuation">.</span>get_feature_names<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>df_apis<span class="token punctuation">.</span>to_pickle<span class="token punctuation">(</span><span class="token string">'./df_apis.pkl'</span><span class="token punctuation">)</span>df_apis<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>将tfidf特征 与原特征进行合并</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df_train_apis<span class="token operator">=</span>df_apis<span class="token punctuation">[</span>df_apis<span class="token punctuation">.</span>index<span class="token operator">&lt;=</span><span class="token number">13886</span><span class="token punctuation">]</span>df_test_apis<span class="token operator">=</span>df_apis<span class="token punctuation">[</span>df_apis<span class="token punctuation">.</span>index<span class="token operator">></span><span class="token number">13886</span><span class="token punctuation">]</span><span class="token comment">#将tfidf特征前面的索引重新开始</span>df_test_apis<span class="token punctuation">.</span>index<span class="token operator">=</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>df_test_apis<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment"># 将tfidf特征 与原特征进行合并</span>df_train <span class="token operator">=</span> df_train<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df_train_apis<span class="token punctuation">,</span> left_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> right_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>df_test <span class="token operator">=</span> df_test<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df_test_apis<span class="token punctuation">,</span> left_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> right_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#去掉object类型api后保存</span>df_train<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">'api'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>df_test<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">'api'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>df_train<span class="token punctuation">.</span>to_pickle<span class="token punctuation">(</span><span class="token string">'./df_train2.pkl'</span><span class="token punctuation">)</span>df_test<span class="token punctuation">.</span>to_pickle<span class="token punctuation">(</span><span class="token string">'./df_test2.pkl'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BaseLine-V3-lgb-amp-xgb–分数-0-478824"><a href="#BaseLine-V3-lgb-amp-xgb–分数-0-478824" class="headerlink" title="BaseLine V3_lgb&amp;xgb–分数: 0.478824"></a>BaseLine V3_lgb&amp;xgb–分数: 0.478824</h2><h3 id="一、模型融合"><a href="#一、模型融合" class="headerlink" title="一、模型融合"></a>一、模型融合</h3><h4 id="1、lightgbm与xgboost做模型融合"><a href="#1、lightgbm与xgboost做模型融合" class="headerlink" title="1、lightgbm与xgboost做模型融合"></a>1、lightgbm与xgboost做模型融合</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> xgboost <span class="token keyword">as</span> xgbmodel_xgb <span class="token operator">=</span> xgb<span class="token punctuation">.</span>XGBClassifier<span class="token punctuation">(</span>            max_depth<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> learning_rate<span class="token operator">=</span><span class="token number">0.005</span><span class="token punctuation">,</span> n_estimators<span class="token operator">=</span><span class="token number">3250</span><span class="token punctuation">,</span>             objective<span class="token operator">=</span><span class="token string">'multi:softprob'</span><span class="token punctuation">,</span> tree_method<span class="token operator">=</span><span class="token string">'gpu_hist'</span><span class="token punctuation">,</span>             subsample<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span> colsample_bytree<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>             min_child_samples<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> eval_metric<span class="token operator">=</span><span class="token string">'logloss'</span><span class="token punctuation">,</span> reg_lambda<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span>model_xgb<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>df_train<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">'label'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> df_train<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>result_xgb <span class="token operator">=</span> model_xgb<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>df_test<span class="token punctuation">)</span>result_xgb <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>result_xgb<span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'prob0'</span><span class="token punctuation">,</span><span class="token string">'prob1'</span><span class="token punctuation">,</span><span class="token string">'prob2'</span><span class="token punctuation">,</span><span class="token string">'prob3'</span><span class="token punctuation">,</span><span class="token string">'prob4'</span><span class="token punctuation">,</span><span class="token string">'prob5'</span><span class="token punctuation">,</span><span class="token string">'prob6'</span><span class="token punctuation">,</span><span class="token string">'prob7'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>result_xgb<span class="token punctuation">[</span><span class="token string">'file_id'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df_test<span class="token punctuation">[</span><span class="token string">'file_id'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>values <span class="token comment"># 对两个模型的结果 进行加权平均</span>result <span class="token operator">=</span> result_lgb<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>weight_lgb<span class="token punctuation">,</span> weight_xgb <span class="token operator">=</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span>result<span class="token punctuation">[</span><span class="token string">'prob0'</span><span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token string">'prob0'</span><span class="token punctuation">]</span> <span class="token operator">*</span> weight_lgb <span class="token operator">+</span> result_xgb<span class="token punctuation">[</span><span class="token string">'prob0'</span><span class="token punctuation">]</span> <span class="token operator">*</span> weight_xgbresult<span class="token punctuation">[</span><span class="token string">'prob1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token string">'prob1'</span><span class="token punctuation">]</span> <span class="token operator">*</span> weight_lgb <span class="token operator">+</span> result_xgb<span class="token punctuation">[</span><span class="token string">'prob1'</span><span class="token punctuation">]</span> <span class="token operator">*</span> weight_xgbresult<span class="token punctuation">[</span><span class="token string">'prob2'</span><span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token string">'prob2'</span><span class="token punctuation">]</span> <span class="token operator">*</span> weight_lgb <span class="token operator">+</span> result_xgb<span class="token punctuation">[</span><span class="token string">'prob2'</span><span class="token punctuation">]</span> <span class="token operator">*</span> weight_xgbresult<span class="token punctuation">[</span><span class="token string">'prob3'</span><span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token string">'prob3'</span><span class="token punctuation">]</span> <span class="token operator">*</span> weight_lgb <span class="token operator">+</span> result_xgb<span class="token punctuation">[</span><span class="token string">'prob3'</span><span class="token punctuation">]</span> <span class="token operator">*</span> weight_xgbresult<span class="token punctuation">[</span><span class="token string">'prob4'</span><span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token string">'prob4'</span><span class="token punctuation">]</span> <span class="token operator">*</span> weight_lgb <span class="token operator">+</span> result_xgb<span class="token punctuation">[</span><span class="token string">'prob4'</span><span class="token punctuation">]</span> <span class="token operator">*</span> weight_xgbresult<span class="token punctuation">[</span><span class="token string">'prob5'</span><span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token string">'prob5'</span><span class="token punctuation">]</span> <span class="token operator">*</span> weight_lgb <span class="token operator">+</span> result_xgb<span class="token punctuation">[</span><span class="token string">'prob5'</span><span class="token punctuation">]</span> <span class="token operator">*</span> weight_xgbresult<span class="token punctuation">[</span><span class="token string">'prob6'</span><span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token string">'prob6'</span><span class="token punctuation">]</span> <span class="token operator">*</span> weight_lgb <span class="token operator">+</span> result_xgb<span class="token punctuation">[</span><span class="token string">'prob6'</span><span class="token punctuation">]</span> <span class="token operator">*</span> weight_xgbresult<span class="token punctuation">[</span><span class="token string">'prob7'</span><span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token punctuation">[</span><span class="token string">'prob7'</span><span class="token punctuation">]</span> <span class="token operator">*</span> weight_lgb <span class="token operator">+</span> result_xgb<span class="token punctuation">[</span><span class="token string">'prob7'</span><span class="token punctuation">]</span> <span class="token operator">*</span> weight_xgbcolumns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'file_id'</span><span class="token punctuation">,</span> <span class="token string">'prob0'</span><span class="token punctuation">,</span><span class="token string">'prob1'</span><span class="token punctuation">,</span><span class="token string">'prob2'</span><span class="token punctuation">,</span><span class="token string">'prob3'</span><span class="token punctuation">,</span><span class="token string">'prob4'</span><span class="token punctuation">,</span><span class="token string">'prob5'</span><span class="token punctuation">,</span><span class="token string">'prob6'</span><span class="token punctuation">,</span><span class="token string">'prob7'</span><span class="token punctuation">]</span>result<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'./baselineV3.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span> columns<span class="token operator">=</span>columns<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2、百度Al Studio训练</p><p>（1）百度Al Studio最高使用python3.7，从python3.8移到百度Al Studio的，pickle保存的时候需要protocol&#x3D;4</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>df_train<span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./df_train3.pkl"</span><span class="token punctuation">,</span><span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> protocol<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span>pickle<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>df_test<span class="token punctuation">,</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"./df_test3.pkl"</span><span class="token punctuation">,</span><span class="token string">"wb"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> protocol<span class="token operator">=</span><span class="token number">4</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>并且最大只能上传150MB，需要压缩再上传</p><p>分卷压缩<br>右键需要压缩的文件 &gt; 添加到压缩文件 &gt; 压缩分卷大小设置为140M。</p><p>确定后，压缩得到各个分卷，名为filename.z01，filename.z02，···，filename.zip。</p><p>(2) 分卷合并<br>将分卷上传到AIstudio的项目中后，进行分卷合并，首先cd到分卷所在的目录，然后运行指令</p><pre class="line-numbers language-none"><code class="language-none">cat filename.* &gt; filename_all.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>得到合并后的压缩卷filename_all.zip。</p><p>(3 )解压缩<br>运行指令 得到最终的压缩文件。</p><pre class="line-numbers language-none"><code class="language-none">unzip filename_all.zip<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>全部代码已放代码仓库：</strong><a href="https://github.com/wxydaydayup/Aliyun_MalwareDetection/tree/master">阿里云天池-安全恶意程序检测</a></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云天池-新闻文本分类</title>
      <link href="/2022/10/24/%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A9%E6%B1%A0-%E6%96%B0%E9%97%BB%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB/"/>
      <url>/2022/10/24/%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A9%E6%B1%A0-%E6%96%B0%E9%97%BB%E6%96%87%E6%9C%AC%E5%88%86%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="阿里云天池-新闻文本分类"><a href="#阿里云天池-新闻文本分类" class="headerlink" title="阿里云天池-新闻文本分类"></a>阿里云天池-新闻文本分类</h1><h2 id="赛题说明"><a href="#赛题说明" class="headerlink" title="赛题说明"></a>赛题说明</h2><p>赛题链接：<a href="https://aistudio.baidu.com/aistudio/competition/detail/51/0/introduction">百度飞桨:  用户购买预测 </a></p><p>代码仓库：</p><h3 id="一、背景介绍"><a href="#一、背景介绍" class="headerlink" title="一、背景介绍"></a>一、背景介绍</h3><h3 id="二、任务介绍"><a href="#二、任务介绍" class="headerlink" title="二、任务介绍"></a>二、任务介绍</h3><h3 id="三、数据集"><a href="#三、数据集" class="headerlink" title="三、数据集"></a>三、数据集</h3><h3 id="四、字段说明"><a href="#四、字段说明" class="headerlink" title="四、字段说明"></a>四、字段说明</h3>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>阿里云天池-贷款违约预测</title>
      <link href="/2022/10/24/%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A9%E6%B1%A0-%E8%B4%B7%E6%AC%BE%E8%BF%9D%E7%BA%A6%E9%A2%84%E6%B5%8B/"/>
      <url>/2022/10/24/%E9%98%BF%E9%87%8C%E4%BA%91%E5%A4%A9%E6%B1%A0-%E8%B4%B7%E6%AC%BE%E8%BF%9D%E7%BA%A6%E9%A2%84%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="阿里云天池-贷款违约预测"><a href="#阿里云天池-贷款违约预测" class="headerlink" title="阿里云天池-贷款违约预测"></a>阿里云天池-贷款违约预测</h1><h2 id="赛题说明"><a href="#赛题说明" class="headerlink" title="赛题说明"></a>赛题说明</h2><p>赛题链接：<a href="https://tianchi.aliyun.com/competition/entrance/531830/introduction">阿里云天池-贷款违约预测</a></p><p>代码仓库：<a href="https://github.com/wxydaydayup/LoanDefaultDetection/tree/master">阿里云天池-贷款违约预测—代码仓库</a></p><h3 id="一、背景介绍"><a href="#一、背景介绍" class="headerlink" title="一、背景介绍"></a>一、背景介绍</h3><p>赛题以金融风控中的个人信贷为背景，要求选手根据贷款申请人的数据信息预测其是否有违约的可能，以此判断是否通过此项贷款，这是一个典型的分类问题。</p><h3 id="二、任务介绍"><a href="#二、任务介绍" class="headerlink" title="二、任务介绍"></a>二、任务介绍</h3><p>赛题以预测用户贷款是否违约为任务，数据集报名后可见并可下载，该数据来自某信贷平台的贷款记录，总数据量超过120w，包含47列变量信息，其中15列为匿名变量。为了保证比赛的公平性，将会从中抽取80万条作为训练集，20万条作为测试集A，20万条作为测试集B，同时会对employmentTitle、purpose、postCode和title等信息进行脱敏。</p><h3 id="三、数据集"><a href="#三、数据集" class="headerlink" title="三、数据集"></a>三、数据集</h3><p>提交结果为每个测试样本是1的概率，也就是y为1的概率。评价方法为AUC评估模型效果（越大越好）。</p><p>提交前请确保预测结果的格式与sample_submit.csv中的格式一致，以及提交文件后缀名为csv。</p><p>形式如下：</p><pre class="line-numbers language-none"><code class="language-none">id,isDefault800000,0.5800001,0.5800002,0.5800003,0.5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、字段说明"><a href="#四、字段说明" class="headerlink" title="四、字段说明"></a>四、字段说明</h3><table><thead><tr><th align="center"><strong>Field</strong></th><th align="center"><strong>Description</strong></th></tr></thead><tbody><tr><td align="center">id</td><td align="center">为贷款清单分配的唯一信用证标识</td></tr><tr><td align="center">loanAmnt</td><td align="center">贷款金额</td></tr><tr><td align="center">term</td><td align="center">贷款期限（year）</td></tr><tr><td align="center">interestRate</td><td align="center">贷款利率</td></tr><tr><td align="center">installment</td><td align="center">分期付款金额</td></tr><tr><td align="center">grade</td><td align="center">贷款等级</td></tr><tr><td align="center">subGrade</td><td align="center">贷款等级之子级</td></tr><tr><td align="center">employmentTitle</td><td align="center">就业职称</td></tr><tr><td align="center">employmentLength</td><td align="center">就业年限（年）</td></tr><tr><td align="center">homeOwnership</td><td align="center">借款人在登记时提供的房屋所有权状况</td></tr><tr><td align="center">annualIncome</td><td align="center">年收入</td></tr><tr><td align="center">verificationStatus</td><td align="center">验证状态</td></tr><tr><td align="center">issueDate</td><td align="center">贷款发放的月份</td></tr><tr><td align="center">purpose</td><td align="center">借款人在贷款申请时的贷款用途类别</td></tr><tr><td align="center">postCode</td><td align="center">借款人在贷款申请中提供的邮政编码的前3位数字</td></tr><tr><td align="center">regionCode</td><td align="center">地区编码</td></tr><tr><td align="center">dti</td><td align="center">债务收入比</td></tr><tr><td align="center">delinquency_2years</td><td align="center">借款人过去2年信用档案中逾期30天以上的违约事件数</td></tr><tr><td align="center">ficoRangeLow</td><td align="center">借款人在贷款发放时的fico所属的下限范围</td></tr><tr><td align="center">ficoRangeHigh</td><td align="center">借款人在贷款发放时的fico所属的上限范围</td></tr><tr><td align="center">openAcc</td><td align="center">借款人信用档案中未结信用额度的数量</td></tr><tr><td align="center">pubRec</td><td align="center">贬损公共记录的数量</td></tr><tr><td align="center">pubRecBankruptcies</td><td align="center">公开记录清除的数量</td></tr><tr><td align="center">revolBal</td><td align="center">信贷周转余额合计</td></tr><tr><td align="center">revolUtil</td><td align="center">循环额度利用率，或借款人使用的相对于所有可用循环信贷的信贷金额</td></tr><tr><td align="center">totalAcc</td><td align="center">借款人信用档案中当前的信用额度总数</td></tr><tr><td align="center">initialListStatus</td><td align="center">贷款的初始列表状态</td></tr><tr><td align="center">applicationType</td><td align="center">表明贷款是个人申请还是与两个共同借款人的联合申请</td></tr><tr><td align="center">earliesCreditLine</td><td align="center">借款人最早报告的信用额度开立的月份</td></tr><tr><td align="center">title</td><td align="center">借款人提供的贷款名称</td></tr><tr><td align="center">policyCode</td><td align="center">公开可用的策略_代码&#x3D;1新产品不公开可用的策略_代码&#x3D;2</td></tr><tr><td align="center">n系列匿名特征</td><td align="center">匿名特征n0-n14，为一些贷款人行为计数特征的处理</td></tr></tbody></table><h2 id="BaseLine-V1-cbt–分数-0-7345"><a href="#BaseLine-V1-cbt–分数-0-7345" class="headerlink" title="BaseLine V1_cbt–分数: 0.7345"></a>BaseLine V1_cbt–分数: 0.7345</h2><h3 id="一、数据探索"><a href="#一、数据探索" class="headerlink" title="一、数据探索"></a>一、数据探索</h3><h4 id="1、以直方图的形式展示数据信息"><a href="#1、以直方图的形式展示数据信息" class="headerlink" title="1、以直方图的形式展示数据信息"></a>1、以直方图的形式展示数据信息</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> sns<span class="token comment"># 以直方图的形式展示，isDefault表示显示数量</span>sns<span class="token punctuation">.</span>countplot<span class="token punctuation">(</span>x <span class="token operator">=</span> <span class="token string">'grade'</span><span class="token punctuation">,</span>hue<span class="token operator">=</span><span class="token string">'isDefault'</span><span class="token punctuation">,</span>data<span class="token operator">=</span>train<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、将数值类型的缺失值全部以中位数补全"><a href="#2、将数值类型的缺失值全部以中位数补全" class="headerlink" title="2、将数值类型的缺失值全部以中位数补全"></a>2、将数值类型的缺失值全部以中位数补全</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> warningswarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> StratifiedKFold<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> roc_auc_score<span class="token keyword">from</span> catboost <span class="token keyword">import</span> CatBoostClassifier<span class="token comment">#数据加载</span>train<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"./train.csv"</span><span class="token punctuation">)</span>testA<span class="token operator">=</span>pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">"./testA.csv"</span><span class="token punctuation">)</span><span class="token comment">#将数值类型的缺失值全部以中位数补全</span>numerical_fea <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>train<span class="token punctuation">.</span>select_dtypes<span class="token punctuation">(</span>include<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'float'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>columns<span class="token punctuation">)</span>train<span class="token punctuation">[</span>numerical_fea<span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span>numerical_fea<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>train<span class="token punctuation">[</span>numerical_fea<span class="token punctuation">]</span><span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>test<span class="token punctuation">[</span>numerical_fea<span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span>numerical_fea<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>test<span class="token punctuation">[</span>numerical_fea<span class="token punctuation">]</span><span class="token punctuation">.</span>median<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'数值类型缺失值,中位数填充完成'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、将类别类型的缺失值全部以众数补全"><a href="#3、将类别类型的缺失值全部以众数补全" class="headerlink" title="3、将类别类型的缺失值全部以众数补全"></a>3、将类别类型的缺失值全部以众数补全</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#将类别类型的缺失值全部以众数补全</span><span class="token keyword">from</span> scipy <span class="token keyword">import</span> stats cat_fea <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>train<span class="token punctuation">.</span>select_dtypes<span class="token punctuation">(</span>exclude<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'float'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span class="token keyword">for</span> cf <span class="token keyword">in</span> cat_fea<span class="token punctuation">:</span>    <span class="token keyword">if</span> train<span class="token punctuation">[</span>cf<span class="token punctuation">]</span><span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        train<span class="token punctuation">[</span>cf<span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span>cf<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>stats<span class="token punctuation">.</span>mode<span class="token punctuation">(</span>train<span class="token punctuation">[</span>cf<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cat_fea <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>test<span class="token punctuation">.</span>select_dtypes<span class="token punctuation">(</span>exclude<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'float'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>columns<span class="token punctuation">)</span><span class="token keyword">for</span> cf <span class="token keyword">in</span> cat_fea<span class="token punctuation">:</span>    <span class="token keyword">if</span> test<span class="token punctuation">[</span>cf<span class="token punctuation">]</span><span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        test<span class="token punctuation">[</span>cf<span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span>cf<span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>stats<span class="token punctuation">.</span>mode<span class="token punctuation">(</span>test<span class="token punctuation">[</span>cf<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'类别类型缺失值,众数填充完成'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、特征工程"><a href="#二、特征工程" class="headerlink" title="二、特征工程"></a>二、特征工程</h3><h4 id="1、时间多尺度变换与时间差计算"><a href="#1、时间多尺度变换与时间差计算" class="headerlink" title="1、时间多尺度变换与时间差计算"></a>1、时间多尺度变换与时间差计算</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> datetime<span class="token keyword">def</span> <span class="token function">create_days_diff</span><span class="token punctuation">(</span>selected_cols<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> selected <span class="token keyword">in</span> selected_cols<span class="token punctuation">:</span>        train<span class="token punctuation">[</span>selected<span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>train<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">)</span>        tmp_str <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>train<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>year<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token string">"%02d"</span> <span class="token operator">%</span> train<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>month<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token string">"%02d"</span> <span class="token operator">%</span> train<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>day<span class="token punctuation">)</span>        startdate <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>tmp_str<span class="token punctuation">,</span> <span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>        train<span class="token punctuation">[</span>selected<span class="token operator">+</span><span class="token string">'_diff'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">-</span>startdate<span class="token punctuation">)</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>days                test<span class="token punctuation">[</span>selected<span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>test<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">)</span>        tmp_str <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>test<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>year<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token string">"%02d"</span> <span class="token operator">%</span> test<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>month<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">'-'</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token string">"%02d"</span> <span class="token operator">%</span> test<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>day<span class="token punctuation">)</span>        startdate <span class="token operator">=</span> datetime<span class="token punctuation">.</span>datetime<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>tmp_str<span class="token punctuation">,</span> <span class="token string">'%Y-%m-%d'</span><span class="token punctuation">)</span>        test<span class="token punctuation">[</span>selected<span class="token operator">+</span><span class="token string">'_diff'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token operator">-</span>startdate<span class="token punctuation">)</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>days                <span class="token keyword">print</span><span class="token punctuation">(</span>selected<span class="token operator">+</span><span class="token string">'_diff'</span><span class="token operator">+</span><span class="token string">' 时间差字段 已经创建'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">create_ym_features</span><span class="token punctuation">(</span>selected_cols<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> selected <span class="token keyword">in</span> selected_cols<span class="token punctuation">:</span>        test<span class="token punctuation">[</span>selected<span class="token punctuation">]</span> <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>test<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">)</span>        train_temp <span class="token operator">=</span> pd<span class="token punctuation">.</span>DatetimeIndex<span class="token punctuation">(</span>train<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">)</span>        test_temp <span class="token operator">=</span> pd<span class="token punctuation">.</span>DatetimeIndex<span class="token punctuation">(</span>test<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">)</span>                train<span class="token punctuation">[</span>selected<span class="token operator">+</span><span class="token string">'_year'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_temp<span class="token punctuation">.</span>year        test<span class="token punctuation">[</span>selected<span class="token operator">+</span><span class="token string">'_year'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_temp<span class="token punctuation">.</span>year        <span class="token keyword">print</span><span class="token punctuation">(</span>selected<span class="token operator">+</span><span class="token string">'_year'</span><span class="token operator">+</span><span class="token string">'字段 已经创建'</span><span class="token punctuation">)</span>                train<span class="token punctuation">[</span>selected<span class="token operator">+</span><span class="token string">'_month'</span><span class="token punctuation">]</span> <span class="token operator">=</span> train_temp<span class="token punctuation">.</span>month        test<span class="token punctuation">[</span>selected<span class="token operator">+</span><span class="token string">'_month'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_temp<span class="token punctuation">.</span>month        <span class="token keyword">print</span><span class="token punctuation">(</span>selected<span class="token operator">+</span><span class="token string">'_month'</span><span class="token operator">+</span><span class="token string">'字段 已经创建'</span><span class="token punctuation">)</span>        selected_cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'issueDate'</span><span class="token punctuation">,</span><span class="token string">'earliesCreditLine'</span><span class="token punctuation">]</span>create_ym_features<span class="token punctuation">(</span>selected_cols<span class="token punctuation">)</span>create_days_diff<span class="token punctuation">(</span>selected_cols<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、将object字段编码"><a href="#2、将object字段编码" class="headerlink" title="2、将object字段编码"></a>2、将object字段编码</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> data <span class="token keyword">in</span> <span class="token punctuation">[</span>train<span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token comment">#贷款等级</span>    data<span class="token punctuation">[</span><span class="token string">'grade'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'grade'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'F'</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'G'</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">#就业年限（年）</span>    data<span class="token punctuation">[</span><span class="token string">'employmentLength'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'employmentLength'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'1 year'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2 years'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'3 years'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'4 years'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'5 years'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'6 years'</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'7 years'</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'8 years'</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'9 years'</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">'10+ years'</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'&lt; 1 year'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">#贷款等级之子级</span>    data<span class="token punctuation">[</span><span class="token string">'subGrade'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'subGrade'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'E2'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'D2'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'D3'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'A4'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'C2'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'A5'</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'C3'</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'B4'</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'B5'</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">'E5'</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span>        <span class="token string">'D4'</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">'B3'</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">'B2'</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string">'D1'</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token string">'E1'</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'C5'</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">'C1'</span><span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token string">'A2'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'A3'</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">'B1'</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span>        <span class="token string">'E3'</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token string">'F1'</span><span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token string">'C4'</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">'A1'</span><span class="token punctuation">:</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token string">'D5'</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token string">'F2'</span><span class="token punctuation">:</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token string">'E4'</span><span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token string">'F3'</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token string">'G2'</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token string">'F5'</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">,</span>        <span class="token string">'G3'</span><span class="token punctuation">:</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token string">'G1'</span><span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token string">'F4'</span><span class="token punctuation">:</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token string">'G4'</span><span class="token punctuation">:</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token string">'G5'</span><span class="token punctuation">:</span><span class="token number">35</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token comment">#借款人信用档案中当前的信用额度总数 除以 贷款金额</span>    data<span class="token punctuation">[</span><span class="token string">'rato'</span><span class="token punctuation">]</span><span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">'totalAcc'</span><span class="token punctuation">]</span><span class="token operator">/</span>data<span class="token punctuation">[</span><span class="token string">'loanAmnt'</span><span class="token punctuation">]</span><span class="token keyword">for</span> data <span class="token keyword">in</span> <span class="token punctuation">[</span>test<span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token comment">#贷款等级</span>    data<span class="token punctuation">[</span><span class="token string">'grade'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'grade'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'B'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'C'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'D'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'E'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'F'</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'G'</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">#就业年限（年）</span>    data<span class="token punctuation">[</span><span class="token string">'employmentLength'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'employmentLength'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'1 year'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'2 years'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'3 years'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'4 years'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'5 years'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'6 years'</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'7 years'</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'8 years'</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'9 years'</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">'10+ years'</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token string">'&lt; 1 year'</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    <span class="token comment">#贷款等级之子级</span>    data<span class="token punctuation">[</span><span class="token string">'subGrade'</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token string">'subGrade'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'E2'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token string">'D2'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token string">'D3'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token string">'A4'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token string">'C2'</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token string">'A5'</span><span class="token punctuation">:</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token string">'C3'</span><span class="token punctuation">:</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token string">'B4'</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'B5'</span><span class="token punctuation">:</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token string">'E5'</span><span class="token punctuation">:</span><span class="token number">10</span><span class="token punctuation">,</span>        <span class="token string">'D4'</span><span class="token punctuation">:</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token string">'B3'</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token string">'B2'</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token string">'D1'</span><span class="token punctuation">:</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token string">'E1'</span><span class="token punctuation">:</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token string">'C5'</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">,</span><span class="token string">'C1'</span><span class="token punctuation">:</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token string">'A2'</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">,</span><span class="token string">'A3'</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">,</span><span class="token string">'B1'</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">,</span>        <span class="token string">'E3'</span><span class="token punctuation">:</span><span class="token number">21</span><span class="token punctuation">,</span><span class="token string">'F1'</span><span class="token punctuation">:</span><span class="token number">22</span><span class="token punctuation">,</span><span class="token string">'C4'</span><span class="token punctuation">:</span><span class="token number">23</span><span class="token punctuation">,</span><span class="token string">'A1'</span><span class="token punctuation">:</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token string">'D5'</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">,</span><span class="token string">'F2'</span><span class="token punctuation">:</span><span class="token number">26</span><span class="token punctuation">,</span><span class="token string">'E4'</span><span class="token punctuation">:</span><span class="token number">27</span><span class="token punctuation">,</span><span class="token string">'F3'</span><span class="token punctuation">:</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token string">'G2'</span><span class="token punctuation">:</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token string">'F5'</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">,</span>        <span class="token string">'G3'</span><span class="token punctuation">:</span><span class="token number">31</span><span class="token punctuation">,</span><span class="token string">'G1'</span><span class="token punctuation">:</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token string">'F4'</span><span class="token punctuation">:</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token string">'G4'</span><span class="token punctuation">:</span><span class="token number">34</span><span class="token punctuation">,</span><span class="token string">'G5'</span><span class="token punctuation">:</span><span class="token number">35</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>        <span class="token comment">#借款人信用档案中当前的信用额度总数 除以 贷款金额</span>    data<span class="token punctuation">[</span><span class="token string">'rato'</span><span class="token punctuation">]</span><span class="token operator">=</span>data<span class="token punctuation">[</span><span class="token string">'totalAcc'</span><span class="token punctuation">]</span><span class="token operator">/</span>data<span class="token punctuation">[</span><span class="token string">'loanAmnt'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、模型建立"><a href="#三、模型建立" class="headerlink" title="三、模型建立"></a>三、模型建立</h3><p>使用CatBoost模型</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#CatBoost模型</span>model<span class="token operator">=</span>model <span class="token operator">=</span> CatBoostClassifier<span class="token punctuation">(</span>    loss_function<span class="token operator">=</span><span class="token string">"Logloss"</span><span class="token punctuation">,</span>    <span class="token comment"># 分类任务常用损失函数</span>    eval_metric<span class="token operator">=</span><span class="token string">"Accuracy"</span><span class="token punctuation">,</span>     <span class="token comment"># 表示用于过度拟合检测和最佳模型选择的度量标准；</span>    learning_rate<span class="token operator">=</span><span class="token number">0.08</span><span class="token punctuation">,</span>         <span class="token comment"># 表示学习率</span>    iterations<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">,</span>    random_seed<span class="token operator">=</span><span class="token number">42</span><span class="token punctuation">,</span>           <span class="token comment"># 设置随机种子进行固定</span>    od_type<span class="token operator">=</span><span class="token string">"Iter"</span><span class="token punctuation">,</span>    metric_period<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">,</span>           <span class="token comment"># 与交叉验证folds数匹配</span>    max_depth <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span>              <span class="token comment"># 表示树模型最大深度</span>    early_stopping_rounds<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">,</span>  <span class="token comment"># 早停步数</span>    use_best_model<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>    task_type<span class="token operator">=</span><span class="token string">"GPU"</span><span class="token punctuation">,</span>          <span class="token comment"># 数据量较小，GPU加速效果不明显</span>    bagging_temperature<span class="token operator">=</span><span class="token number">0.9</span><span class="token punctuation">,</span>    leaf_estimation_method<span class="token operator">=</span><span class="token string">"Newton"</span><span class="token punctuation">,</span><span class="token punctuation">)</span>n_folds <span class="token operator">=</span><span class="token number">10</span> <span class="token comment">#十折交叉校验</span>answers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>mean_score <span class="token operator">=</span> <span class="token number">0</span>data_x<span class="token operator">=</span>train<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'isDefault'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>data_y<span class="token operator">=</span>train<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'isDefault'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>sk <span class="token operator">=</span> StratifiedKFold<span class="token punctuation">(</span>n_splits<span class="token operator">=</span>n_folds<span class="token punctuation">,</span> shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">2021</span><span class="token punctuation">)</span>all_test <span class="token operator">=</span> test<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> train<span class="token punctuation">,</span> test <span class="token keyword">in</span> sk<span class="token punctuation">.</span>split<span class="token punctuation">(</span>data_x<span class="token punctuation">,</span> data_y<span class="token punctuation">)</span><span class="token punctuation">:</span>      x_train <span class="token operator">=</span> data_x<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>train<span class="token punctuation">]</span>    y_train <span class="token operator">=</span> data_y<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>train<span class="token punctuation">]</span>    x_test <span class="token operator">=</span> data_x<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>test<span class="token punctuation">]</span>    y_test <span class="token operator">=</span> data_y<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>test<span class="token punctuation">]</span>    clf <span class="token operator">=</span> model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>x_train<span class="token punctuation">,</span>y_train<span class="token punctuation">,</span> eval_set<span class="token operator">=</span><span class="token punctuation">(</span>x_test<span class="token punctuation">,</span>y_test<span class="token punctuation">)</span><span class="token punctuation">,</span>verbose<span class="token operator">=</span><span class="token number">500</span><span class="token punctuation">)</span> <span class="token comment"># 500条打印一条日志</span>        yy_pred_valid<span class="token operator">=</span>clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>x_test<span class="token punctuation">,</span>prediction_type<span class="token operator">=</span><span class="token string">'Probability'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'cat验证的auc:&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>roc_auc_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> yy_pred_valid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    mean_score <span class="token operator">+=</span> roc_auc_score<span class="token punctuation">(</span>y_test<span class="token punctuation">,</span> yy_pred_valid<span class="token punctuation">)</span> <span class="token operator">/</span> n_folds        y_pred_valid <span class="token operator">=</span> clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>all_test<span class="token punctuation">,</span>prediction_type<span class="token operator">=</span><span class="token string">'Probability'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    answers<span class="token punctuation">.</span>append<span class="token punctuation">(</span>y_pred_valid<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'mean valAuc:&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>mean_score<span class="token punctuation">)</span><span class="token punctuation">)</span>cat_pre<span class="token operator">=</span><span class="token builtin">sum</span><span class="token punctuation">(</span>answers<span class="token punctuation">)</span><span class="token operator">/</span>n_foldsresult<span class="token punctuation">[</span><span class="token string">'isDefault'</span><span class="token punctuation">]</span><span class="token operator">=</span>cat_preresult<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'./baselinev1.csv'</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BaseLine-V1-cbt–分数-0-7349"><a href="#BaseLine-V1-cbt–分数-0-7349" class="headerlink" title="BaseLine V1_cbt–分数: 0.7349"></a>BaseLine V1_cbt–分数: 0.7349</h2><h3 id="一、特征工程优化"><a href="#一、特征工程优化" class="headerlink" title="一、特征工程优化"></a>一、特征工程优化</h3><p>1、<strong>min，max，mean，std没有意义，因为是单一特征</strong></p><p><strong>只增加count，isDefault_mean（唯一值个数少的情况，如果唯一值多，会早成标签泄露问题）</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#cat_fea 为类别特征（一般是出float以外，时间类型也不算）</span>cat_fea <span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'term'</span><span class="token punctuation">,</span><span class="token string">'grade'</span><span class="token punctuation">,</span><span class="token string">'subGrade'</span><span class="token punctuation">,</span><span class="token string">'employmentLength'</span><span class="token punctuation">,</span><span class="token string">'homeOwnership'</span><span class="token punctuation">,</span><span class="token string">'verificationStatus'</span><span class="token punctuation">,</span><span class="token string">'purpose'</span><span class="token punctuation">,</span><span class="token string">'regionCode'</span><span class="token punctuation">,</span><span class="token string">'initialListStatus'</span><span class="token punctuation">,</span><span class="token string">'applicationType'</span><span class="token punctuation">]</span>df <span class="token operator">=</span> pd<span class="token punctuation">.</span>concat<span class="token punctuation">(</span><span class="token punctuation">[</span>train<span class="token punctuation">,</span>test<span class="token punctuation">]</span><span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> col <span class="token keyword">in</span> cat_fea<span class="token punctuation">:</span>    temp <span class="token operator">=</span> train<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>col<span class="token punctuation">,</span>as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>col<span class="token operator">+</span><span class="token string">'_count'</span><span class="token punctuation">:</span> <span class="token string">'count'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df<span class="token punctuation">,</span>temp<span class="token punctuation">,</span>on <span class="token operator">=</span> col<span class="token punctuation">,</span>how <span class="token operator">=</span> <span class="token string">'left'</span><span class="token punctuation">)</span>    <span class="token comment">#isDefault为标签项，需要替换</span>    temp <span class="token operator">=</span> train<span class="token punctuation">.</span>groupby<span class="token punctuation">(</span>col<span class="token punctuation">,</span>as_index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token string">'isDefault'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>agg<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>col<span class="token operator">+</span><span class="token string">'_isDefault_mean'</span><span class="token punctuation">:</span> <span class="token string">'mean'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>    df <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df<span class="token punctuation">,</span>temp<span class="token punctuation">,</span>on <span class="token operator">=</span> col<span class="token punctuation">,</span>how <span class="token operator">=</span> <span class="token string">'left'</span><span class="token punctuation">)</span>train <span class="token operator">=</span> df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'isDefault'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>notnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>test <span class="token operator">=</span> df<span class="token punctuation">[</span>df<span class="token punctuation">[</span><span class="token string">'isDefault'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>全部代码已放代码仓库：</strong><a href="https://github.com/wxydaydayup/LoanDefaultDetection/tree/master">阿里云天池-贷款违约预测—代码仓库</a></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度飞桨-点击反欺诈预测</title>
      <link href="/2022/10/24/%E7%99%BE%E5%BA%A6%E9%A3%9E%E6%A1%A8-%E7%82%B9%E5%87%BB%E5%8F%8D%E6%AC%BA%E8%AF%88%E9%A2%84%E6%B5%8B/"/>
      <url>/2022/10/24/%E7%99%BE%E5%BA%A6%E9%A3%9E%E6%A1%A8-%E7%82%B9%E5%87%BB%E5%8F%8D%E6%AC%BA%E8%AF%88%E9%A2%84%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<h1 id="百度飞桨-点击反欺诈预测"><a href="#百度飞桨-点击反欺诈预测" class="headerlink" title="百度飞桨-点击反欺诈预测"></a>百度飞桨-点击反欺诈预测</h1><h2 id="赛题说明"><a href="#赛题说明" class="headerlink" title="赛题说明"></a>赛题说明</h2><p>赛题链接：<a href="https://aistudio.baidu.com/aistudio/competition/detail/52/0/introduction">百度飞桨：点击反欺诈预测</a></p><p>代码仓库：<a href="https://github.com/wxydaydayup/Baidu_MarTechChallenge">百度飞桨：点击反欺诈预测–代码仓库</a></p><h3 id="一、背景介绍"><a href="#一、背景介绍" class="headerlink" title="一、背景介绍"></a>一、背景介绍</h3><p>点击反欺诈预测 广告欺诈是数字营销需要面临的重要挑战之一，点击会欺诈浪费广告主大量金钱，同时对点击数据会产生误导作用。本次比赛提供了约50万次点击数据。特别注意：我们对数据进行了模拟生成，对某些特征含义进行了隐藏，并进行了脱敏处理。 请预测用户的点击行为是否为正常点击，还是作弊行为。点击欺诈预测适用于各种信息流广告投放，banner广告投放，以及百度网盟平台，帮助商家鉴别点击欺诈，锁定精准真实用户。</p><h3 id="二、任务介绍"><a href="#二、任务介绍" class="headerlink" title="二、任务介绍"></a>二、任务介绍</h3><p>测试集中提供了会话sid及该会话的各维度特征值，基于训练集得出的模型进行预测，判断该会话sid是否为作弊行为。</p><h3 id="三、数据集"><a href="#三、数据集" class="headerlink" title="三、数据集"></a>三、数据集</h3><p>选手报名后，可在【数据集】tab获取数据集，以及基线系统。</p><p><strong>训练集</strong>： train.csv （50万条）<br><strong>测试集</strong>： test1.csv（15万条）</p><h3 id="四、字段说明"><a href="#四、字段说明" class="headerlink" title="四、字段说明"></a>四、字段说明</h3><p>train.csv和test.csv字段说明</p><table><thead><tr><th align="left">字段</th><th align="left">类型</th><th align="left">说明</th></tr></thead><tbody><tr><td align="left">sid</td><td align="left">string</td><td align="left">样本id&#x2F;请求会话sid</td></tr><tr><td align="left">package</td><td align="left">string</td><td align="left">媒体信息，包名（已加密）</td></tr><tr><td align="left">version</td><td align="left">string</td><td align="left">媒体信息，app版本</td></tr><tr><td align="left">android_id</td><td align="left">string</td><td align="left">媒体信息，对外广告位ID（已加密）</td></tr><tr><td align="left">media_id</td><td align="left">string</td><td align="left">媒体信息，对外媒体ID（已加密）</td></tr><tr><td align="left">apptype</td><td align="left">int</td><td align="left">媒体信息，app所属分类</td></tr><tr><td align="left">timestamp</td><td align="left">bigint</td><td align="left">请求到达服务时间，单位ms</td></tr><tr><td align="left">location</td><td align="left">int</td><td align="left">用户地理位置编码（精确到城市）</td></tr><tr><td align="left">fea_hash</td><td align="left">int</td><td align="left">用户特征编码（具体物理含义略去）</td></tr><tr><td align="left">fea1_hash</td><td align="left">int</td><td align="left">用户特征编码（具体物理含义略去）</td></tr><tr><td align="left">cus_type</td><td align="left">int</td><td align="left">用户特征编码（具体物理含义略去）</td></tr><tr><td align="left">ntt</td><td align="left">int</td><td align="left">网络类型 0-未知, 1-有线网, 2-WIFI, 3-蜂窝网络未知, 4-2G, 5-3G, 6–4G</td></tr><tr><td align="left">carrier</td><td align="left">string</td><td align="left">设备使用的运营商 0-未知, 46000-移动, 46001-联通, 46003-电信</td></tr><tr><td align="left">os</td><td align="left">string</td><td align="left">操作系统，默认为android</td></tr><tr><td align="left">osv</td><td align="left">string</td><td align="left">操作系统版本</td></tr><tr><td align="left">lan</td><td align="left">string</td><td align="left">设备采用的语言，默认为中文</td></tr><tr><td align="left">dev_height</td><td align="left">int</td><td align="left">设备高</td></tr><tr><td align="left">dev_width</td><td align="left">int</td><td align="left">设备宽</td></tr><tr><td align="left">dev_ppi</td><td align="left">int</td><td align="left">屏幕分辨率</td></tr></tbody></table><h2 id="BaseLine-V1-lgb–分数-86-746"><a href="#BaseLine-V1-lgb–分数-86-746" class="headerlink" title="BaseLine V1_lgb–分数: 86.746"></a>BaseLine V1_lgb–分数: 86.746</h2><p>切换盘符：</p><pre class="line-numbers language-none"><code class="language-none">jupyter notebook D:\<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="一、数据探索"><a href="#一、数据探索" class="headerlink" title="一、数据探索"></a>一、数据探索</h3><h4 id="1、去除Unnameed字段"><a href="#1、去除Unnameed字段" class="headerlink" title="1、去除Unnameed字段"></a>1、去除Unnameed字段</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">train <span class="token operator">=</span> train<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>test <span class="token operator">=</span> test<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="2、查看字段类型"><a href="#2、查看字段类型" class="headerlink" title="2、查看字段类型"></a>2、查看字段类型</h4><p><strong>写法1:</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">train<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>写法2:</strong></p><p>或者直接查看类型为object的列</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">train<span class="token punctuation">.</span>select_dtypes<span class="token punctuation">(</span>include<span class="token operator">=</span><span class="token string">'object'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>columns<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现以下字段为object类型需要进行数值变换</p><pre class="line-numbers language-none"><code class="language-none">7   lan         316720 non-null  object 10  os          500000 non-null  object 11  osv         493439 non-null  object 15  version     500000 non-null  object 16  fea_hash    500000 non-null  object  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以lan为例查看里面数据情况</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">train<span class="token punctuation">[</span><span class="token string">'lan'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3、查看缺失值的个数"><a href="#3、查看缺失值的个数" class="headerlink" title="3、查看缺失值的个数"></a>3、查看缺失值的个数</h4><p><strong>写法1：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">train<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>写法2：</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">t <span class="token operator">=</span> train<span class="token punctuation">.</span>isnull<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span>t<span class="token punctuation">[</span>t<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>发现以下字段缺少比较多</p><pre class="line-numbers language-none"><code class="language-none">lan           183280osv             6561<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4、唯一值的个数"><a href="#4、唯一值的个数" class="headerlink" title="4、唯一值的个数"></a>4、唯一值的个数</h4><p>查看唯一值的个数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">features <span class="token operator">=</span> train<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> feature <span class="token keyword">in</span> features<span class="token punctuation">:</span>    <span class="token keyword">if</span> train<span class="token punctuation">[</span>feature<span class="token punctuation">]</span><span class="token punctuation">.</span>nunique<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>feature<span class="token punctuation">,</span>train<span class="token punctuation">[</span>feature<span class="token punctuation">]</span><span class="token punctuation">.</span>nunique<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>发现os字段的唯一值个数太少</p><pre class="line-numbers language-none"><code class="language-none">os 2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>查看os</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">train<span class="token punctuation">[</span><span class="token string">'os'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>发现os数据都为android </p><pre class="line-numbers language-none"><code class="language-none">android    303175Android    196825Name: os, dtype: int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="5、数据探索的结论"><a href="#5、数据探索的结论" class="headerlink" title="5、数据探索的结论"></a>5、数据探索的结论</h4><p>object类型字段有：lan、osv 、osv、version、fea_hash</p><p>缺失值较多的字段有：lan、osv </p><p>唯一值个数较少且意义不大：os</p><p>没有意义的字段：sid</p><p>BaselineV1中也先去除timestamp</p><h4 id="6、特征的相关性分析-补充"><a href="#6、特征的相关性分析-补充" class="headerlink" title="6、特征的相关性分析(补充)"></a>6、特征的相关性分析(补充)</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 对特征列进行相关性分析</span><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token operator">%</span>matplotlib inline<span class="token keyword">import</span> seaborn <span class="token keyword">as</span> snsplt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sns<span class="token punctuation">.</span>heatmap<span class="token punctuation">(</span>train<span class="token punctuation">.</span>corr<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>cbar<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>annot<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>cmap<span class="token operator">=</span><span class="token string">'Blues'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、数据预处理"><a href="#二、数据预处理" class="headerlink" title="二、数据预处理"></a>二、数据预处理</h3><p>最终去掉：【lan】【os】【osv】【version】【label】【sid】【timestamp】</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">remove_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'lan'</span><span class="token punctuation">,</span> <span class="token string">'os'</span><span class="token punctuation">,</span> <span class="token string">'osv'</span><span class="token punctuation">,</span> <span class="token string">'version'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">,</span> <span class="token string">'sid'</span><span class="token punctuation">,</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span>col <span class="token operator">=</span> features <span class="token comment">#字段名</span><span class="token keyword">for</span> i <span class="token keyword">in</span> remove_list<span class="token punctuation">:</span>    col<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>i<span class="token punctuation">)</span>features <span class="token operator">=</span> train<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、特征工程"><a href="#三、特征工程" class="headerlink" title="三、特征工程"></a>三、特征工程</h3><h4 id="1、fea-hash特征变换"><a href="#1、fea-hash特征变换" class="headerlink" title="1、fea_hash特征变换"></a>1、fea_hash特征变换</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#查看数据值</span>train<span class="token punctuation">[</span><span class="token string">'fea_hash'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#查看统计信息</span>train<span class="token punctuation">[</span><span class="token string">'fea_hash'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#查看映射的长度特征情况</span>train<span class="token punctuation">[</span><span class="token string">'fea_hash'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>fea_hash进行特征变换</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># fea_hash的长度为新特征</span>features<span class="token punctuation">[</span><span class="token string">'fea_hash_len'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'fea_hash'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>features<span class="token punctuation">[</span><span class="token string">'fea1_hash_len'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'fea1_hash'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 如果fea_hash很长，都归为0，否则为自己的本身</span>features<span class="token punctuation">[</span><span class="token string">'fea_hash'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'fea_hash'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">16</span> <span class="token keyword">else</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>features<span class="token punctuation">[</span><span class="token string">'fea1_hash'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'fea1_hash'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">16</span> <span class="token keyword">else</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="四、模型建立"><a href="#四、模型建立" class="headerlink" title="四、模型建立"></a>四、模型建立</h3><p>test 做和train同样处理，利用lightgbm进行训练与预测，并保存，上诉过程全部合并代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#BaselineV1</span><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> warnings<span class="token keyword">import</span> lightgbm <span class="token keyword">as</span> lgbwarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token comment"># 数据加载</span>train <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./train.csv'</span><span class="token punctuation">)</span>test <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./test1.csv'</span><span class="token punctuation">)</span><span class="token comment"># 去除Unnameed字段</span>train <span class="token operator">=</span> train<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>test <span class="token operator">=</span> test<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment"># 去除数据探索发现问题的字段</span>col <span class="token operator">=</span> train<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>remove_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'lan'</span><span class="token punctuation">,</span> <span class="token string">'os'</span><span class="token punctuation">,</span> <span class="token string">'osv'</span><span class="token punctuation">,</span> <span class="token string">'version'</span><span class="token punctuation">,</span> <span class="token string">'label'</span><span class="token punctuation">,</span> <span class="token string">'sid'</span><span class="token punctuation">,</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> remove_list<span class="token punctuation">:</span>    col<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>i<span class="token punctuation">)</span>features <span class="token operator">=</span> train<span class="token punctuation">[</span>col<span class="token punctuation">]</span>test_features <span class="token operator">=</span> test<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token comment"># fea_hash特征变换</span>features<span class="token punctuation">[</span><span class="token string">'fea_hash_len'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'fea_hash'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>features<span class="token punctuation">[</span><span class="token string">'fea1_hash_len'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'fea1_hash'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>features<span class="token punctuation">[</span><span class="token string">'fea_hash'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'fea_hash'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">16</span> <span class="token keyword">else</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>features<span class="token punctuation">[</span><span class="token string">'fea1_hash'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'fea1_hash'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">16</span> <span class="token keyword">else</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>test_features<span class="token punctuation">[</span><span class="token string">'fea_hash_len'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_features<span class="token punctuation">[</span><span class="token string">'fea_hash'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>test_features<span class="token punctuation">[</span><span class="token string">'fea1_hash_len'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_features<span class="token punctuation">[</span><span class="token string">'fea1_hash'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>test_features<span class="token punctuation">[</span><span class="token string">'fea_hash'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_features<span class="token punctuation">[</span><span class="token string">'fea_hash'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">16</span> <span class="token keyword">else</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>test_features<span class="token punctuation">[</span><span class="token string">'fea1_hash'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_features<span class="token punctuation">[</span><span class="token string">'fea1_hash'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">16</span> <span class="token keyword">else</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#lightgbm进行训练与预测</span>model <span class="token operator">=</span> lgb<span class="token punctuation">.</span>LGBMClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>features<span class="token punctuation">,</span>train<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>result <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_features<span class="token punctuation">)</span><span class="token comment">#res包括sid字段与label字段</span>res <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token string">'sid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>res<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token comment">#保存在csv中</span>res<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'./baselineV1.csv'</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BaseLine-V2-lgb–分数-88-2007"><a href="#BaseLine-V2-lgb–分数-88-2007" class="headerlink" title="BaseLine V2_lgb–分数: 88.2007"></a>BaseLine V2_lgb–分数: 88.2007</h2><h3 id="一、特征工程优化"><a href="#一、特征工程优化" class="headerlink" title="一、特征工程优化"></a>一、特征工程优化</h3><h4 id="1、利用osv特征"><a href="#1、利用osv特征" class="headerlink" title="1、利用osv特征"></a>1、利用osv特征</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 对osv进行数据清洗</span><span class="token keyword">def</span> <span class="token function">osv_trans</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'Android_'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'Android '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'W'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>        temp_index1 <span class="token operator">=</span> x<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> x<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>            temp_index2 <span class="token operator">=</span> x<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            temp_index2 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>         <span class="token keyword">if</span> x<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>            temp_index2 <span class="token operator">=</span> x<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>                    result <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>temp_index1<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'.'</span> <span class="token operator">+</span> x<span class="token punctuation">[</span>temp_index1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>temp_index2<span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token builtin">float</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'有错误: '</span><span class="token operator">+</span>x<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">float</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'有错误: '</span><span class="token operator">+</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span>features<span class="token punctuation">[</span><span class="token string">'osv'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">'8.1.0'</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>features<span class="token punctuation">[</span><span class="token string">'osv'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'osv'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>osv_trans<span class="token punctuation">)</span>test_features<span class="token punctuation">[</span><span class="token string">'osv'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">'8.1.0'</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>test_features<span class="token punctuation">[</span><span class="token string">'osv'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_features<span class="token punctuation">[</span><span class="token string">'osv'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>osv_trans<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、利用TimeStamp特征"><a href="#2、利用TimeStamp特征" class="headerlink" title="2、利用TimeStamp特征"></a>2、利用TimeStamp特征</h4><p>提取时间多尺度并计算时间diff(时间差)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 对timestamp进行数据清洗与特征变换</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetimefeatures<span class="token punctuation">[</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> datetime<span class="token punctuation">.</span>fromtimestamp<span class="token punctuation">(</span>x<span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>test_features<span class="token punctuation">[</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_features<span class="token punctuation">[</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> datetime<span class="token punctuation">.</span>fromtimestamp<span class="token punctuation">(</span>x<span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>temp <span class="token operator">=</span> pd<span class="token punctuation">.</span>DatetimeIndex<span class="token punctuation">(</span>features<span class="token punctuation">[</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>features<span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">.</span>yearfeatures<span class="token punctuation">[</span><span class="token string">'month'</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">.</span>monthfeatures<span class="token punctuation">[</span><span class="token string">'day'</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">.</span>dayfeatures<span class="token punctuation">[</span><span class="token string">'hour'</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">.</span>hourfeatures<span class="token punctuation">[</span><span class="token string">'minute'</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">.</span>minutefeatures<span class="token punctuation">[</span><span class="token string">'week_day'</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">.</span>weekday <span class="token comment">#星期几</span>start_time <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span>features<span class="token punctuation">[</span><span class="token string">'time_diff'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span> <span class="token operator">-</span> start_timefeatures<span class="token punctuation">[</span><span class="token string">'time_diff'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'time_diff'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>days <span class="token operator">+</span> features<span class="token punctuation">[</span><span class="token string">'time_diff'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>seconds<span class="token operator">/</span><span class="token number">3600</span><span class="token operator">/</span><span class="token number">24</span>temp <span class="token operator">=</span> pd<span class="token punctuation">.</span>DatetimeIndex<span class="token punctuation">(</span>test_features<span class="token punctuation">[</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_features<span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">.</span>yeartest_features<span class="token punctuation">[</span><span class="token string">'month'</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">.</span>monthtest_features<span class="token punctuation">[</span><span class="token string">'day'</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">.</span>daytest_features<span class="token punctuation">[</span><span class="token string">'hour'</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">.</span>hourtest_features<span class="token punctuation">[</span><span class="token string">'minute'</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">.</span>minutetest_features<span class="token punctuation">[</span><span class="token string">'week_day'</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">.</span>weekday <span class="token comment">#星期几 </span>test_features<span class="token punctuation">[</span><span class="token string">'time_diff'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_features<span class="token punctuation">[</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span> <span class="token operator">-</span> start_timetest_features<span class="token punctuation">[</span><span class="token string">'time_diff'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_features<span class="token punctuation">[</span><span class="token string">'time_diff'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>days <span class="token operator">+</span> test_features<span class="token punctuation">[</span><span class="token string">'time_diff'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>seconds<span class="token operator">/</span><span class="token number">3600</span><span class="token operator">/</span><span class="token number">24</span>col <span class="token operator">=</span> features<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>col<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token string">'timestamp'</span><span class="token punctuation">)</span>features <span class="token operator">=</span> features<span class="token punctuation">[</span>col<span class="token punctuation">]</span>test_features <span class="token operator">=</span> test_features<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、利用Version特征"><a href="#3、利用Version特征" class="headerlink" title="3、利用Version特征"></a>3、利用Version特征</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 对version进行数据清洗与特征变换</span><span class="token keyword">def</span> <span class="token function">version_trans</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> x<span class="token operator">==</span><span class="token string">'V3'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">3</span>    <span class="token keyword">if</span> x<span class="token operator">==</span><span class="token string">'v1'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">if</span> x<span class="token operator">==</span><span class="token string">'P_Final_6'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">6</span>    <span class="token keyword">if</span> x<span class="token operator">==</span><span class="token string">'V6'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">6</span>    <span class="token keyword">if</span> x<span class="token operator">==</span><span class="token string">'GA3'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">3</span>    <span class="token keyword">if</span> x<span class="token operator">==</span><span class="token string">'GA2'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">2</span>    <span class="token keyword">if</span> x<span class="token operator">==</span><span class="token string">'V2'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">2</span>    <span class="token keyword">if</span> x<span class="token operator">==</span><span class="token string">'50'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">5</span>    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>features<span class="token punctuation">[</span><span class="token string">'version'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'version'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>version_trans<span class="token punctuation">)</span>test_features<span class="token punctuation">[</span><span class="token string">'version'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_features<span class="token punctuation">[</span><span class="token string">'version'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>version_trans<span class="token punctuation">)</span>features<span class="token punctuation">[</span><span class="token string">'version'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'version'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'int'</span><span class="token punctuation">)</span>test_features<span class="token punctuation">[</span><span class="token string">'version'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_features<span class="token punctuation">[</span><span class="token string">'version'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'int'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、模型建立"><a href="#二、模型建立" class="headerlink" title="二、模型建立"></a>二、模型建立</h3><p>上诉过程合并代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">import</span> warnings<span class="token keyword">import</span> lightgbm <span class="token keyword">as</span> lgbwarnings<span class="token punctuation">.</span>filterwarnings<span class="token punctuation">(</span><span class="token string">'ignore'</span><span class="token punctuation">)</span><span class="token comment"># 数据加载和去除Unnameed字段</span>train <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./train.csv'</span><span class="token punctuation">)</span>test <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span><span class="token string">'./test1.csv'</span><span class="token punctuation">)</span>train <span class="token operator">=</span> train<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>test <span class="token operator">=</span> test<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment"># 去除数据探索发现问题的字段</span>col <span class="token operator">=</span> train<span class="token punctuation">.</span>columns<span class="token punctuation">.</span>tolist<span class="token punctuation">(</span><span class="token punctuation">)</span>remove_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'lan'</span><span class="token punctuation">,</span> <span class="token string">'os'</span><span class="token punctuation">,</span><span class="token string">'label'</span><span class="token punctuation">,</span> <span class="token string">'sid'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> remove_list<span class="token punctuation">:</span>    col<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>i<span class="token punctuation">)</span>features <span class="token operator">=</span> train<span class="token punctuation">[</span>col<span class="token punctuation">]</span>test_features <span class="token operator">=</span> test<span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token comment"># 对osv进行数据清洗</span><span class="token keyword">def</span> <span class="token function">osv_trans</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'Android_'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'Android '</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'W'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>        temp_index1 <span class="token operator">=</span> x<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> x<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>            temp_index2 <span class="token operator">=</span> x<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            temp_index2 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>         <span class="token keyword">if</span> x<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>            temp_index2 <span class="token operator">=</span> x<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'-'</span><span class="token punctuation">)</span>                    result <span class="token operator">=</span> x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span>temp_index1<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">'.'</span> <span class="token operator">+</span> x<span class="token punctuation">[</span>temp_index1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>temp_index2<span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">'.'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token builtin">float</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'有错误: '</span><span class="token operator">+</span>x<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token builtin">float</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'有错误: '</span><span class="token operator">+</span>x<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token number">0</span>features<span class="token punctuation">[</span><span class="token string">'osv'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">'8.1.0'</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>features<span class="token punctuation">[</span><span class="token string">'osv'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'osv'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>osv_trans<span class="token punctuation">)</span>test_features<span class="token punctuation">[</span><span class="token string">'osv'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token string">'8.1.0'</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>test_features<span class="token punctuation">[</span><span class="token string">'osv'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_features<span class="token punctuation">[</span><span class="token string">'osv'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>osv_trans<span class="token punctuation">)</span><span class="token comment"># 对timestamp进行数据清洗与特征变换,</span><span class="token keyword">from</span> datetime <span class="token keyword">import</span> datetimefeatures<span class="token punctuation">[</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> datetime<span class="token punctuation">.</span>fromtimestamp<span class="token punctuation">(</span>x<span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>test_features<span class="token punctuation">[</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_features<span class="token punctuation">[</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> datetime<span class="token punctuation">.</span>fromtimestamp<span class="token punctuation">(</span>x<span class="token operator">/</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">)</span>temp <span class="token operator">=</span> pd<span class="token punctuation">.</span>DatetimeIndex<span class="token punctuation">(</span>features<span class="token punctuation">[</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>features<span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">.</span>yearfeatures<span class="token punctuation">[</span><span class="token string">'month'</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">.</span>monthfeatures<span class="token punctuation">[</span><span class="token string">'day'</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">.</span>dayfeatures<span class="token punctuation">[</span><span class="token string">'hour'</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">.</span>hourfeatures<span class="token punctuation">[</span><span class="token string">'minute'</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">.</span>minutefeatures<span class="token punctuation">[</span><span class="token string">'week_day'</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">.</span>weekday <span class="token comment">#星期几</span>start_time <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token punctuation">)</span>features<span class="token punctuation">[</span><span class="token string">'time_diff'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span> <span class="token operator">-</span> start_timefeatures<span class="token punctuation">[</span><span class="token string">'time_diff'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'time_diff'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>days <span class="token operator">+</span> features<span class="token punctuation">[</span><span class="token string">'time_diff'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>seconds<span class="token operator">/</span><span class="token number">3600</span><span class="token operator">/</span><span class="token number">24</span>temp <span class="token operator">=</span> pd<span class="token punctuation">.</span>DatetimeIndex<span class="token punctuation">(</span>test_features<span class="token punctuation">[</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>test_features<span class="token punctuation">[</span><span class="token string">'year'</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">.</span>yeartest_features<span class="token punctuation">[</span><span class="token string">'month'</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">.</span>monthtest_features<span class="token punctuation">[</span><span class="token string">'day'</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">.</span>daytest_features<span class="token punctuation">[</span><span class="token string">'hour'</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">.</span>hourtest_features<span class="token punctuation">[</span><span class="token string">'minute'</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">.</span>minutetest_features<span class="token punctuation">[</span><span class="token string">'week_day'</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">.</span>weekday <span class="token comment">#星期几 </span>test_features<span class="token punctuation">[</span><span class="token string">'time_diff'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_features<span class="token punctuation">[</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span> <span class="token operator">-</span> start_timetest_features<span class="token punctuation">[</span><span class="token string">'time_diff'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_features<span class="token punctuation">[</span><span class="token string">'time_diff'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>days <span class="token operator">+</span> test_features<span class="token punctuation">[</span><span class="token string">'time_diff'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>dt<span class="token punctuation">.</span>seconds<span class="token operator">/</span><span class="token number">3600</span><span class="token operator">/</span><span class="token number">24</span>features <span class="token operator">=</span> features<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span>test_features <span class="token operator">=</span> test_features<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'timestamp'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>axis <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># 对version进行数据清洗与特征变换</span><span class="token keyword">def</span> <span class="token function">version_trans</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> x<span class="token operator">==</span><span class="token string">'V3'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">3</span>    <span class="token keyword">if</span> x<span class="token operator">==</span><span class="token string">'v1'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">if</span> x<span class="token operator">==</span><span class="token string">'P_Final_6'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">6</span>    <span class="token keyword">if</span> x<span class="token operator">==</span><span class="token string">'V6'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">6</span>    <span class="token keyword">if</span> x<span class="token operator">==</span><span class="token string">'GA3'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">3</span>    <span class="token keyword">if</span> x<span class="token operator">==</span><span class="token string">'GA2'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">2</span>    <span class="token keyword">if</span> x<span class="token operator">==</span><span class="token string">'V2'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">2</span>    <span class="token keyword">if</span> x<span class="token operator">==</span><span class="token string">'50'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">5</span>    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>features<span class="token punctuation">[</span><span class="token string">'version'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'version'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>version_trans<span class="token punctuation">)</span>test_features<span class="token punctuation">[</span><span class="token string">'version'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_features<span class="token punctuation">[</span><span class="token string">'version'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>version_trans<span class="token punctuation">)</span>features<span class="token punctuation">[</span><span class="token string">'version'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'version'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'int'</span><span class="token punctuation">)</span>test_features<span class="token punctuation">[</span><span class="token string">'version'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_features<span class="token punctuation">[</span><span class="token string">'version'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'int'</span><span class="token punctuation">)</span><span class="token comment"># 对fea_hash与fea1_hash特征变换</span>features<span class="token punctuation">[</span><span class="token string">'fea_hash_len'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'fea_hash'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>features<span class="token punctuation">[</span><span class="token string">'fea1_hash_len'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'fea1_hash'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>features<span class="token punctuation">[</span><span class="token string">'fea_hash'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'fea_hash'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">16</span> <span class="token keyword">else</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>features<span class="token punctuation">[</span><span class="token string">'fea1_hash'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'fea1_hash'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">16</span> <span class="token keyword">else</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>test_features<span class="token punctuation">[</span><span class="token string">'fea_hash_len'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_features<span class="token punctuation">[</span><span class="token string">'fea_hash'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>test_features<span class="token punctuation">[</span><span class="token string">'fea1_hash_len'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_features<span class="token punctuation">[</span><span class="token string">'fea1_hash'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>test_features<span class="token punctuation">[</span><span class="token string">'fea_hash'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_features<span class="token punctuation">[</span><span class="token string">'fea_hash'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">16</span> <span class="token keyword">else</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span>test_features<span class="token punctuation">[</span><span class="token string">'fea1_hash'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_features<span class="token punctuation">[</span><span class="token string">'fea1_hash'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> <span class="token number">0</span> <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">16</span> <span class="token keyword">else</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#lightgbm进行训练与预测</span>model <span class="token operator">=</span> lgb<span class="token punctuation">.</span>LGBMClassifier<span class="token punctuation">(</span><span class="token punctuation">)</span>model<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>features<span class="token punctuation">,</span>train<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>result <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_features<span class="token punctuation">)</span><span class="token comment">#res包括sid字段与label字段</span>res <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token string">'sid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>res<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span> <span class="token operator">=</span> result<span class="token comment">#保存在csv中</span>res<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'./baselineV2.csv'</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"已完成"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BaseLine-V3-xgb–分数-88-5073"><a href="#BaseLine-V3-xgb–分数-88-5073" class="headerlink" title="BaseLine V3_xgb–分数: 88.5073"></a>BaseLine V3_xgb–分数: 88.5073</h2><h3 id="一、特征工程优化-1"><a href="#一、特征工程优化-1" class="headerlink" title="一、特征工程优化"></a>一、特征工程优化</h3><h4 id="1、构造面积特征和相除特征"><a href="#1、构造面积特征和相除特征" class="headerlink" title="1、构造面积特征和相除特征"></a>1、构造面积特征和相除特征</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">features<span class="token punctuation">[</span><span class="token string">'dev_area'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'dev_height'</span><span class="token punctuation">]</span> <span class="token operator">*</span> features<span class="token punctuation">[</span><span class="token string">'dev_width'</span><span class="token punctuation">]</span>test_features<span class="token punctuation">[</span><span class="token string">'dev_area'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_features<span class="token punctuation">[</span><span class="token string">'dev_height'</span><span class="token punctuation">]</span> <span class="token operator">*</span> test_features<span class="token punctuation">[</span><span class="token string">'dev_width'</span><span class="token punctuation">]</span>features<span class="token punctuation">[</span><span class="token string">'dev_rato'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'dev_height'</span><span class="token punctuation">]</span> <span class="token operator">/</span> features<span class="token punctuation">[</span><span class="token string">'dev_width'</span><span class="token punctuation">]</span>test_features<span class="token punctuation">[</span><span class="token string">'dev_rato'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_features<span class="token punctuation">[</span><span class="token string">'dev_height'</span><span class="token punctuation">]</span> <span class="token operator">/</span> test_features<span class="token punctuation">[</span><span class="token string">'dev_width'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、APP版本与操作系统版本差"><a href="#2、APP版本与操作系统版本差" class="headerlink" title="2、APP版本与操作系统版本差"></a>2、APP版本与操作系统版本差</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">features<span class="token punctuation">[</span><span class="token string">'version_osv'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span><span class="token string">'osv'</span><span class="token punctuation">]</span> <span class="token operator">-</span> features<span class="token punctuation">[</span><span class="token string">'version'</span><span class="token punctuation">]</span>test_features<span class="token punctuation">[</span><span class="token string">'version_osv'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_features<span class="token punctuation">[</span><span class="token string">'osv'</span><span class="token punctuation">]</span> <span class="token operator">-</span> test_features<span class="token punctuation">[</span><span class="token string">'version'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="二、xgboost模型"><a href="#二、xgboost模型" class="headerlink" title="二、xgboost模型"></a>二、xgboost模型</h3><h4 id="1、LightGBM-祖传参数"><a href="#1、LightGBM-祖传参数" class="headerlink" title="1、LightGBM 祖传参数"></a>1、LightGBM 祖传参数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">clf <span class="token operator">=</span> lgb<span class="token punctuation">.</span>LGBMClassifier<span class="token punctuation">(</span>            num_leaves<span class="token operator">=</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">5</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> reg_alpha<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">,</span> reg_lambda<span class="token operator">=</span><span class="token number">0.25</span><span class="token punctuation">,</span> objective<span class="token operator">=</span><span class="token string">'multiclass'</span><span class="token punctuation">,</span>            max_depth<span class="token operator">=</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> learning_rate<span class="token operator">=</span><span class="token number">0.005</span><span class="token punctuation">,</span> min_child_samples<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">2021</span><span class="token punctuation">,</span>            n_estimators<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">,</span> subsample<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> colsample_bytree<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>device <span class="token operator">=</span> gpugpu_platform_id <span class="token operator">=</span> <span class="token number">0</span>gpu_device_id <span class="token operator">=</span> <span class="token number">0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、XGBoost祖传参数"><a href="#2、XGBoost祖传参数" class="headerlink" title="2、XGBoost祖传参数"></a>2、XGBoost祖传参数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">model_xgb <span class="token operator">=</span> xgb<span class="token punctuation">.</span>XGBClassifier<span class="token punctuation">(</span>            max_depth<span class="token operator">=</span><span class="token number">9</span><span class="token punctuation">,</span> learning_rate<span class="token operator">=</span><span class="token number">0.005</span><span class="token punctuation">,</span> n_estimators<span class="token operator">=</span><span class="token number">2000</span><span class="token punctuation">,</span>             objective<span class="token operator">=</span><span class="token string">'multi:softprob'</span><span class="token punctuation">,</span> tree_method<span class="token operator">=</span><span class="token string">'gpu_hist'</span><span class="token punctuation">,</span>             subsample<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span> colsample_bytree<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>             min_child_samples<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> eval_metric<span class="token operator">=</span><span class="token string">'logloss'</span><span class="token punctuation">,</span> reg_lambda<span class="token operator">=</span><span class="token number">0.5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、使用xgboost并使用祖传参数"><a href="#3、使用xgboost并使用祖传参数" class="headerlink" title="3、使用xgboost并使用祖传参数"></a>3、使用xgboost并使用祖传参数</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">%</span><span class="token operator">%</span>time<span class="token comment">#lightgbm进行训练与预测</span><span class="token keyword">import</span> xgboost <span class="token keyword">as</span> xgbmodel_xgb <span class="token operator">=</span> xgb<span class="token punctuation">.</span>XGBClassifier<span class="token punctuation">(</span>            max_depth<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">,</span> learning_rate<span class="token operator">=</span><span class="token number">0.05</span><span class="token punctuation">,</span> n_estimators<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">,</span>             objective<span class="token operator">=</span><span class="token string">'binary:logistic'</span><span class="token punctuation">,</span> tree_method<span class="token operator">=</span><span class="token string">'gpu_hist'</span><span class="token punctuation">,</span>             subsample<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span> colsample_bytree<span class="token operator">=</span><span class="token number">0.8</span><span class="token punctuation">,</span>             min_child_samples<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> eval_metric<span class="token operator">=</span><span class="token string">'auc'</span><span class="token punctuation">,</span> reg_lambda<span class="token operator">=</span><span class="token number">0.5</span>        <span class="token punctuation">)</span>model_xgb<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>features<span class="token punctuation">,</span>train<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>result_xgb <span class="token operator">=</span> model<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_features<span class="token punctuation">)</span>res <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token string">'sid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>res<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span> <span class="token operator">=</span> result_xgbres<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'./baselineV3.csv'</span><span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"已完成"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>xgboost的祖传参数</p><table><thead><tr><th align="center">参数</th><th align="left">含义</th></tr></thead><tbody><tr><td align="center">max_depth</td><td align="left">含义：树的最大深度，用来避免过拟合的。max_depth越大，模型会学到更具体更局部的样本，需要使用CV函数来进行调优。 <br />默认值：6，典型值：3-10。<br />调参：值越大，越容易过拟合；值越小，越容易欠拟合。</td></tr><tr><td align="center">learning_rate</td><td align="left">含义：学习率，控制每次迭代更新权重时的步长<br />默认值：0.3，典型值：0.01-0.2。 <br />调参：值越小，训练越慢。</td></tr><tr><td align="center">n_estimators</td><td align="left">总共迭代的次数，即决策树的个数，相当于训练的轮数</td></tr><tr><td align="center">objective</td><td align="left">回归任务：reg:linear (默认)  reg: logistic <br />二分类  binary:logistic (概率)  binary：logitraw  (类别) <br />多分类  multi：softmax num_class&#x3D;n (返回类别) multi：softprob  num_class&#x3D;n(返回概率)</td></tr><tr><td align="center">tree_method</td><td align="left">可调用gpu：gpu_hist。使用功能的树的构建方法，hist代表使用直方图优化的近似贪婪的算法</td></tr><tr><td align="center">subsample</td><td align="left">含义：训练样本采样率（行采样），训练每棵树时，使用的数据占全部训练集的比例。这个参数控制对于每棵树，随机采样的比例。 减小这个参数的值，算法会更加保守，避免过拟合。但是，如果这个值设置得过小，它可能会导致欠拟合。<br />默认值：1，典型值：0.5-1。<br />调参：防止过拟合。</td></tr><tr><td align="center">colsample_bytree</td><td align="left">含义：训练每棵树时，使用的数据占全部训练集的比例。默认值为1，典型值为0.5-1。和GBM中的subsample参数一模一样。这个参数控制对于每棵树，随机采样的比例。 减小这个参数的值，算法会更加保守，避免过拟合。但是，如果这个值设置得过小，它可能会导致欠拟合。 <br />典型值：0.5-1 <br />调参：防止过拟合。</td></tr><tr><td align="center">min_child_samples</td><td align="left"></td></tr><tr><td align="center">eval_metric</td><td align="left">用户可以添加多种评价指标，对于Python用户要以list传递参数对给程序<br />可供的选择如下:  <br />回归任务(默认rmse)  ：rmse–均方根误差         mae–平均绝对误差 <br />分类任务(默认error) ： auc–roc曲线下面积        error–错误率（二分类）    merror–错误率（多分类） logloss–负对数似然函数（二分类）     mlogloss–负对数似然函数（多分类）</td></tr><tr><td align="center">reg_lambda</td><td align="left">L2正则化系数</td></tr></tbody></table><h4 id="4、可视化的方式查看特征的重要程度"><a href="#4、可视化的方式查看特征的重要程度" class="headerlink" title="4、可视化的方式查看特征的重要程度"></a>4、可视化的方式查看特征的重要程度</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> xgboost <span class="token keyword">import</span> plot_importance<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> pltplot_importance<span class="token punctuation">(</span>model_xgb<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="BaseLine-V4-xgb–分数-88-946"><a href="#BaseLine-V4-xgb–分数-88-946" class="headerlink" title="BaseLine V4_xgb–分数: 88.946"></a>BaseLine V4_xgb–分数: 88.946</h2><h3 id="一、使用十折交叉验证优化"><a href="#一、使用十折交叉验证优化" class="headerlink" title="一、使用十折交叉验证优化"></a>一、使用十折交叉验证优化</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">%</span><span class="token operator">%</span>time<span class="token comment"># 定义10折子模型</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> StratifiedKFold<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score<span class="token keyword">def</span> <span class="token function">xgb_model</span><span class="token punctuation">(</span>clf<span class="token punctuation">,</span>train_x<span class="token punctuation">,</span>train_y<span class="token punctuation">,</span>test<span class="token punctuation">)</span><span class="token punctuation">:</span>    sk<span class="token operator">=</span>StratifiedKFold<span class="token punctuation">(</span>n_splits<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">,</span>random_state<span class="token operator">=</span><span class="token number">2021</span><span class="token punctuation">,</span>shuffle <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>    prob<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    mean_acc<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span><span class="token punctuation">(</span>train_index<span class="token punctuation">,</span>val_index<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>sk<span class="token punctuation">.</span>split<span class="token punctuation">(</span>train_x<span class="token punctuation">,</span>train_y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        train_x_real<span class="token operator">=</span>train_x<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>train_index<span class="token punctuation">]</span>        train_y_real<span class="token operator">=</span>train_y<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>train_index<span class="token punctuation">]</span>        val_x<span class="token operator">=</span>train_x<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>val_index<span class="token punctuation">]</span>        val_y<span class="token operator">=</span>train_y<span class="token punctuation">.</span>iloc<span class="token punctuation">[</span>val_index<span class="token punctuation">]</span>        <span class="token comment">#模型训练及验证集测试</span>        clf<span class="token operator">=</span>clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_x_real<span class="token punctuation">,</span>train_y_real<span class="token punctuation">)</span>        val_y_pred<span class="token operator">=</span>clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>val_x<span class="token punctuation">)</span>        acc_val<span class="token operator">=</span>accuracy_score<span class="token punctuation">(</span>val_y<span class="token punctuation">,</span>val_y_pred<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'第&#123;&#125;个子模型 accuracy&#123;&#125;'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>acc_val<span class="token punctuation">)</span><span class="token punctuation">)</span>        mean_acc<span class="token operator">+=</span>mean_acc<span class="token operator">/</span><span class="token number">10</span>        <span class="token comment">#预测测试集</span>        test_y_pred<span class="token operator">=</span>clf<span class="token punctuation">.</span>predict_proba<span class="token punctuation">(</span>test<span class="token punctuation">)</span>        prob<span class="token punctuation">.</span>append<span class="token punctuation">(</span>test_y_pred<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>mean_acc<span class="token punctuation">)</span>    mean_prob<span class="token operator">=</span><span class="token builtin">sum</span><span class="token punctuation">(</span>prob<span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">10</span>    <span class="token keyword">return</span> mean_prob  <span class="token keyword">import</span> xgboost <span class="token keyword">as</span> xgbmodel_xgb2 <span class="token operator">=</span> xgb<span class="token punctuation">.</span>XGBClassifier<span class="token punctuation">(</span>            max_depth<span class="token operator">=</span><span class="token number">15</span><span class="token punctuation">,</span> learning_rate<span class="token operator">=</span><span class="token number">0.005</span><span class="token punctuation">,</span> n_estimators<span class="token operator">=</span><span class="token number">5300</span><span class="token punctuation">,</span>             objective<span class="token operator">=</span><span class="token string">'binary:logistic'</span><span class="token punctuation">,</span> tree_method<span class="token operator">=</span><span class="token string">'gpu_hist'</span><span class="token punctuation">,</span>             subsample<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">,</span> colsample_bytree<span class="token operator">=</span><span class="token number">0.7</span><span class="token punctuation">,</span>             min_child_samples<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">,</span> eval_metric<span class="token operator">=</span><span class="token string">'auc'</span><span class="token punctuation">,</span> reg_lambda<span class="token operator">=</span><span class="token number">0.5</span>        <span class="token punctuation">)</span>result_xgb<span class="token operator">=</span>xgb_model<span class="token punctuation">(</span>model_xgb2<span class="token punctuation">,</span>features<span class="token punctuation">,</span>train<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>test_features<span class="token punctuation">)</span> result_xgb2<span class="token operator">=</span><span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> result_xgb<span class="token punctuation">]</span>result_xgb2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span> <span class="token keyword">if</span> x<span class="token operator">>=</span><span class="token number">0.5</span> <span class="token keyword">else</span> <span class="token number">0</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> result_xgb2<span class="token punctuation">]</span> res <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>test<span class="token punctuation">[</span><span class="token string">'sid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>res<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span> <span class="token operator">=</span> result_xgb2res<span class="token punctuation">.</span>to_csv<span class="token punctuation">(</span><span class="token string">'./baselineV4.csv'</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'已完成'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="BaseLine-V5-xgb–分数-89-0787"><a href="#BaseLine-V5-xgb–分数-89-0787" class="headerlink" title="BaseLine V5_xgb–分数: 89.0787"></a>BaseLine V5_xgb–分数: 89.0787</h2><h3 id="一、特征工程优化-2"><a href="#一、特征工程优化-2" class="headerlink" title="一、特征工程优化"></a>一、特征工程优化</h3><p>​通过特征比，寻找关键特征，构造新特征，新特征字段 &#x3D; 原始特征字段 + 1</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#通过特征比，寻找关键特征，构造新特征，新特征字段 = 原始特征字段 + 1</span><span class="token keyword">def</span> <span class="token function">find_key_feature</span><span class="token punctuation">(</span>train<span class="token punctuation">,</span> selected<span class="token punctuation">)</span><span class="token punctuation">:</span>    temp <span class="token operator">=</span> pd<span class="token punctuation">.</span>DataFrame<span class="token punctuation">(</span>columns <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    temp0 <span class="token operator">=</span> train<span class="token punctuation">[</span>train<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">]</span>    temp1 <span class="token operator">=</span> train<span class="token punctuation">[</span>train<span class="token punctuation">[</span><span class="token string">'label'</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">]</span>    temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp0<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>temp0<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span>    temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp1<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>temp1<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">100</span>    temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">/</span> temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token comment">#选出大于10倍的特征</span>    result <span class="token operator">=</span> temp<span class="token punctuation">[</span>temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">.</span>sort_values<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> ascending <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index    <span class="token keyword">return</span> resultselected_cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'osv'</span><span class="token punctuation">,</span><span class="token string">'apptype'</span><span class="token punctuation">,</span> <span class="token string">'carrier'</span><span class="token punctuation">,</span> <span class="token string">'dev_height'</span><span class="token punctuation">,</span> <span class="token string">'dev_ppi'</span><span class="token punctuation">,</span><span class="token string">'dev_width'</span><span class="token punctuation">,</span> <span class="token string">'media_id'</span><span class="token punctuation">,</span>                  <span class="token string">'package'</span><span class="token punctuation">,</span> <span class="token string">'version'</span><span class="token punctuation">,</span> <span class="token string">'fea_hash'</span><span class="token punctuation">,</span> <span class="token string">'location'</span><span class="token punctuation">,</span> <span class="token string">'fea1_hash'</span><span class="token punctuation">,</span><span class="token string">'cus_type'</span><span class="token punctuation">]</span>key_feature <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> selected <span class="token keyword">in</span> selected_cols<span class="token punctuation">:</span>    key_feature<span class="token punctuation">[</span>selected<span class="token punctuation">]</span> <span class="token operator">=</span> find_key_feature<span class="token punctuation">(</span>train<span class="token punctuation">,</span> selected<span class="token punctuation">)</span>key_feature<span class="token keyword">def</span> <span class="token function">f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> selected<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> x <span class="token keyword">in</span> key_feature<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token keyword">for</span> selected <span class="token keyword">in</span> selected_cols<span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key_feature<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        features<span class="token punctuation">[</span>selected<span class="token operator">+</span><span class="token string">'1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> features<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> args <span class="token operator">=</span> <span class="token punctuation">(</span>selected<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        test_features<span class="token punctuation">[</span>selected<span class="token operator">+</span><span class="token string">'1'</span><span class="token punctuation">]</span> <span class="token operator">=</span> test_features<span class="token punctuation">[</span>selected<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> args <span class="token operator">=</span> <span class="token punctuation">(</span>selected<span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>selected<span class="token operator">+</span><span class="token string">'1 created'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>全部代码已放代码仓库：</strong><a href="https://github.com/wxydaydayup/Baidu_MarTechChallenge">百度飞桨: 点击反欺诈预测–代码仓库</a></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 数据分析 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据分析实战45讲</title>
      <link href="/2022/10/24/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/"/>
      <url>/2022/10/24/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="数据分析前言"><a href="#数据分析前言" class="headerlink" title="数据分析前言"></a>数据分析前言</h1><h2 id="白话数据概念"><a href="#白话数据概念" class="headerlink" title="白话数据概念"></a>白话数据概念</h2><h3 id="一、商业智能、数据仓库、数据挖掘"><a href="#一、商业智能、数据仓库、数据挖掘" class="headerlink" title="一、商业智能、数据仓库、数据挖掘"></a>一、商业智能、数据仓库、数据挖掘</h3><p>比如你认识了两个漂亮的女孩。</p><p><strong>商业智能</strong>会告诉你要追哪个？成功概率有多大？</p><p><strong>数据仓库</strong>会说，我这里存储了这两个女孩的相关信息，你要吗？</p><p>其中每个女孩的数据都有单独的文件夹，里面有她们各自的姓名、生日、喜好和联系方式等，这些具体的信息就是<strong>数据元</strong>，加起来叫作<strong>元数据</strong>。</p><p><strong>数据挖掘</strong>会帮助你确定追哪个女孩，并且整理好数据仓库，这里就可以使用到各种算法，帮你做决策了。</p><h3 id="二、数据挖掘中的类型"><a href="#二、数据挖掘中的类型" class="headerlink" title="二、数据挖掘中的类型"></a>二、数据挖掘中的类型</h3><p>你可能会用到<strong>分类算法</strong>。御姐、萝莉、女王，她到底属于哪个分类？</p><p>如果认识的女孩太多了，多到你已经数不过来了，比如说5万人！你就可以使用<strong>聚类算法</strong>了，它帮你把这些女孩分成多个群组，比如5个组。然后再对每个群组的特性进行了解，进行决策。这样就把5万人的决策，转化成了5个组的决策。成功实现降维，大大提升了效率。</p><p>如果你想知道这个女孩的闺蜜是谁，那么<strong>关联分析算法</strong>可以告诉你。</p><h3 id="三、数据预处理中的术语"><a href="#三、数据预处理中的术语" class="headerlink" title="三、数据预处理中的术语"></a>三、数据预处理中的术语</h3><p>如果你的数据来源比较多，比如有很多朋友给你介绍女朋友，很多人都推荐了同一个，你就需要去重，这叫<strong>数据清洗</strong>；</p><p>为了方便记忆，你把不同朋友推荐的同一个女孩信息在数据库中合成一个，这叫<strong>数据集成</strong>；</p><p>有些数据渠道统计的体重的单位是公斤，有些是斤，你就需要将它们转换成同一个单位，这叫<strong>数据变换。</strong></p><p>最后你可以进行<strong>数据可视化</strong>了，它会直观地把你想要的结果呈现出来。</p><h3 id="四、数据处理中的流程"><a href="#四、数据处理中的流程" class="headerlink" title="四、数据处理中的流程"></a>四、数据处理中的流程</h3><h4 id="1、数据采集"><a href="#1、数据采集" class="headerlink" title="1、数据采集"></a>1、数据采集</h4><p>​数据源 ：开源数据源、爬虫抓取、日志采集、传感器</p><p>​工具使用：火车采集器、八爪鱼、搜集客</p><ul><li><p><a href="http://www.locoy.com/">火车采集器 </a>不仅可以做抓取工具，也可以做数据清洗、数据分析、数据挖掘和可视化等工作。数据源适用于绝大部分的网页，网页中能看到的内容都可以通过采集规则进行抓取。</p></li><li><p><a href="http://www.bazhuayu.com/">八爪鱼</a>    是知名的采集工具，它有两个版本，一个就是免费的采集模板，还有一个就是云采集（付费）。</p><p>免费的采集模板实际上就是内容采集规则，包括了电商类、生活服务类、社交媒体类和论坛类的网站都可以采集，用起来非常方便。</p><p>云采集就是当你配置好采集任务，就可以交给八爪鱼的云端进行采集。八爪鱼一共有5000台服务器，通过云端多节点并发采集，采集速度远远超过本地采集。此外还可以自动切换多个 IP，避免IP被封，影响采集。做过工程项目的同学应该能体会到，云采集这个功能太方便了，很多时候自动切换IP以及云采集才是自动化采集的关键。</p></li><li><p><a href="http://www.gooseeker.com/">集搜客</a>   这个工具的特点是完全可视化操作，无需编程。整个采集过程也是所见即所得，抓取结果信息、错误信息等都反应在软件中。相比于八爪鱼来说，集搜客没有流程的概念，用户只需要关注抓取什么数据，而流程细节完全交给集搜客来处理。但是集搜客的缺点是没有云采集功能，所有爬虫都是在用户自己电脑上跑的。</p></li></ul><h4 id="2、数据挖掘"><a href="#2、数据挖掘" class="headerlink" title="2、数据挖掘"></a>2、数据挖掘</h4><p>​找到其中的规律，来指导公司业务，数据挖掘的核心是挖掘数据的商业价值</p><ul><li>商业理解：数据挖掘不是我们的目的，我们的目的是更好地帮助业务，所以首先要从商业的角度理解项目需求，在这个基础上，再对数据挖掘的目标进行定义。 </li><li>数据理解：尝试收集部分数据，然后对数据进行探索，包括数据描述、数据质量验证等，这有助于你对收集的数据有个初步的认知。 </li><li>数据准备：开始收集数据，并对数据进行清洗、数据集成等操作，完成数据挖掘前的准备工作。 </li><li>模型建立：选择和应用各种数据挖掘模型，并进行优化，以便得到更好的分类结果。 </li><li>模型评估：对模型进行评价，并检查构建模型的每个步骤，确认模型是否实现了预定的 商业目标。 </li><li>上线发布：模型的作用是从数据中找到金矿，也就是我们所说的“知识”，获得的知识需要转化成用户可以使用的方式，数据挖掘结果如果是日常运营的一部分，那么后续的监控和维护就会变得重要。</li></ul><h4 id="3、数据可视化"><a href="#3、数据可视化" class="headerlink" title="3、数据可视化"></a>3、数据可视化</h4><p>第一种：使用 Python，在 Python 对数据进行清洗、挖掘的过程中，我们可以使用 Matplotlib、Seaborn 等第三方库进行呈现。 </p><p>第二种：直接使用第三方工具。如果你已经生成了 csv 格式文件，可以采用微图、DataV、Data GIF Maker 等第三方工具。</p><h2 id="NumPy"><a href="#NumPy" class="headerlink" title="NumPy"></a>NumPy</h2><p>​标准的 Python 中，用列表list 保存数组的数值。由于列表中的元素可以是任意 的对象，所以列表中 list 保存的是对象的指针。虽然在 Python 编程中隐去了指针的概 念，但是数组有指针，Python 的列表 list 其实就是数组。这样如果我要保存一个简单的数组 [0,1,2]，就需要有 3 个指针和 3 个整数的对象，这样对于 Python 来说是非常不经济的，浪费了内存和计算时间。</p><p>​为什么使用 NumPy 让你的 Python 科学计算更高效</p><ol><li>列表 list 的元素 在系统内存中是分散存储的，而 NumPy 数组存储在一个均匀连续的内存块中。这样数组计算遍历所有的元素，不像列表 list 还需要对内存地址进行查找，从而节省了计算资源。</li><li>在内存访问模式中，缓存会直接把字节块从 RAM 加载到 CPU 寄存器中。因为数据连续的存储在内存中，NumPy 直接利用现代 CPU 的矢量化指令计算，加载寄存器中的多个连续浮点数。</li><li>另外 NumPy 中的矩阵计算可以采用多线程的方式，充分利用多核 CPU 计算资源，大大提升了计算效率</li></ol><p>在 NumPy 里有两个重要的对象： ndarray解决了多维数组问题，而 ufunc则是解决对数组进行处理的函数。</p><h3 id="一、Ndarray"><a href="#一、Ndarray" class="headerlink" title="一、Ndarray"></a>一、Ndarray</h3><p>​Ndarray全称为N-dimensional array object, 实际上是多维数组的含义。在 NumPy 数组中，维数称为秩（rank），一维数组 的秩为 1，二维数组的秩为 2，以此类推。在 NumPy 中，每一个线性的数组称为一个轴 （axes），其实秩就是描述轴的数量。</p><p>​可以通过函数 shape 属性获得数组的大小，通过 dtype 获得元素的属性，</p><h4 id="1、Shape-amp-dtype"><a href="#1、Shape-amp-dtype" class="headerlink" title="1、Shape&amp;dtype"></a>1、Shape&amp;dtype</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">(3,)(3, 3)int32[[ 1  2  3] [ 4 10  6] [ 7  8  9]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、结构数组"><a href="#2、结构数组" class="headerlink" title="2、结构数组"></a>2、结构数组</h4><p>​如果你想统计一个班级里面学生的姓名、年龄，以及语文、英语、数学成绩该怎么办？当然你可以用数组的下标来代表不同的字段，比如下标为 0 是姓名、下标为1是年龄等，但是这样不显性，此时便可以使用Numpy中的结构数组。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">persontype <span class="token operator">=</span> np<span class="token punctuation">.</span>dtype<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'names'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'chinese'</span><span class="token punctuation">,</span> <span class="token string">'math'</span><span class="token punctuation">,</span> <span class="token string">'english'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'formats'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'S32'</span><span class="token punctuation">,</span><span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>peoples <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"ZhangFei"</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"GuanYu"</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">96</span><span class="token punctuation">,</span><span class="token number">88.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">(</span><span class="token string">"ZhaoYun"</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">92</span><span class="token punctuation">,</span><span class="token number">96.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"HuangZhong"</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>persontype<span class="token punctuation">)</span>ages <span class="token operator">=</span> peoples<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>ages<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>ages<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">[32 24 28 29]28.25<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="二、Ufunc"><a href="#二、Ufunc" class="headerlink" title="二、Ufunc"></a>二、Ufunc</h3><h4 id="1、加、减、乘、除、指数、取余"><a href="#1、加、减、乘、除、指数、取余" class="headerlink" title="1、加、减、乘、除、指数、取余"></a>1、加、减、乘、除、指数、取余</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#arange 通过指定初始值、终值、步长来创建等差数列的一维数组，默认不包括终值</span>x1 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#linspace 通过指定初始值、终值、元素个数来创建等差数列的一维数组，默认是包括终值的</span>x2 <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>add<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#加</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>subtract<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#减</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#乘</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>divide<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#除</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>power<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#指数</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>mod<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#取余</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">[1 3 5 7 9][1. 3. 5. 7. 9.][ 2.  6. 10. 14. 18.][0. 0. 0. 0. 0.][ 1.  9. 25. 49. 81.][1. 1. 1. 1. 1.][1.00000000e+00 2.70000000e+01 3.12500000e+03 8.23543000e+05 3.87420489e+08][0. 0. 0. 0. 0.]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2、最大值、最小值"><a href="#2、最大值、最小值" class="headerlink" title="2、最大值、最小值"></a>2、最大值、最小值</h4><p>amin() 用于计算数组中的元素沿指定轴的最小值, amax()同理。</p><p>amin(a,0) 是延着 axis&#x3D;0 轴的最小值，axis&#x3D;0 轴是把元素看成了 [1,4,7], [2,5,8], [3,6,9] 三个元素。</p><p>amin(a,1) 是延着 axis&#x3D;1 轴的最小值，axis&#x3D;1 轴是把元素看成了 [1,2,3], [4,5,6], [7,8,9] 三个元素。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>amin<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>amin<span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>amin<span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">1[1 2 3][1 4 7]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3、最大值与最小值之差"><a href="#3、最大值与最小值之差" class="headerlink" title="3、最大值与最小值之差"></a>3、最大值与最小值之差</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>ptp<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>ptp<span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>ptp<span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">a &#x3D; np.array([[1,2,3], [4,5,6], [7,8,9]])print(np.ptp(a))print(np.ptp(a,0))print(np.ptp(a,1))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="4、统计数组的百分位数-amp-中位数"><a href="#4、统计数组的百分位数-amp-中位数" class="headerlink" title="4、统计数组的百分位数&amp;中位数"></a>4、统计数组的百分位数&amp;中位数</h4><p>percentile() 代表着第 p 个百分位数，这里 p 的取值范围是 0-100，如果 p&#x3D;0， 那么就是求最小值，如果 p&#x3D;50 就是求平均值，如果 p&#x3D;100 就是求最大值。同样你也可 以求得在 axis&#x3D;0 和 axis&#x3D;1 两个轴上的 p% 的百分位数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>percentile<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>percentile<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>percentile<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 求中位数</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>median<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>median<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>median<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">5.0[4. 5. 6.][2. 5. 8.]# 求中位数5.0[4. 5. 6.][2. 5. 8.]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="5、统计数组中的加权平均值"><a href="#5、统计数组中的加权平均值" class="headerlink" title="5、统计数组中的加权平均值"></a>5、统计数组中的加权平均值</h4><p>average() 函数可以求加权平均，加权平均的意思就是每个元素可以设置个权重，默认情况下每个元素的权重是相同的，所以 np.average(a)&#x3D;(1+2+3+4)&#x2F;4&#x3D;2.5，你也可以指定 权重数组 wts&#x3D;[1,2,3,4]，这样加权平均 np.average(a,weights&#x3D;wts)&#x3D; (1<em>1+2</em>2+3<em>3+4</em>4)&#x2F;(1+2+3+4)&#x3D;3.0。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>wts <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>average<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>average<span class="token punctuation">(</span>a<span class="token punctuation">,</span>weights<span class="token operator">=</span>wts<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">2.53.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="6、统计数组中的标准差、方差"><a href="#6、统计数组中的标准差、方差" class="headerlink" title="6、统计数组中的标准差、方差"></a>6、统计数组中的标准差、方差</h4><p>方差的计算是指每个数值与平均值之差的平方求和的平均值，即 mean((x - x.mean())** 2)。标准差是方差的算术平方根。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#标准差</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>var<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#方差</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">1.1180339887498951.25<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="7、排序"><a href="#7、排序" class="headerlink" title="7、排序"></a>7、排序</h4><p>sort(a, axis&#x3D;-1, kind&#x3D;‘quicksort’, order&#x3D;None)；</p><ul><li><p>kind 字段：默认情况下使 用的是快速排序，可以指定 quicksort、mergesort、heapsort 分别表示快速排序、合并排序、堆排序。</p></li><li><p>axis 字段：默认是 -1，即沿着数组的最后一个轴进行排序， 也可以取不同的 axis 轴，或者 axis&#x3D;None 代表采用扁平化的方式作为一个向量进行排序。</p></li><li><p>order 字段：对于结构化的数组可以指定按照某个字段进行排序。</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">[[2 3 4][1 2 4]][1 2 2 3 4 4][[2 3 1][4 4 2]][[2 3 4][1 2 4]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h2><p>在数据分析工作中，Pandas 的使用频率是很高的，一方面是因为 Pandas 提供的基础数据结构DataFrame 与 json 的契合度很高，转换起来就很方便。另一方面，如果我们数据清理工作不是很复杂的话，通常用几句 Pandas 代码就可以对数据进行规整。</p><p>Series 和 DataFrame 这两个核心数据结构，他们分别代表着一维的序列和二维的表结构。基于这两种数据结构，Pandas 可以对数据进行导入、清洗、处理、 统计和输出。</p><h3 id="一、Series"><a href="#一、Series" class="headerlink" title="一、Series"></a>一、Series</h3><p>Series 是个定长的字典序列。说是定长是因为在存储的时候，相当于两个 ndarray，这也是和字典结构最大的不同。因为在字典的结构里，元素的个数是不固定的。 </p><p>Series有两个基本属性：index 和 values。在 Series 结构中，index 默认是 0,1,2,……递增的整数序列，当然我们也可以自己来指定索引，比如 index&#x3D;[‘a’, ‘b’, ‘c’, ‘d’]。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> pandas <span class="token keyword">import</span> Series<span class="token punctuation">,</span> DataFramex1 <span class="token operator">=</span> Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x2 <span class="token operator">=</span> Series<span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">0    11    22    33    4dtype: int64a    1b    2c    3d    4dtype: int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们也可以采用字典的方式来创建 Series</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">&#125;</span>x3 <span class="token operator">=</span> Series<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">a    1b    2c    3d    4dtype: int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="二、DataFrame"><a href="#二、DataFrame" class="headerlink" title="二、DataFrame"></a>二、DataFrame</h3><p><strong>DataFrame 类型数据结构类似数据库表。</strong> </p><p>它包括了行索引和列索引，我们可以将 DataFrame 看成是由相同索引的 Series 组成的字 典类型。</p><p>一般会用 df, df1, df2 这些作为 DataFrame 数据类型的变量名，以例子中的 df2 为例，列索引是 [‘English’, ‘Math’, ‘Chinese’]，行索引是 [‘ZhangFei’, ‘GuanYu’, ‘ZhaoYun’, ‘HuangZhong’, ‘DianWei’]。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Chinese'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'English'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'Math'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>df1<span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>df2 <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'ZhangFei'</span><span class="token punctuation">,</span> <span class="token string">'GuanYu'</span><span class="token punctuation">,</span> <span class="token string">'ZhaoYun'</span><span class="token punctuation">,</span> <span class="token string">'HuangZhong'</span><span class="token punctuation">,</span> <span class="token string">'DianWei'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'English'</span><span class="token punctuation">,</span> <span class="token string">'Math'</span><span class="token punctuation">,</span> <span class="token string">'Chinese'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none"> Chinese  English  Math0       66       65    301       95       85    982       93       92    963       90       88    774       80       90    90            English  Math  ChineseZhangFei         65    30       66GuanYu           85    98       95ZhaoYun          92    96       93HuangZhong       88    77       90DianWei          90    90       80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="三、用DataFranme进行数据处理"><a href="#三、用DataFranme进行数据处理" class="headerlink" title="三、用DataFranme进行数据处理"></a>三、用DataFranme进行数据处理</h3><h4 id="1、数据导入和输出"><a href="#1、数据导入和输出" class="headerlink" title="1、数据导入和输出"></a>1、数据导入和输出</h4><p>需要先下载依赖</p><pre class="line-numbers language-none"><code class="language-none">pip installxlrdpip installopenpyxl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将data.xlsx放在Jupyter目录下,默认为 C:\Users\${用户名}</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">score <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'data.xlsx'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>score<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'data1.xlsx'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2、数据清洗"><a href="#2、数据清洗" class="headerlink" title="2、数据清洗"></a>2、数据清洗</h4><p>以上文df2为例</p><p><strong>删除 DataFrame 中的不必要的列或行</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df2 <span class="token operator">=</span> df2<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Chinese'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df2 <span class="token operator">=</span> df2<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'ZhangFei'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>重命名列名 columns，让列表名更容易识别</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df2<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'Chinese'</span><span class="token punctuation">:</span> <span class="token string">'YuWen'</span><span class="token punctuation">,</span> <span class="token string">'English'</span><span class="token punctuation">:</span> <span class="token string">'Yingyu'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> inplace <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>去除重复的值</strong></p><p>不是字段名相同就去除，而是这个字段里面的数组一样才去除</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> df2<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#去除重复行</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>更改数据格式</strong></p><p>把 Chinese 字段的值改成 str 类型，或者 int64 可以这么写</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df2<span class="token punctuation">[</span><span class="token string">'Chinese'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span>df2<span class="token punctuation">[</span><span class="token string">'Chinese'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int64<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>数据间的空格</strong></p><p>有时候我们先把格式转成了 str 类型，是为了方便对数据进行操作，这时想要删除数据间的空格或字符，我们就可以使用 strip 函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 删除左右两边空格</span>df2<span class="token punctuation">[</span><span class="token string">'Chinese'</span><span class="token punctuation">]</span><span class="token operator">=</span>df2<span class="token punctuation">[</span><span class="token string">'Chinese'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>strip<span class="token punctuation">)</span><span class="token comment"># 删除左边空格</span>df2<span class="token punctuation">[</span><span class="token string">'Chinese'</span><span class="token punctuation">]</span><span class="token operator">=</span>df2<span class="token punctuation">[</span><span class="token string">'Chinese'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>lstrip<span class="token punctuation">)</span><span class="token comment"># 删除右边空格</span>df2<span class="token punctuation">[</span><span class="token string">'Chinese'</span><span class="token punctuation">]</span><span class="token operator">=</span>df2<span class="token punctuation">[</span><span class="token string">'Chinese'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">)</span><span class="token comment"># 删除其中的$符号</span>df2<span class="token punctuation">[</span><span class="token string">'Chinese'</span><span class="token punctuation">]</span><span class="token operator">=</span>df2<span class="token punctuation">[</span><span class="token string">'Chinese'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'$'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>大小写转换</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#全部大写</span>df2<span class="token punctuation">.</span>columns <span class="token operator">=</span> df2<span class="token punctuation">.</span>columns<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#全部小写</span>df2<span class="token punctuation">.</span>columns <span class="token operator">=</span> df2<span class="token punctuation">.</span>columns<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#首字母大写</span>df2<span class="token punctuation">.</span>columns <span class="token operator">=</span> df2<span class="token punctuation">.</span>columns<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>查找空值</strong></p><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221025092409470.png" alt="表结构" style="zoom:50%;" /><p>针对数据表df使用df.isnull()</p><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221025092428614.png"  style="zoom:50%;" /><p>针对某列使用df.isnull().any()</p><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221025092518068.png"  style="zoom:67%;" /><p><strong>使用 apply 函数对数据进行清洗</strong></p><p>​apply 函数是 Pandas 中自由度非常高的函数，使用频率也非常高。</p><p>​我们也可以定义个函数，在 apply中进行使用。比如定义 double_df 函数是将原来的数值 *2 进行返回。然后对 df1 中的“语文”列的数值进行 *2 处理，可以写成：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">double_df</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span>xdf1<span class="token punctuation">[</span><span class="token string">u'语文'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df1<span class="token punctuation">[</span><span class="token string">u'语文'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>double_df<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3、数据统计"><a href="#3、数据统计" class="headerlink" title="3、数据统计"></a>3、数据统计</h4><p><strong>统计函数</strong></p><p>​describe() 函数最简便。它是个统计大礼包，可以快速让我们对数据有个全面的了解。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df1 <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'ZhangFei'</span><span class="token punctuation">,</span> <span class="token string">'GuanYu'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'data1'</span><span class="token punctuation">:</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df1<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">          data1count  5.000000mean   2.000000std    1.581139min    0.00000025%    1.00000050%    2.00000075%    3.000000max    4.000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>数据表合并</strong></p><p>​基于指定列进行连接</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'name'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221025093942797.png" alt="指定字段连接"  style="zoom: 50%;" /><p>​inner 内连接</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'inner'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​<img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221025094218284.png" alt="两表的交集" style="zoom:50%;" /></p><p>left 左连接</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221025094330227.png" alt="左表为主,右表补充" style="zoom:50%;" /><p>right 右连接</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'right'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221025094517630.png" alt="右表为主,左表补充" style="zoom:50%;" /><p>outer 外连接</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'outer'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221025094558773.png" alt="两表的并集" style="zoom:50%;" /><p><strong>用 SQL 方式打开 Pandas</strong></p><p>pandasql 中的主要函数是 sqldf，它接收两个参数：一个 SQL 查询语句，还有一组环境 变量 globals() 或 locals()。这样我们就可以在 Python 里，直接用 SQL 语句中对 DataFrame 进行操作</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> pandas <span class="token keyword">import</span> DataFrame<span class="token keyword">from</span> pandasql <span class="token keyword">import</span> sqldf<span class="token punctuation">,</span> load_meat<span class="token punctuation">,</span> load_birthsdf1 <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'ZhangFei'</span><span class="token punctuation">,</span> <span class="token string">'GuanYu'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'data1'</span><span class="token punctuation">:</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>pysqldf <span class="token operator">=</span> <span class="token keyword">lambda</span> sql<span class="token punctuation">:</span> sqldf<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sql <span class="token operator">=</span> <span class="token string">"select * from df1 where name ='ZhangFei'"</span><span class="token keyword">print</span> pysqldf<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> lambda函数是用来定义一个匿名函数的，具体的使用形式为：</p><pre class="line-numbers language-none"><code class="language-none">lambda argument_list: expression<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里 argument_list 是参数列表，expression 是关于参数的表达式，会根据 expression 表达式计算结果进行输出返回。 在上面的代码中，我们定义了：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pysqldf <span class="token operator">=</span> <span class="token keyword">lambda</span> sql<span class="token punctuation">:</span> sqldf<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这个例子里，输入的参数是 sql，返回的结果是 sqldf 对 sql 的运行结果，当然 sqldf 中也输入了 globals 全局参数，因为在 sql 中有对全局参数 df1 的使用。</p><h1 id="数据预处理与算法"><a href="#数据预处理与算法" class="headerlink" title="数据预处理与算法"></a>数据预处理与算法</h1><h2 id="用户画像建模"><a href="#用户画像建模" class="headerlink" title="用户画像建模"></a>用户画像建模</h2><h3 id="一、设计唯一标识"><a href="#一、设计唯一标识" class="headerlink" title="一、设计唯一标识"></a>一、设计唯一标识</h3><p>​<strong>用户唯一标识是整个用户画像的核心</strong>。我们以一个App为例，它把“从用户开始使用APP到下单到售后整个所有的用户行为”进行串联，这样就可以更好地去跟踪和分析一个用户的特征。设计唯一标识可以从这些项中选择：用户名、注册手机号、联系人手机号、邮箱、设备号、CookieID等。</p><h3 id="二、用户标签化"><a href="#二、用户标签化" class="headerlink" title="二、用户标签化"></a>二、用户标签化</h3><ul><li>用户标签：它包括了性别、年龄、地域、收入、学历、职业等。这些包括了用户的基础属性。</li><li>消费标签：消费习惯、购买意向、是否对促销敏感。这些统计分析用户的消费习惯。</li><li>行为标签：时间段、频次、时长、访问路径。这些是通过分析用户行为，来得到他们使用App的习惯。</li><li>内容分析：对用户平时浏览的内容，尤其是停留时间长、浏览次数多的内容进行分析，分析出用户对哪些内容感兴趣，比如，金融、娱乐、教育、体育、时尚、科技等。</li></ul><h3 id="三、赋能业务价值"><a href="#三、赋能业务价值" class="headerlink" title="三、赋能业务价值"></a>三、赋能业务价值</h3><ul><li>获客：如何进行拉新，通过更精准的营销获取客户。</li><li>粘客：个性化推荐，搜索排序，场景运营等。</li><li>留客：流失率预测，分析关键节点降低流失率。</li></ul><h3 id="四、以美团为例"><a href="#四、以美团为例" class="headerlink" title="四、以美团为例"></a>四、以美团为例</h3><h4 id="1、以美团为例设计唯一标识"><a href="#1、以美团为例设计唯一标识" class="headerlink" title="1、以美团为例设计唯一标识"></a>1、以美团为例设计唯一标识</h4><ul><li>手机号是唯一标识</li></ul><h4 id="2、以美团为例用户标签化"><a href="#2、以美团为例用户标签化" class="headerlink" title="2、以美团为例用户标签化"></a>2、以美团为例用户标签化</h4><ul><li>用户标签：性别、年龄、家乡、居住地、收货地址、婚姻、宝宝信息、通过何种渠道进行的注册。</li><li>消费标签：餐饮口味、消费均价、团购等级、预定使用等级、排队使用等级、外卖等级。</li><li>行为标签：点外卖时间段、使用频次、平均点餐用时、访问路径。</li><li>内容分析：基于用户平时浏览的内容进行统计，包括餐饮口味、优惠敏感度等。</li></ul><h4 id="3、以美团为例赋能业务价值"><a href="#3、以美团为例赋能业务价值" class="headerlink" title="3、以美团为例赋能业务价值"></a>3、以美团为例赋能业务价值</h4><ul><li>在获客上，我们可以找到优势的宣传渠道，如何通过个性化的宣传手段，吸引有潜在需求的用户，并刺激其转化。</li><li>在粘客上，如何提升用户的单价和消费频次，方法可以包括购买后的个性化推荐、针对优质用户进行优质高价商品的推荐、以及重复购买，比如通过红包、优惠等方式激励对优惠敏感的人群，提升购买频次。</li><li>留客上，预测用户是否可能会从平台上流失。在营销领域，关于用户留存有一个观点——如果将顾客流失率降低5%，公司利润将提升25%~85%。可以看出留存率是多么的重要。用户流失可能会包括多种情况，比如用户体验、竞争对手、需求变化等，通过预测用户的流失率可以大幅降低用户留存的运营成本。</li></ul><h2 id="数据预处理"><a href="#数据预处理" class="headerlink" title="数据预处理"></a>数据预处理</h2><h3 id="一、数据清洗"><a href="#一、数据清洗" class="headerlink" title="一、数据清洗"></a>一、数据清洗</h3><p>我将数据清洗规则总结为以下4个关键点，统一起来叫“<strong>完全合一</strong>”。</p><ol><li><strong>完</strong>整性：单条数据是否存在空值，统计的字段是否完善。</li><li><strong>全</strong>面性：观察某一列的全部数值，比如在Excel表中，我们选中一列，可以看到该列的平均值、最大值、最小值。我们可以通过常识来判断该列是否有问题，比如：数据定义、单位标识、数值本身。</li><li><strong>合</strong>法性：数据的类型、内容、大小的合法性。比如数据中存在非ASCII字符，性别存在了未知，年龄超过了150岁等。</li><li>唯<strong>一</strong>性：数据是否存在重复记录，因为数据通常来自不同渠道的汇总，重复的情况是常见的。行数据、列数据都需要是唯一的，比如一个人不能重复记录多次，且一个人的体重也不能在列指标中重复记录多次。</li></ol><p>按照以上的原则，我们对以下图片进行数据清洗</p><p>​这是一家服装店统计的会员数据。最上面的一行是列坐标，最左侧一列是行坐标。</p><p>​列坐标中，第0列代表的是序号，第1列代表的会员的姓名，第2列代表年龄，第3列代表体重，第4-6列代表男性会员的三围尺寸，第7-9列代表女性会员的三围尺寸。</p><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221028195420586.png" alt="需要数据清洗" style="zoom:80%;" /><p>下面，我们就依照“完全合一”的准则，使用Pandas来进行清洗。</p><h4 id="1、完整性"><a href="#1、完整性" class="headerlink" title="1、完整性"></a>1、完整性</h4><p><strong>问题1：缺失值</strong></p><p>在数据中有些年龄、体重数值是缺失的，这往往是因为数据量较大，在过程中，有些数值没有采集到。通常我们可以采用以下三种方法：</p><ul><li>删除：删除数据缺失的记录；</li><li>均值：使用当前列的均值；</li><li>高频：使用当前列出现频率最高的数据。</li></ul><p>比如我们想对df[‘Age’]中缺失的数值用平均年龄进行填充，可以这样写：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>df<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果我们用最高频的数据进行填充，可以先通过value_counts获取Age字段最高频次age_maxf，然后再对Age字段中缺失的数据用age_maxf进行填充：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">age_maxf <span class="token operator">=</span> train_features<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>value_counts<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>index<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> train_features<span class="token punctuation">[</span><span class="token string">'Age'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span>age_maxf<span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>问题2：空行</strong></p><p>我们发现数据中有一个空行，除了 index 之外，全部的值都是 NaN。Pandas 的 read_csv() 并没有可选参数来忽略空行，这样，我们就需要在数据被读入之后再使用 dropna() 进行处理，删除空行。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>dropna<span class="token punctuation">(</span>how<span class="token operator">=</span><span class="token string">'all'</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 删除全空的行</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2、全面性"><a href="#2、全面性" class="headerlink" title="2、全面性"></a>2、全面性</h4><p><strong>问题：列数据的单位不统一</strong></p><p>观察weight列的数值，我们能发现weight 列的单位不统一。有的单位是千克（kgs），有的单位是磅（lbs）。</p><p>这里我使用千克作为统一的度量单位，将磅（lbs）转化为千克（kgs）：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 获取 weight 数据列中单位为 lbs 的数据</span>rows_with_lbs <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'weight'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>contains<span class="token punctuation">(</span><span class="token string">'lbs'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>fillna<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span> df<span class="token punctuation">[</span>rows_with_lbs<span class="token punctuation">]</span><span class="token comment"># 将 lbs转换为 kgs, 2.2lbs=1kgs</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>lbs_row <span class="token keyword">in</span> df<span class="token punctuation">[</span>rows_with_lbs<span class="token punctuation">]</span><span class="token punctuation">.</span>iterrows<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment"># 截取从头开始到倒数第三个字符之前，即去掉lbs。</span>weight <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">float</span><span class="token punctuation">(</span>lbs_row<span class="token punctuation">[</span><span class="token string">'weight'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">2.2</span><span class="token punctuation">)</span>df<span class="token punctuation">.</span>at<span class="token punctuation">[</span>i<span class="token punctuation">,</span><span class="token string">'weight'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'&#123;&#125;kgs'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>weight<span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、合理性"><a href="#3、合理性" class="headerlink" title="3、合理性"></a>3、合理性</h4><p><strong>问题：非ASCII字符</strong></p><p>我们可以看到在数据集中 Fristname 和 Lastname （在唯一性中将名字拆分为包含了两个字段Firtname 和 Lastname）有一些非 ASCII 的字符。我们可以采用删除或者替换的方式来解决非ASCII问题，这里我们使用删除方法：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">[</span><span class="token string">'first_name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">r'[^\x00-\x7F]+'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> regex<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 删除非 ASCII 字符</span>df<span class="token punctuation">[</span><span class="token string">'last_name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">r'[^\x00-\x7F]+'</span><span class="token punctuation">:</span><span class="token string">''</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> regex<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4、唯一性"><a href="#4、唯一性" class="headerlink" title="4、唯一性"></a>4、唯一性</h4><p><strong>问题1：一列有多个参数</strong></p><p>在数据中不难发现，姓名列（Name）包含了两个参数 Firtname 和 Lastname。为了达到数据整洁目的，我们将 Name 列拆分成 Firstname 和 Lastname两个字段。我们使用Python的split方法，str.split(expand&#x3D;True)，将列表拆成新的列，再将原来的 Name 列删除。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'first_name'</span><span class="token punctuation">,</span><span class="token string">'last_name'</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span>expand<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 切分名字，删除源数据列</span>df<span class="token punctuation">.</span>drop<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>问题2：重复数据</strong></p><p>我们校验一下数据中是否存在重复记录。如果存在重复记录，就使用 Pandas 提供的 drop_duplicates() 来删除重复数据。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'first_name'</span><span class="token punctuation">,</span><span class="token string">'last_name'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token comment"># 删除重复数据行</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>最终效果图：</p><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221028200303888.png" alt="数据清洗效果图" style="zoom: 50%;" /><h3 id="二、数据集成"><a href="#二、数据集成" class="headerlink" title="二、数据集成"></a>二、数据集成</h3><h4 id="1、数据集成的两种架构：ELT和ETL"><a href="#1、数据集成的两种架构：ELT和ETL" class="headerlink" title="1、数据集成的两种架构：ELT和ETL"></a>1、数据集成的两种架构：ELT和ETL</h4><p>ETL 的过程为提取(Extract)——转换(Transform)——加载(Load)，在数据源抽取后首先进行转换，然后将转换的结果写入目的地。</p><p>ELT 的过程则是提取(Extract)——加载(Load)——变换(Transform)，在抽取后将结果先写入目的地，然后利用数据库的聚合分析能力或者外部计算框架，如Spark来完成转换的步骤。</p><p>目前数据集成的主流架构是ETL，但未来使用ELT作为数据集成架构的将越来越多。这样做会带来多种好处：</p><ul><li>ELT 和 ETL 相比，最大的区别是“重抽取和加载，轻转换”，从而可以用更轻量的方案搭建起一个数据集成平台。使用 ELT 方法，在提取完成之后，数据加载会立即开始。一方面更省时，另一方面ELT允许 BI 分析人员无限制地访问整个原始数据，为分析师提供了更大的灵活性，使之能更好地支持业务。</li><li>在ELT架构中，数据变换这个过程根据后续使用的情况，需要在 SQL 中进行，而不是在加载阶段进行。这样做的好处是你可以从数据源中提取数据，经过少量预处理后进行加载。这样的架构更简单，使分析人员更好地了解原始数据的变换过程。</li></ul><h3 id="三、数据变换"><a href="#三、数据变换" class="headerlink" title="三、数据变换"></a>三、数据变换</h3><p>举个例子，假设A考了80分，B也考了80分，但前者是百分制，后者500分是满分，如果我们把从这两个渠道收集上来的数据进行集成、挖掘，就算使用效率再高的算法，结果也不是正确的。因为这两个渠道的分数代表的含义完全不同。</p><p>所以说，有时候数据变换比算法选择更重要，数据错了，算法再正确也是错的。那么如何让不同渠道的数据统一到一个目标数据库里呢？这样就用到了数据变换。</p><p>数据变换是数据准备的重要环节，它<strong>通过数据平滑、数据聚集、数据概化和规范化等方式</strong>将数据转换成适用于数据挖掘的形式。</p><h4 id="1、常见的数据变换方法"><a href="#1、常见的数据变换方法" class="headerlink" title="1、常见的数据变换方法"></a>1、常见的数据变换方法</h4><ul><li><strong>数据平滑</strong>：去除数据中的噪声，将连续数据离散化。这里可以采用分箱、聚类和回归的方式进行数据平滑；</li><li><strong>数据聚集</strong>：对数据进行汇总，在SQL中有一些聚集函数可以供我们操作，比如Max()反馈某个字段的数值最大值，Sum()返回某个字段的数值总和；</li><li><strong>数据概化</strong>：将数据由较低的概念抽象成为较高的概念，减少数据复杂度，即用更高的概念替代更低的概念。比如说上海、杭州、深圳、北京可以概化为中国。</li><li><strong>数据规范化</strong>：使属性数据按比例缩放，这样就将原来的数值映射到一个新的特定区域中。常用的方法有最小—最大规范化、Z—score 规范化、按小数定标规范化等；</li><li><strong>属性构造</strong>：构造出新的属性并添加到属性集中。这里会用到特征工程的知识，因为通过属性与属性的连接构造新的属性，其实就是特征工程。比如说，数据表中统计每个人的英语、语文和数学成绩，可以构造一个“总和”这个属性，来作为新属性。这样“总和”这个属性就可以用到后续的数据挖掘计算中。</li></ul><p>在这些变换方法中，最简单易用的就是对数据进行规范化处理，下面介绍数据进行规范化处理的几种方法，并使用Python中的SciKit-Learn进行数据规范化。</p><h4 id="2、Min-max-规范化"><a href="#2、Min-max-规范化" class="headerlink" title="2、Min-max 规范化"></a>2、Min-max 规范化</h4><p>Min-max标准化方法是将原始数据变换到[0,1]的空间中。用公式表示就是：新数值&#x3D;（原数值-极小值）&#x2F;（极大值-极小值）。</p><p>我们可以让原始数据投射到指定的空间[min, max]，在SciKit-Learn里有个函数MinMaxScaler是专门做这个的，它允许我们给定一个最大值与最小值，然后将原数据投射到[min, max]中。默认情况下[min,max]是[0,1]，也就是把原始数据投放到[0,1]范围内。</p><p>我们来看下下面这个例子：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding:utf-8</span><span class="token keyword">from</span> sklearn <span class="token keyword">import</span> preprocessing<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment"># 初始化数据，每一行表示一个样本，每一列表示一个特征</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span> <span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">2.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 将数据进行[0,1]规范化</span>min_max_scaler <span class="token operator">=</span> preprocessing<span class="token punctuation">.</span>MinMaxScaler<span class="token punctuation">(</span><span class="token punctuation">)</span>minmax_x <span class="token operator">=</span> min_max_scaler<span class="token punctuation">.</span>fit_transform<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span> minmax_x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">[[0.         0.         0.66666667] [1.         1.         1.        ] [0.         1.         0.        ]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3、Z-Score-规范化"><a href="#3、Z-Score-规范化" class="headerlink" title="3、Z-Score 规范化"></a>3、Z-Score 规范化</h4><p>我们定义：新数值&#x3D;（原数值-均值）&#x2F; 标准差。</p><p>Z-Score的优点是算法简单，不受数据量级影响，结果易于比较。不足在于，它需要数据整体的平均值和方差，而且结果没有实际意义，只是用于比较。在SciKit-Learn库中使用preprocessing.scale()函数，可以直接将给定数据进行Z-Score规范化。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> sklearn <span class="token keyword">import</span> preprocessing<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment"># 初始化数据</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span> <span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">2.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 将数据进行Z-Score规范化</span>scaled_x <span class="token operator">=</span> preprocessing<span class="token punctuation">.</span>scale<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token keyword">print</span> scaled_x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">[[-0.70710678 -1.41421356  0.26726124] [ 1.41421356  0.70710678  1.06904497] [-0.70710678  0.70710678 -1.33630621]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>这个结果实际上就是将每行每列的值减去了平均值，再除以方差的结果。</p><p>我们看到Z-Score规范化将数据集进行了规范化，数值都符合均值为0，方差为1的正态分布。</p><h4 id="4、小数定标规范化"><a href="#4、小数定标规范化" class="headerlink" title="4、小数定标规范化"></a>4、小数定标规范化</h4><p>小数定标规范化就是通过移动小数点的位置来进行规范化。小数点移动多少位取决于属性A的取值中的最大绝对值。</p><p>举个例子，比如属性A的取值范围是-999到88，那么最大绝对值为999，小数点就会移动3位，即新数值&#x3D;原数值&#x2F;1000。那么A的取值范围就被规范化为-0.999到0.088。我们需要用NumPy库来计算小数点的位数。</p><p>这里我们看下运行代码：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># coding:utf-8</span><span class="token keyword">from</span> sklearn <span class="token keyword">import</span> preprocessing<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token comment"># 初始化数据</span>x <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span> <span class="token number">3.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">,</span>  <span class="token number">2.</span><span class="token punctuation">]</span><span class="token punctuation">,</span>              <span class="token punctuation">[</span> <span class="token number">0.</span><span class="token punctuation">,</span>  <span class="token number">1.</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment"># 标准差标准化</span>j <span class="token operator">=</span> np<span class="token punctuation">.</span>ceil<span class="token punctuation">(</span>np<span class="token punctuation">.</span>log10<span class="token punctuation">(</span>np<span class="token punctuation">.</span><span class="token builtin">max</span><span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>scaled_x <span class="token operator">=</span> x<span class="token operator">/</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token operator">**</span>j<span class="token punctuation">)</span><span class="token keyword">print</span> scaled_x<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">[[ 0.  -0.3  0.1] [ 0.3  0.1  0.2] [ 0.   0.1 -0.1]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>另外的专题</p><p>python爬虫</p><p>python可视化</p><p>通过决策树来进行泰坦尼克乘客生存预测</p><h2 id="算法四大分类"><a href="#算法四大分类" class="headerlink" title="算法四大分类"></a>算法四大分类</h2><h3 id="一、分类算法"><a href="#一、分类算法" class="headerlink" title="一、分类算法"></a>一、分类算法</h3><p>就是通过训练集得到一个分类模型，然后用这个模型可以对其他数据进行分类，分类需要知道事先的定义，常见分类算法：C4.5、CART、朴素贝叶斯、SVM、KNN、AdaBoost</p><h3 id="二、聚类算法"><a href="#二、聚类算法" class="headerlink" title="二、聚类算法"></a>二、聚类算法</h3><p>聚类就是将数据自动聚类成几个类别，聚到一起的相似度大，不在一起的差异性大。我们往往利用聚类来做数据划分，往往聚类不知道事先的定义，常见聚类算法：K-Means、EM</p><h3 id="三、关联分析"><a href="#三、关联分析" class="headerlink" title="三、关联分析"></a>三、关联分析</h3><p>通过当前和历史数据来预测未来趋势，它可以更好地帮助我们识别机遇和风险，比如在A出现10次同时， B出现8次，常见关联分析算法：Apriori</p><h3 id="四、连接分析"><a href="#四、连接分析" class="headerlink" title="四、连接分析"></a>四、连接分析</h3><p>就是发现数据中的关联规则，它被广泛应用在购物篮分析，或事务数据分析中，比如通过邮件来连接，常见连接分析算法：PageRank</p><h2 id="算法十大模型"><a href="#算法十大模型" class="headerlink" title="算法十大模型"></a>算法十大模型</h2><h3 id="一、决策树"><a href="#一、决策树" class="headerlink" title="一、决策树"></a>一、决策树</h3><p>总结：决策树的原理就是找到<strong>纯度最高的点作为根结点</strong>，并继续通过<strong>信息增益</strong>或<strong>基尼系数</strong>判断剩下结点那个纯度最高，继续选择根节点。直到递归终止到分到某个类时，目标属性全是一个值或者某个值的比例达到给定的阈值</p><p>讲的很好的相关视频：<a href="https://www.bilibili.com/video/BV1T7411b7DG/?spm_id_from=333.337.search-card.all.click&vd_source=178669e0797f36fb015c5fc3cb9c7a4f">【数据挖掘】决策树零基础入门教程，手把手教你学决策树！_哔哩哔哩_bilibili</a></p><h4 id="1、纯度、信息熵"><a href="#1、纯度、信息熵" class="headerlink" title="1、纯度、信息熵"></a>1、纯度、信息熵</h4><p>​决策树的在决策过程中有三个重要的问题：</p><ul><li>将哪个属性作为根节点？</li><li>选择哪些属性作为后继节点？</li><li>什么时候停止并得到目标值？</li></ul><p>在这里我们先介绍两个指标：<strong>纯度</strong>和<strong>信息熵</strong>。</p><p>先来说一下纯度，你可以把决策树的构造过程理解成为寻找纯净划分的过程。</p><p>数学上，我们可以用纯度来表示，纯度换一种方式来解释就是让目标变量的分歧最小。我在这里举个例子，假设有3个集合：</p><ul><li>集合1：6次都去打篮球；</li><li>集合2：4次去打篮球，2次不去打篮球；</li><li>集合3：3次去打篮球，3次不去打篮球。</li></ul><p>按照纯度指标来说，集合1&gt;集合2&gt;集合3。因为集合1的分歧最小，集合3的分歧最大。</p><p>然后我们再来介绍信息熵（entropy）的概念，它表示了信息的不确定度。</p><p>在信息论中，随机离散事件出现的概率存在着不确定性。为了衡量这种信息的不确定性，信息学之父香农引入了信息熵的概念，并给出了计算信息熵的数学公式：</p><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221029102814947.png" alt="信息熵的计算" style="zoom:50%;box-shadow:rgba(0,0,0,0) 0 1px 5px 0px;"/><p>p(i|t)代表了节点t为分类i的概率，其中log2为取以2为底的对数。它能帮我们反映出来这个信息的不确定度。当不确定性越大时，它所包含的信息量也就越大，信息熵也就越高。<strong>信息熵越大，纯度越低。当集合中的所有样本均匀混合时，信息熵最大，纯度最低。</strong></p><p>在构造决策树的时候，会基于纯度来构建。而经典的 “不纯度”的指标有三种，分别是信息增益（ID3算法）、信息增益率（C4.5算法）以及基尼指数（Cart算法）。</p><ul><li>首先ID3算法的优点是方法简单，缺点是对噪声敏感。训练数据如果有少量错误，可能会产生决策树分类错误。</li><li>C4.5在ID3的基础上，用信息增益率代替了信息增益，解决了噪声敏感的问题，并且可以对构造树进行剪枝、处理连续数值以及数值缺失等情况，但是由于C4.5需要对数据集进行多次扫描，算法效率相对较低。</li><li>CART只支持二叉树，CART分类树是基于基尼系数做判断，CART回归树是基于偏差做判断。</li></ul><p>决策有关的计算视频：<a href="https://www.bilibili.com/video/BV1Cq4y1S7k1/?spm_id_from=333.788.recommend_more_video.-1&vd_source=178669e0797f36fb015c5fc3cb9c7a4f">【决策树算法计算】ID3算法 C4.5算法 Cart算法 相关计算 _哔哩哔哩_bilibili</a></p><h4 id="2、ID3算法"><a href="#2、ID3算法" class="headerlink" title="2、ID3算法"></a>2、ID3算法</h4><p><strong>总结：使用信息增益最大的作为根节点</strong></p><p>ID3算法计算的是<strong>信息增益</strong>，信息增益指的就是划分可以带来纯度的提高，信息熵的下降。它的计算公式，是父亲节点的信息熵减去所有子节点的信息熵。在计算的过程中，我们会计算每个子节点的归一化信息熵，即按照每个子节点在父节点中出现的概率，来计算这些子节点的信息熵。所以信息增益的公式可以表示为：</p><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221029102517289.png" alt="信息增益的计算" style="zoom: 50%;box-shadow:rgba(0,0,0,0) 0 1px 5px 0px;" /><h4 id="3、C4-5算法"><a href="#3、C4-5算法" class="headerlink" title="3、C4.5算法"></a>3、C4.5算法</h4><p><strong>总结：使用信息增益率最大的作为根节点</strong> </p><p>在ID3算法上进行改进的C4.5算法，那么C4.5都在哪些方面改进了ID3呢？</p><ul><li><strong>采用信息增益率</strong></li></ul><p>因为ID3在计算的时候，倾向于选择取值多的属性。为了避免这个问题，C4.5采用信息增益率的方式来选择属性。信息增益率&#x3D;信息增益&#x2F;属性熵，具体的计算公式这里省略。当属性有很多值的时候，相当于被划分成了许多份，虽然信息增益变大了，但是对于C4.5来说，属性熵也会变大，所以整体的信息增益率并不大。</p><ul><li><strong>采用悲观剪枝</strong></li></ul><p>ID3构造决策树的时候，容易产生过拟合的情况。在C4.5中，会在决策树构造之后采用悲观剪枝（PEP），这样可以提升决策树的泛化能力。悲观剪枝是后剪枝技术中的一种，通过递归估算每个内部节点的分类错误率，比较剪枝前后这个节点的分类错误率来决定是否对其进行剪枝。这种剪枝方法不再需要一个单独的测试数据集。</p><ul><li><strong>离散化处理连续属性</strong></li></ul><p>C4.5可以处理连续属性的情况，对连续的属性进行离散化的处理。比如打篮球存在的“湿度”属性，不按照“高、中”划分，而是按照湿度值进行计算，那么湿度取什么值都有可能。该怎么选择这个阈值呢，<strong>C4.5选择具有最高信息增益的划分所对应的阈值</strong>。</p><ul><li><strong>处理缺失值</strong></li></ul><p>针对数据集不完整的情况，C4.5也可以进行处理。</p><h4 id="4、Cart算法"><a href="#4、Cart算法" class="headerlink" title="4、Cart算法"></a>4、Cart算法</h4><p><strong>总结：CART分类树是基尼系数最小的作为根节点，CART回归树是基于偏差做判断。</strong></p><p>CART算法，英文全称叫做Classification And Regression Tree，中文叫做分类回归树。ID3和C4.5算法可以生成二叉树或多叉树，而CART只支持二叉树。同时CART决策树比较特殊，既可以作分类树，又可以作回归树。<strong>在工具使用上，我们可以使用sklearn中的DecisionTreeClassifier创建CART分类树，通过DecisionTreeRegressor创建CART回归树。</strong></p><ul><li>CART分类二叉树</li></ul><p>分类树可以处理离散数据，也就是数据种类有限的数据，它输出的是样本的类别。作为分类树，CART采用基尼系数作为节点划分的依据，得到的是离散的结果，也就是分类结果；假设t为节点，那么该节点的GINI系数的计算公式为：</p><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221029130731142.png" alt="基尼系数的计算" style="zoom: 33%;box-shadow:rgba(0,0,0,0) 0 1px 5px 0px;" /><p>这里p(C<SUB>k</SUB>|t)表示节点t属于类别C<SUB>k</SUB>的概率，节点t的基尼系数为1减去各类别C<SUB>k</SUB>概率平方和。</p><p>下面，我们来用CART分类树，给sklearn中自带的iris数据集构造一棵分类决策树。</p><ul><li>首先train_test_split可以帮助我们把数据集抽取一部分作为测试集，这样我们就可以得到训练集和测试集。</li><li>使用clf &#x3D; DecisionTreeClassifier(criterion&#x3D;‘gini’)初始化一棵CART分类树。这样你就可以对CART分类树进行训练。</li><li>使用clf.fit(train_features, train_labels)函数，将训练集的特征值和分类标识作为参数进行拟合，得到CART分类树。</li><li>使用clf.predict(test_features)函数进行预测，传入测试集的特征值，可以得到测试结果test_predict。</li><li>最后使用accuracy_score(test_labels, test_predict)函数，传入测试集的预测结果与实际的结果作为参数，得到准确率score。</li><li>我们能看到sklearn帮我们做了CART分类树的使用封装，使用起来还是很方便的。</li></ul><p>基于iris数据集，构造CART分类树的代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># encoding=utf-8</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> accuracy_score<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeClassifier<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_iris<span class="token comment"># 准备数据集</span>iris<span class="token operator">=</span>load_iris<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 获取特征集和分类标识</span>features <span class="token operator">=</span> iris<span class="token punctuation">.</span>datalabels <span class="token operator">=</span> iris<span class="token punctuation">.</span>target<span class="token comment"># 随机抽取33%的数据作为测试集，其余为训练集</span>train_features<span class="token punctuation">,</span> test_features<span class="token punctuation">,</span> train_labels<span class="token punctuation">,</span> test_labels <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>features<span class="token punctuation">,</span> labels<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.33</span><span class="token punctuation">,</span> random_state<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token comment"># 创建CART分类树</span>clf <span class="token operator">=</span> DecisionTreeClassifier<span class="token punctuation">(</span>criterion<span class="token operator">=</span><span class="token string">'gini'</span><span class="token punctuation">)</span><span class="token comment"># 拟合构造CART分类树</span>clf <span class="token operator">=</span> clf<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_features<span class="token punctuation">,</span> train_labels<span class="token punctuation">)</span><span class="token comment"># 用CART分类树做预测</span>test_predict <span class="token operator">=</span> clf<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_features<span class="token punctuation">)</span><span class="token comment"># 预测结果与测试集结果作比对</span>score <span class="token operator">=</span> accuracy_score<span class="token punctuation">(</span>test_labels<span class="token punctuation">,</span> test_predict<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"CART分类树准确率 %.4lf"</span> <span class="token operator">%</span> score<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">CART分类树准确率 0.9600<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>CART回归树二叉树</li></ul><p>​     回归树可以对连续型的数值进行预测，也就是数据在某个区间内都有取值的可能，它输出的是一个数值。CART可以采用最小绝对偏差（LAD），或者最小二乘偏差（LSD）作为节点划分的依据，得到的是连续值，即回归预测结果。样本的离散程度具体的计算方式是，先计算所有样本的均值，然后计算每个样本值到均值的差值。我们假设x为样本的个体，均值为u。为了统计样本的离散程度，我们可以取差值的绝对值，或者方差。</p><p>其中差值的绝对值为样本值减去样本均值的绝对值：</p><img src="https://static001.geekbang.org/resource/image/6f/97/6f9677a70b1edff85e9e467f3e52bd97.png" alt="最小绝对偏差（LAD）" style="zoom:33%;box-shadow:rgba(0,0,0,0) 0 1px 5px 0px;" /><p>方差为每个样本值减去样本均值的平方和除以样本个数：</p><img src="https://static001.geekbang.org/resource/image/04/c1/045fd5afb7b53f17a8accd6f337f63c1.png" alt="最小二乘偏差（LSD）" style="zoom: 67%;box-shadow:rgba(0,0,0,0) 0 1px 5px 0px;" /><p>所以这两种节点划分的标准，分别对应着两种目标函数最优化的标准，即用最小绝对偏差（LAD），或者使用最小二乘偏差（LSD）。这两种方式都可以让我们找到节点划分的方法，通常使用最小二乘偏差的情况更常见一些。</p><p>这里我们使用到sklearn自带的波士顿房价数据集，该数据集给出了影响房价的一些指标，比如犯罪率，房产税等，最后给出了房价。根据这些指标，我们使用CART回归树对波士顿房价进行预测，</p><ul><li>首先加载了波士顿房价数据集，得到特征集和房价。然后通过train_test_split帮助我们把数据集抽取一部分作为测试集，其余作为训练集。</li><li>使用dtr&#x3D;DecisionTreeRegressor()初始化一棵CART回归树。</li><li>使用dtr.fit(train_features, train_price)函数，将训练集的特征值和结果作为参数进行拟合，得到CART回归树。</li><li>使用dtr.predict(test_features)函数进行预测，传入测试集的特征值，可以得到预测结果predict_price。</li><li>最后我们可以求得这棵回归树的二乘偏差均值，以及绝对值偏差均值。</li><li>我们能看到CART回归树的使用和分类树类似，只是最后求得的预测值是个连续值。</li></ul><p>代码如下：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># encoding=utf-8</span><span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> mean_squared_error<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>model_selection <span class="token keyword">import</span> train_test_split<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>datasets <span class="token keyword">import</span> load_boston<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>metrics <span class="token keyword">import</span> r2_score<span class="token punctuation">,</span>mean_absolute_error<span class="token punctuation">,</span>mean_squared_error<span class="token keyword">from</span> sklearn<span class="token punctuation">.</span>tree <span class="token keyword">import</span> DecisionTreeRegressor<span class="token comment"># 准备数据集</span>boston<span class="token operator">=</span>load_boston<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 探索数据</span><span class="token keyword">print</span><span class="token punctuation">(</span>boston<span class="token punctuation">.</span>feature_names<span class="token punctuation">)</span><span class="token comment"># 获取特征集和房价</span>features <span class="token operator">=</span> boston<span class="token punctuation">.</span>dataprices <span class="token operator">=</span> boston<span class="token punctuation">.</span>target<span class="token comment"># 随机抽取33%的数据作为测试集，其余为训练集</span>train_features<span class="token punctuation">,</span> test_features<span class="token punctuation">,</span> train_price<span class="token punctuation">,</span> test_price <span class="token operator">=</span> train_test_split<span class="token punctuation">(</span>features<span class="token punctuation">,</span> prices<span class="token punctuation">,</span> test_size<span class="token operator">=</span><span class="token number">0.33</span><span class="token punctuation">)</span><span class="token comment"># 创建CART回归树</span>dtr<span class="token operator">=</span>DecisionTreeRegressor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 拟合构造CART回归树</span>dtr<span class="token punctuation">.</span>fit<span class="token punctuation">(</span>train_features<span class="token punctuation">,</span> train_price<span class="token punctuation">)</span><span class="token comment"># 预测测试集中的房价</span>predict_price <span class="token operator">=</span> dtr<span class="token punctuation">.</span>predict<span class="token punctuation">(</span>test_features<span class="token punctuation">)</span><span class="token comment"># 测试集的结果评价</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'回归树二乘偏差均值:'</span><span class="token punctuation">,</span> mean_squared_error<span class="token punctuation">(</span>test_price<span class="token punctuation">,</span> predict_price<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'回归树绝对值偏差均值:'</span><span class="token punctuation">,</span> mean_absolute_error<span class="token punctuation">(</span>test_price<span class="token punctuation">,</span> predict_price<span class="token punctuation">)</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果（每次运行结果可能会有不同）：</p><pre class="line-numbers language-none"><code class="language-none">[&#39;CRIM&#39; &#39;ZN&#39; &#39;INDUS&#39; &#39;CHAS&#39; &#39;NOX&#39; &#39;RM&#39; &#39;AGE&#39; &#39;DIS&#39; &#39;RAD&#39; &#39;TAX&#39; &#39;PTRATIO&#39; &#39;B&#39; &#39;LSTAT&#39;]回归树二乘偏差均值: 23.80784431137724回归树绝对值偏差均值: 3.040119760479042<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>5、决策树实战</p><p>​通过决策树来进行泰坦尼克乘客生存预测</p><h3 id="二、朴素贝叶斯"><a href="#二、朴素贝叶斯" class="headerlink" title="二、朴素贝叶斯"></a>二、朴素贝叶斯</h3><p>​对于给出的未知物体想要进行分类，就需要求解在这个未知物体出现的条件下各个类别出现的概率，哪个最大，就认为 这个未知物体属于哪个分类。</p><p><strong>先验概率</strong>：通过经验来判断事情发生的概率</p><p><strong>后验概率</strong>：后验概率就是发生结果之后，推测原因的概率。</p><p><strong>条件概率</strong>：事件A 在另外一个事件B已经发生条件下的发生概率，表示为P(A|B)，读作“在B 发生的条件下A 发生的概率”。</p><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221029170040406.png" alt="贝叶斯公式" style="zoom:50%;box-shadow:rgba(0,0,0,0) 0 1px 5px 0px;" /><p>由此，我们可以得出通用的贝叶斯公式：</p><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221029170146364.png" alt="通用贝叶斯公式" style="zoom: 50%;box-shadow:rgba(0,0,0,0) 0 1px 5px 0px;" /><h4 id="1、朴素贝叶斯"><a href="#1、朴素贝叶斯" class="headerlink" title="1、朴素贝叶斯"></a>1、朴素贝叶斯</h4><p>讲完贝叶斯原理之后，我们再来看下朴素贝叶斯。</p><p><strong>它是一种简单但极为强大的预测建模算法</strong>。之所以称为朴素贝叶斯，是因为它假设每个输入变量是独立的。这是一个强硬的假设，实际情况并不一定，但是这项技术对于绝大部分的复杂问题仍然非常有效。朴素贝叶斯模型由两种类型的概率组成：</p><ol><li>每个类别的概率P(C<SUB>j</SUB>)；</li><li>每个属性的条件概率P(A<SUB>i</SUB>|C<SUB>j</SUB>)。</li></ol><h4 id="2、贝叶斯原理、贝叶斯分类和朴素贝叶斯的区别"><a href="#2、贝叶斯原理、贝叶斯分类和朴素贝叶斯的区别" class="headerlink" title="2、贝叶斯原理、贝叶斯分类和朴素贝叶斯的区别"></a>2、贝叶斯原理、贝叶斯分类和朴素贝叶斯的区别</h4><p>贝叶斯原理是最大的概念，它解决了概率论中“逆向概率”的问题，在这个理论基础上，人们设计出了贝叶斯分类器，朴素贝叶斯分类是贝叶斯分类器中的一种，也是最简单，最常用的分类器。</p><p>朴素贝叶斯之所以朴素是因为它假设属性是相互独立的，因此对实际情况有所约束，如果属性之间存在关联，分类准确率会降低。不过好在对于大部分情况下，朴素贝叶斯的分类效果都不错。</p><h4 id="3、Sklearn机器学习包中的朴素贝叶斯"><a href="#3、Sklearn机器学习包中的朴素贝叶斯" class="headerlink" title="3、Sklearn机器学习包中的朴素贝叶斯"></a>3、Sklearn机器学习包中的朴素贝叶斯</h4><p>sklearn机器学习包给我们提供了3个朴素贝叶斯分类算法，分别是</p><ul><li><strong>高斯朴素贝叶斯</strong>（GaussianNB）：特征变量是连续变量，符合高斯分布，比如说人的身高，物体的长度。</li><li><strong>多项式朴素贝叶斯</strong>（MultinomialNB）：特征变量是离散变量，符合多项分布，在文档分类中特征变量体现在一个单词出现的次数，或者是单词的TF-IDF值等。</li><li><strong>伯努利朴素贝叶斯</strong>（BernoulliNB）：特征变量是布尔变量，符合0&#x2F;1分布，在文档分类中特征是单词是否出现。</li></ul><h4 id="4、TF-IDF（补充-）"><a href="#4、TF-IDF（补充-）" class="headerlink" title="4、TF-IDF（补充 ）"></a>4、TF-IDF（补充 ）</h4><ul><li><strong>词频TF</strong>计算了一个单词在文档中出现的次数，它认为一个单词的重要性和它在文档中出现的次数呈正比。</li></ul><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221029172135853.png" alt="词频TF" style="zoom:50%;box-shadow:rgba(0,0,0,0) 0 1px 5px 0px;" /><ul><li><strong>逆向文档频率IDF</strong>，是指一个单词在文档中的区分度。它认为一个单词出现在的文档数越少，就越能通过这个单词把该文档和其他文档区分开。IDF越大就代表该单词的区分度越大。有些单词可能不会存在文档中，为了避免分母为0，统一给单词出现的文档数都加1。</li></ul><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221029172151209.png" alt="逆向文档频率IDF" style="zoom:50%;box-shadow:rgba(0,0,0,0) 0 1px 5px 0px;" /><ul><li><p><strong>所以TF-IDF实际上是词频TF和逆向文档频率IDF的乘积</strong>。这样我们倾向于找到TF和IDF取值都高的单词作为区分，即这个单词在一个文档中出现的次数多，同时又很少出现在其他文档中。这样的单词适合用于分类。</p></li><li><p><strong>如何求TF-IDF</strong>，在sklearn中我们直接使用TfidfVectorizer类，它可以帮我们计算单词TF-IDF向量的值。在这个类中，取sklearn计算的对数log时，底数是e，不是10。</p></li></ul><h3 id="三、SVM"><a href="#三、SVM" class="headerlink" title="三、SVM"></a>三、SVM</h3><h4 id="1、SVM的原理"><a href="#1、SVM的原理" class="headerlink" title="1、SVM的原理"></a>1、SVM的原理</h4><p><strong>SVM就是帮我们找到一个超平面</strong>，这个超平面能将不同的样本划分开，同时使得样本集中的点到这个分类超平面的最小距离（即分类间隔）最大化。</p><p>在这个过程中，<strong>支持向量</strong>就是离超平面最近的样本点，实际上如果确定了支持向量也就确定了这个超平面。所以支持向量决定了分类间隔到底是多少，而在最大间隔以外的样本点，其实对分类都没有意义。</p><p><strong>对分类间隔的大小进行定义</strong>，首先，我们定义某类样本集到超平面的距离是这个样本集合内的样本到超平面的最短距离。我们用d<SUB>i</SUB>代表点x<SUB>i</SUB>到超平面wx<SUB>i</SUB>+b&#x3D;0的欧氏距离。因此我们要求d<SUB>i</SUB>的最小值，用它来代表这个样本到超平面的最短距离。d<SUB>i</SUB>可以用公式计算得出：</p><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221029193733145.png" alt="分类间隔的大小" style="zoom: 30%;box-shadow:rgba(0,0,0,0) 0 1px 5px 0px;" /><p>我们的目标就是找出所有分类间隔中最大的那个值对应的超平面。在数学上，这是一个凸优化问题（凸优化就是关于求凸集中的凸函数最小化的问题，这里不具体展开），通过凸优化问题，最后可以求出最优的w和b，也就是我们想要找的最优超平面。</p><h4 id="2、核函数（相当于激活函数）"><a href="#2、核函数（相当于激活函数）" class="headerlink" title="2、核函数（相当于激活函数）"></a>2、核函数（相当于激活函数）</h4><p><strong>核函数:它可以将样本从原始空间映射到一个更高维的特质空间中，使得样本在新的空间中线性可分</strong>。</p><p>所以在非线性SVM中，核函数的选择就是影响SVM最大的变量。最常用的核函数有线性核、多项式核、高斯核、拉普拉斯核、sigmoid核，或者是这些核函数的组合。这些函数的区别在于映射方式的不同。通过这些核函数，我们就可以把样本空间投射到新的高维空间中。</p><h4 id="3、硬间隔、软间隔和非线性SVM"><a href="#3、硬间隔、软间隔和非线性SVM" class="headerlink" title="3、硬间隔、软间隔和非线性SVM"></a>3、硬间隔、软间隔和非线性SVM</h4><p><strong>硬间隔</strong>，假如数据是完全的线性可分的，那么学习到的模型可以称为硬间隔支持向量机。换个说法，硬间隔指的就是完全分类准确，不能存在分类错误的情况。</p><p><strong>软间隔</strong>，就是允许一定量的样本分类错误，我们知道，实际工作中的数据没有那么“干净”，或多或少都会存在一些噪点，所以线性可分是个理想情况。这时，我们需要使用到软间隔SVM（近似线性可分）</p><p>当然软间隔和核函数的提出，都是为了方便我们对上面超平面公式中的w和b进行求解，从而得到最大分类间隔的超平面。</p><h3 id="四、KNN"><a href="#四、KNN" class="headerlink" title="四、KNN"></a>四、KNN</h3><h4 id="1、KNN算法的定义"><a href="#1、KNN算法的定义" class="headerlink" title="1、KNN算法的定义"></a>1、KNN算法的定义</h4><p>​KNN 也叫 K 最近邻算法，就是每个样本都可以用它最接近的 K 个邻居来代表。如果一个样本，它的 K 个最接近的邻居都属于分类 A，那么这个样本也属于分类 A。原理如下：</p><ol><li>计算待分类物体与其他物体之间的距离；</li><li>统计距离最近的K个邻居；</li><li>对于K个最近的邻居，它们属于哪个分类最多，待分类物体就属于哪一类。</li></ol><h4 id="2、KNN算法中K值的选择"><a href="#2、KNN算法中K值的选择" class="headerlink" title="2、KNN算法中K值的选择"></a>2、KNN算法中K值的选择</h4><p>你能看出整个KNN的分类过程，K值的选择还是很重要的。</p><ul><li><p>如果 K 值比较小，就相当于未分类物体与它的邻居非常接近才行。这样产生的一个问题就是，如果邻居点是个噪声点，那么未分类物体的分类也会产生误差，这样KNN分类就会产生过拟合。</p></li><li><p>如果K值比较大，相当于距离过远的点也会对未知物体的分类产生影响，虽然这种情况的好处是鲁棒性强，但是不足也很明显，会产生欠拟合情况，也就是没有把未分类物体真正分类出来。</p></li></ul><p>所以K值应该是个实践出来的结果，并不是我们事先而定的。在工程上，我们一般采用交叉验证的方式选取 K 值。</p><p>交叉验证的思路就是，把样本集中的大部分样本作为训练集，剩余的小部分样本用于预测，来验证分类模型的准确性。所以在KNN算法中，我们一般会把K值选取在较小的范围内，同时在验证集上准确率最高的那一个最终确定作为K值。</p><h4 id="3、距离的计算"><a href="#3、距离的计算" class="headerlink" title="3、距离的计算"></a>3、距离的计算</h4><p>在KNN算法中，还有一个重要的计算就是关于距离的度量。两个样本点之间的距离代表了这两个样本之间的相似度。距离越大，差异性越大；距离越小，相似度越大。</p><p>关于距离的计算方式有下面五种方式：</p><ol><li><p>欧氏距离</p><p><strong>欧氏距离</strong>是我们最常用的距离公式，也叫做欧几里得距离。在二维空间中，两点的欧式距离就是：</p><img src="https://static001.geekbang.org/resource/image/f8/80/f8d4fe58ec9580a4ffad5cee263b1b80.png" alt="欧氏距离" style="zoom:33%;box-shadow:rgba(0,0,0,0) 0 1px 5px 0px;" /><p>同理，我们也可以求得两点在n维空间中的距离：</p><img src="https://static001.geekbang.org/resource/image/40/6a/40efe7cb4a2571e55438b55f8d37366a.png" alt="多维欧氏距离" style="zoom:33%;box-shadow:rgba(0,0,0,0) 0 1px 5px 0px;" /></li><li><p>曼哈顿距离</p><p><strong>曼哈顿距离</strong>在几何空间中用的比较多。以下图为例，绿色的直线代表两点之间的欧式距离，而红色和黄色的线为两点的曼哈顿距离。所以曼哈顿距离等于两个点在坐标系上绝对轴距总和。用公式表示就是：</p><img src="https://static001.geekbang.org/resource/image/bd/aa/bda520e8ee34ea19df8dbad3da85faaa.png" alt="曼哈顿距离" style="zoom:33%;box-shadow:rgba(0,0,0,0) 0 1px 5px 0px;" /></li><li><p>闵可夫斯基距离；</p></li><li><p>切比雪夫距离；</p></li><li><p>余弦距离；</p></li></ol><h4 id="4、KD树"><a href="#4、KD树" class="headerlink" title="4、KD树"></a>4、KD树</h4><p>其实从上文你也能看出来，KNN的计算过程是大量计算样本点之间的距离。为了减少计算距离次数，提升KNN的搜索效率，人们提出了KD树（K-Dimensional的缩写）。KD树是对数据点在K维空间中划分的一种数据结构。在KD树的构造中，每个节点都是k维数值点的二叉树。既然是二叉树，就可以采用二叉树的增删改查操作，这样就大大提升了搜索效率。</p><h4 id="5、如何在sklearn中使用KNN"><a href="#5、如何在sklearn中使用KNN" class="headerlink" title="5、如何在sklearn中使用KNN"></a>5、如何在sklearn中使用KNN</h4><p>在Python的sklearn工具包中有KNN算法。KNN既可以做分类器，也可以做回归。如果是做分类，你需要引用：</p><pre class="line-numbers language-none"><code class="language-none">from sklearn.neighbors import KNeighborsClassifier<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果是做回归，你需要引用：</p><pre class="line-numbers language-none"><code class="language-none">from sklearn.neighbors import KNeighborsRegressor<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>从名字上你也能看出来Classifier对应的是分类，Regressor对应的是回归。一般来说如果一个算法有Classifier类，都能找到相应的Regressor类。比如在决策树分类中，你可以使用DecisionTreeClassifier，也可以使用决策树来做回归DecisionTreeRegressor。</p><h3 id="五、AdaBoost"><a href="#五、AdaBoost" class="headerlink" title="五、AdaBoost"></a>五、AdaBoost</h3><h4 id="1、AdaBoost定义"><a href="#1、AdaBoost定义" class="headerlink" title="1、AdaBoost定义"></a>1、AdaBoost定义</h4><p>​Adaboost 在训练中建立了一个联合的分类模型。boost 在英文中代表提升的意思，所以 Adaboost 是个构建分类器的提升算法。它可以让我们多个弱的分类器组成一个强的分类器。AdaBoost 算法与随机森林算法一样都属于分类算法中的集成算法。集成算法通常有两种方式，分别是投票选举（bagging）和再学习 （boosting）。</p><ul><li>​投票选举：类似把专家召集到一个会议桌前，当做一个决定的时候， 让 K 个专家（K 个模型）分别进行分类，然后选择出现次数最多的那个类作为最终的分类结果。</li><li>​再学习：相当于把 K 个专家（K 个分类器）进行加权融合，形成一个新的超级专家 （强分类器），让这个超级专家做判断。</li></ul><p>Adaboost是通过一系列的弱分类器根据不同的权重组合而成的。 假设弱分类器为 G<SUB>i</SUB>(x)，它在强分类器中的权重 ，那么就可以得出强分类器 f(x)：</p><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221031195751399.png" alt="强分类器" style="zoom: 50%; box-shadow: rgba(0, 0, 0, 0) 0px 1px 5px 0px;" /><ol><li>每个弱分类器在强分类器中的权重是如何计算的？</li><li>如何得到弱分类器，也就是在每次迭代训练的过程中，如何得到最优弱分类器？</li></ol><h4 id="2、弱分类器权重的计算"><a href="#2、弱分类器权重的计算" class="headerlink" title="2、弱分类器权重的计算"></a>2、弱分类器权重的计算</h4><p>实际上在一个由 K 个弱分类器中组成的强分类器中，如果弱分类器的分类效果好，那么权重应该比较大，如果弱分类器的分类效果一般，权重应该降低。所以我们需要基于这个弱分类器对样本的分类错误率来决定它的权重，其中e<SUB>i</SUB> 代表第 i 个分类器的分类错误率。用公式表示就是：</p><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221031200339325.png" alt="弱分类器权重" style="zoom: 50%;box-shadow: rgba(0, 0, 0, 0) 0px 1px 5px 0px;" /><h4 id="3、在训练迭代中选择最优弱分类器"><a href="#3、在训练迭代中选择最优弱分类器" class="headerlink" title="3、在训练迭代中选择最优弱分类器"></a>3、在训练迭代中选择最优弱分类器</h4><p>​实际上，AdaBoost 算法是通过改变样本的数据分布来实现选择最优弱分类器的。AdaBoost 会判断每次训练的样本是否正确分类，对于正确分类的样本，降低它的权重，对于被错误分类的样本， 增加它的权重。再基于上一次得到的分类准确率，来确定这次训练样本中每个样本的权 重。然后将修改过权重的新数据集传递给下一层的分类器进行训练。这样做的好处就是， 通过每一轮训练样本的动态权重，可以让训练的焦点集中到难分类的样本上，最终得到的弱分类器的组合更容易得到更高的分类准确率。</p><p>我们可以用D<SUB>k+1</SUB>代表第 k+1 轮训练中，样本的权重集合，其中W<SUB>k+1,k</SUB>代表第 k+1 轮 中第一个样本的权重，以此类推W<SUB>k+1,N</SUB>代表第 k+1 轮中第 N 个样本的权重，因此用公式表示为：</p><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221031201305653.png"  style="zoom:50%;box-shadow: rgba(0, 0, 0, 0) 0px 1px 5px 0px;" /><p>第 k+1 轮中的样本权重，是根据该样本在第 k 轮的权重以及第 k 个分类器的准确率而 定，具体的公式为：</p><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221031201330118.png"  style="zoom:50%;box-shadow: rgba(0, 0, 0, 0) 0px 1px 5px 0px;" /><h3 id="六、K-Means"><a href="#六、K-Means" class="headerlink" title="六、K-Means"></a>六、K-Means</h3><h4 id="1、K-Means原理"><a href="#1、K-Means原理" class="headerlink" title="1、K-Means原理"></a>1、K-Means原理</h4><p>​K-Means 算法是一个聚类算法。你可以这么理解，最终我想把物体划分成 K 类。假设每 个类别里面，都有个“中心点”，即意见领袖，它是这个类别的核心。现在我有一个新点 要归类，这时候就只要计算这个新点与 K 个中心点的距离，距离哪个中心点近，就变成了 哪个类别。</p><ol><li>选取K个点作为初始的类中心点，这些点一般都是从数据集中随机抽取的；</li><li>将每个点分配到最近的类中心点，这样就形成了K个类，然后重新计算每个类的中心点；</li><li>重复第二步，直到类不发生变化，或者你也可以设置最大迭代次数，这样即使类中心点发生变化，但是只要达到最大迭代次数就会结束。</li></ol><h4 id="2、K-Means和KNN的区别"><a href="#2、K-Means和KNN的区别" class="headerlink" title="2、K-Means和KNN的区别"></a>2、K-Means和KNN的区别</h4><p>我们可以从三个维度来区分K-Means和KNN这两个算法：</p><ul><li>首先，这两个算法解决数据挖掘的两类问题。K-Means是聚类算法，KNN是分类算法。</li><li>这两个算法分别是两种不同的学习方式。K-Means是非监督学习，也就是不需要事先给出分类标签，而KNN是有监督学习，需要我们给出训练数据的分类标识。</li><li>最后，K值的含义不同。K-Means中的K值代表K类。KNN中的K值代表K个最接近的邻居。</li></ul><h4 id="3、K-Means的缺陷"><a href="#3、K-Means的缺陷" class="headerlink" title="3、K-Means的缺陷"></a>3、K-Means的缺陷</h4><p>K-Means聚类有个缺陷：聚类个数K值需要事先指定。如果你不知道该聚成几类，那么最好会给K值多设置几个，然后选择聚类结果最好的那个值。</p><h3 id="七、EM"><a href="#七、EM" class="headerlink" title="七、EM"></a>七、EM</h3><h4 id="1、EM-算法"><a href="#1、EM-算法" class="headerlink" title="1、EM 算法"></a>1、EM 算法</h4><p>EM 算法也叫最大期望算法，是求参数的最大似然估计的一种方法,最大似然也就是求大可能性。</p><p>原理是这样的：假设 我们想要评估参数 A 和参数 B，在开始状态下二者都是未知的，并且知道了 A 的信息就可 以得到 B 的信息，反过来知道了 B 也就得到了 A。可以考虑首先赋予 A 某个初值，以此 得到 B 的估值，然后从 B 的估值出发，重新估计 A 的取值，这个过程一直持续到收敛为止,EM 算法经常用于聚类和机器学习领域中。</p><p>K-Means是通过距离来区分样本之间的差别的，且每个样本在计算的时候只能属于一个分类，称之为是硬聚类算法。而EM聚类在求解的过程中，实际上每个样本都有一定的概率和每个聚类相关，叫做软聚类算法。</p><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221101094338194.png" alt="K-Means聚类效果" style="zoom:33%;" /><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221101094518381.png" alt="EM算法聚类效果" style="zoom: 33%;" /><p>​EM算法相当于一个聚类框架，里面有不同的聚类模型，比如GMM高斯混合模型，或者HMM隐马尔科夫模型。</p><h4 id="2、GMM高斯混合模型"><a href="#2、GMM高斯混合模型" class="headerlink" title="2、GMM高斯混合模型"></a>2、GMM高斯混合模型</h4><p>GMM是通过概率密度来进行聚类，聚成的类符合高斯分布（正态分布）</p><h4 id="3、HMM隐马尔科夫模型"><a href="#3、HMM隐马尔科夫模型" class="headerlink" title="3、HMM隐马尔科夫模型"></a>3、HMM隐马尔科夫模型</h4><p>HMM用到了马尔可夫过程，在这个过程中，我们通过状态转移矩阵来计算状态转移的概率。HMM在自然语言处理和语音识别领域中有广泛的应用。</p><h3 id="八、Apriori"><a href="#八、Apriori" class="headerlink" title="八、Apriori"></a>八、Apriori</h3><h4 id="1、Apriori"><a href="#1、Apriori" class="headerlink" title="1、Apriori"></a>1、Apriori</h4><p>Apriori 是一种挖掘关联规则（association rules）的算法，它通过挖掘频繁项集 （frequent item sets）来揭示物品之间的关联关系，被广泛应用到商业挖掘和网络安全 等领域中。频繁项集是指经常出现在一起的物品的集合，关联规则暗示着两种物品之间可能存在很强的关系。</p><ul><li><p>支持度：是个百分比，它指的是某个商品组合出现的次数与总次数之间的比例。支持度越高，代表这个组合出现的频率越大</p></li><li><p>置信度：是个条件概念，就是说在A发生的情况下，B发生的概率是多少</p></li><li><p>提升度：代表的是“商品A的出现，对商品B的出现概率提升的程度。</p></li><li><p>频繁项集：小于最小值支持度的项目就是非频繁项集，而大于等于最小支持度的项集就是频繁项集。</p></li></ul><p>我们刚完成了Apriori算法的模拟，你能看到Apriori在计算的过程中有以下几个缺点：</p><ol><li>可能产生大量的候选集。因为采用排列组合的方式，把可能的项集都组合出来了；</li><li>每次计算都需要重新扫描数据集，来计算每个项集的支持度。</li></ol><p>所以Apriori算法会浪费很多计算空间和计算时间，为此人们提出了FP-Growth算法</p><h4 id="2、FP-Growth"><a href="#2、FP-Growth" class="headerlink" title="2、FP-Growth"></a>2、FP-Growth</h4><p>FP-Growth的特点是：</p><ol><li>创建了一棵FP树来存储频繁项集。在创建前对不满足最小支持度的项进行删除，减少了存储空间。我稍后会讲解如何构造一棵FP树；</li><li>整个生成过程只遍历数据集2次，大大减少了计算量。</li></ol><p>所以在实际工作中，我们常用FP-Growth来做频繁项集的挖掘，</p><p><strong>1.创建项头表（item header table）</strong></p><p>创建项头表的作用是为FP构建及频繁项集挖掘提供索引。</p><p>这一步的流程是先扫描一遍数据集，对于满足最小支持度的单个项（K&#x3D;1项集）按照支持度从高到低进行排序，这个过程中删除了不满足最小支持度的项。</p><p>项头表包括了项目、支持度，以及该项在FP树中的链表。初始的时候链表为空。</p><p><strong>2.构造FP树</strong></p><p>FP树的根节点记为NULL节点。</p><p>整个流程是需要再次扫描数据集，对于每一条数据，按照支持度从高到低的顺序进行创建节点（也就是第一步中项头表中的排序结果），节点如果存在就将计数count+1，如果不存在就进行创建。同时在创建的过程中，需要更新项头表的链表。</p><p><strong>3.通过FP树挖掘频繁项集</strong></p><p>到这里，我们就得到了一个存储频繁项集的FP树，以及一个项头表。我们可以通过项头表来挖掘出每个频繁项集。</p><p>具体的操作会用到一个概念，叫“条件模式基”，它指的是以要挖掘的节点为叶子节点，自底向上求出FP子树，然后将FP子树的祖先节点设置为叶子节点之和。</p><h3 id="九、PageRank"><a href="#九、PageRank" class="headerlink" title="九、PageRank"></a>九、PageRank</h3><p>​PageRank 起源于论文影响力的计算方式，如果一篇文论被引入的次数越多，就代表这篇论文的影响力越强。同样 PageRank 被 Google 创造性地应用到了网页权重的计算中：当 一个页面链出的页面越多，说明这个页面的“参考文献越多，当这个页面被链入的频率 越高，说明这个页面被引用的次数越高。基于这个原理，我们可以得到网站的权重划分。</p><h4 id="1、PageRank-的原理"><a href="#1、PageRank-的原理" class="headerlink" title="1、PageRank 的原理"></a>1、PageRank 的原理</h4><p>简单来说，一个网页的影响力 &#x3D; 所有入链集合的页面的加权影响力之和，出链指的是链接出去的链接，入链指的是链接进来的链接。u 为待评估的页面， B<SUB>u</SUB>为页面 u 的入链集合，用公式表示为：</p><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221101121252832.png" alt="网页的影响力" style="zoom: 30%;box-shadow: rgba(0, 0, 0, 0) 0px 1px 5px 0px;" /><p>针对入链集合中的任意页面 v，它能给 u 带来的影响力是其自身的影响力 PR(v) 除以 v 页面的出链数量，即页面 v 把影响力 PR(v) 平均分配给了它的出链，这样统计所有能给 u 带来链接的页面 v，得到的总和就是网页 u 的影响力，即为 PR(u)。</p><p>举个例子，假设一共有 4 个网页 A、B、C、D。它们之间的链接信息如图所示：</p><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221101122034940.png" alt="网页链接关系" style="zoom:33%;" /><p> A 有三个出链分别链接到了 B、C、D 上。那么当用户访问 A 的 时候，就有跳转到 B、C 或者 D 的可能性，跳转概率均为 1&#x2F;3。 B 有两个出链，链接到了 A 和 D 上，跳转概率为 1&#x2F;2。 这样，我们可以得到 A、B、C、D 这四个网页的转移矩阵 M：</p><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221101122140825.png"  style="zoom: 50%; box-shadow: rgba(0, 0, 0, 0) 0px 1px 5px 0px;" /><p>我们假设 A、B、C、D 四个页面的初始影响力都是相同的，即：</p><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221101122354942.png"  style="zoom:45%;box-shadow: rgba(0, 0, 0, 0) 0px 1px 5px 0px;" /><p>当进行第一次转移之后，各页面的影响力</p><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221101122439293.png"  style="zoom:50%;box-shadow: rgba(0, 0, 0, 0) 0px 1px 5px 0px;" /><p>然后我们再用转移矩阵乘以得到结果，直到第 n 次迭代后 影响力不再发生变化，可以收敛到 (0.3333，0.2222，0.2222，0.2222，也就是对应着 A、B、C、D 四 个页面最终平衡状态下的影响力。 你能看出 A 页面相比于其他页面来说权重更大，也就是PR值更高。而 B、C、D 页面的 PR 值相等。</p><h4 id="2、PageRank-的随机浏览模型"><a href="#2、PageRank-的随机浏览模型" class="headerlink" title="2、PageRank 的随机浏览模型"></a>2、PageRank 的随机浏览模型</h4><p>PageRank 可能出现的问题</p><ol><li>等级泄露（Rank Leak）：如果一个网页没有出链，就像是一个黑洞一样，吸收了其他 网页的影响力而不释放，最终会导致其他网页的 PR 值为 0。</li><li>等级沉没（Rank Sink）：如果一个网页只有出链，没有入链（如下图所示），计算的 过程迭代下来，会导致这个网页的 PR 值为 0（也就是不存在公式中的 V）。</li></ol><p>为了解决简化模型中存在的等级泄露和等级沉没的问题，拉里·佩奇提出了 PageRank 的随机浏览模型，他假设了这样一个场景：用户并不都是按照跳转链接的方式来上网，还有一 种可能是不论当前处于哪个页面，都有概率访问到其他任意的页面，比如说用户就是要直 接输入网址访问其他页面，虽然这个概率比较小。 所以他定义了阻尼因子 d，这个因子代表了用户按照跳转链接来上网的概率，通常可以取 一个固定值 0.85，而 1-d&#x3D;0.15 则代表了用户不是通过跳转链接的方式来访问网页的，比 如直接输入网址。</p><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221101123221224.png" alt="随机浏览模型" style="zoom: 33%;box-shadow: rgba(0, 0, 0, 0) 0px 1px 5px 0px;" /><p>其中 N 为网页总数，这样我们又可以重新迭代网页的权重计算了，因为加入了阻尼因子 d，一定程度上解决了等级泄露和等级沉没的问题。 通过数学定理也可以证明，最终 PageRank 随机浏览模型是可以收敛 的，也就是可以得到一个稳定正常的 PR 值。</p><h3 id="十、随机森林（补充）"><a href="#十、随机森林（补充）" class="headerlink" title="十、随机森林（补充）"></a>十、随机森林（补充）</h3><p>随机森林的英文是 Random Forest，英文简写是 RF。它实际上是一个包含多个决策树的分类 器，每一个子分类器都是一棵 CART 分类回归树。所以随机森林既可以做分类，又可以做回归。</p><ul><li>当它做分类的时候，输出结果是每个子分类器的分类结果中最多的那个。你可以理解是每个分类器都做投票，取投票最多的那个结果。</li><li>当它做回归的时候，输出结果是每棵 CART 树的回归结果 的平均值。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据分析 </category>
          
          <category> NumPy </category>
          
          <category> Pandas </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> NumPy </tag>
            
            <tag> Pandas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git笔记</title>
      <link href="/2022/10/22/Git%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/22/Git%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="GitHub加速"><a href="#GitHub加速" class="headerlink" title="GitHub加速"></a>GitHub加速</h2><p>方法一：修改hosts文件，hosts文件地址  <code>C:\Windows\System32\drivers\etc</code></p><p>方法二：使用FastGithub加速器  <a href="https://github.com/wxydaydayup/goodSoftware">FastGithub加速器</a></p><h2 id="Git操作"><a href="#Git操作" class="headerlink" title="Git操作"></a>Git操作</h2><h3 id="Git上传到GitHub"><a href="#Git上传到GitHub" class="headerlink" title="Git上传到GitHub"></a>Git上传到GitHub</h3><h4 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h4><p>第一步：</p><p>​查看SSH key 秘钥位置  <code>C:/Users/LENOVO/.ssh/id_rsa </code>  并且在Github中创建SSH key</p><p>第二步：</p><p>​在要上传的文件夹里右键打开<code>Git Bash Here</code></p><p>第三步：</p><p>​把Github上面的仓库克隆到本地</p><p>​<code>git clone https://github.com/wxydaydayup/Study_Notes.git</code></p><p>​这个步骤以后本地项目文件夹下面就会多出个文件夹，该文件夹名即为Github上面的项目名，多出了个Study_Notes文件夹，把本地项目文件夹下的所有文件（除了新多出的那个文件夹不用），其余都复制到那个新多出的文件夹下</p><p>​继续输入命令 <code>cd Study_Notes</code>，进入Study_Notes文件夹接下来依次执行 </p><ol><li><code>git add *</code>    （注：别忘记后面的.，此操作是把Test文件夹下面的文件都添加进来）</li><li><code>git commit  -m  &quot;提交信息&quot;</code>  （注：“提交信息”里面换成你需要，如“first commit”）</li><li><code>git push -u origin main</code>   （注：此操作目的是把本地仓库push到Github上，此步骤需要你输入帐号和密码）</li></ol><h4 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h4><p>从第一种方法 的第三步开始输入</p><ol><li><p><code>git init</code></p></li><li><p><code>git add *</code></p></li><li><p><code>git commit -m 1.zip</code></p><p>不加 -m 退出 ESC :wq </p></li><li><p><code>git remote add origin github.com/wxydaydayup/Study_Notes.git</code>（此时记得在github上创建一个仓库，并把仓库的ssh地址赋值下来，关联远程仓库）</p></li><li><p><code>git push -u origin master</code>  (这时github上就会多出文件，空加-u，不空不用,<code>git push -f origin master</code> 在这里，如果报错，就强制性上传代码)</p></li></ol><h3 id="Git大文件上传"><a href="#Git大文件上传" class="headerlink" title="Git大文件上传"></a>Git大文件上传</h3><h4 id="Git-lfs"><a href="#Git-lfs" class="headerlink" title="Git lfs"></a>Git lfs</h4><h4 id="彻底删除lfs"><a href="#彻底删除lfs" class="headerlink" title="彻底删除lfs"></a>彻底删除lfs</h4><p><code>git lfs uninstall</code></p><p><code>git filter-branch --force --index-filter</code></p><h3 id="Git-分支"><a href="#Git-分支" class="headerlink" title="Git 分支"></a>Git 分支</h3><ol><li>切换分支 <code>git checkout 分支名</code></li><li>创建并切换 <code>git checkout -b 分支名</code></li><li>合并分支  <code>git merge 分支名</code></li><li>删除分支时，需要做各种检查  <code>git branch -d 分支名</code></li><li>不做任何检查，强制删除分支 <code>git branch -D 分支名</code>（适用于dev分支没merge到主分支上）</li></ol><h3 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h3><ol><li>查看仓库状态 :  <code>git status</code></li><li>仓库初始化：<code>git init</code></li><li>添加文件到Git仓库：<code>git add demo.txt</code></li><li>提交文件到Git仓库：<code>git commit -m &quot;1&quot;</code></li><li>版本回退 <code>git reset --hard XXXX</code></li><li>查看版本信息 <code>git reflog</code></li><li>以精简的方式显示提交记录 <code>git-log</code></li></ol><h3 id="Git错误"><a href="#Git错误" class="headerlink" title="Git错误"></a>Git错误</h3><h4 id="错误1："><a href="#错误1：" class="headerlink" title="错误1："></a>错误1：</h4><p>​<code>error: git SSl certificate problem: unable to get local issuer certificate</code></p><p>​这个问题是由于没有配置信任的服务器HTTPS验证。默认，CURL被设为不信任任何CAS，就是说，它不信任任何服务器验证。只需要执行下面命令就可以解决：</p><p>​<code>git config --global http.sslVerify false</code></p><h4 id="错误2："><a href="#错误2：" class="headerlink" title="错误2："></a>错误2：</h4><p>​<code>error: RPC failed; curl 18 transfer closed with outstanding read data remaining</code></p><p>​<code>send-pack: unexpected disconnect while reading sideband packet</code></p><p>​<code>fatal: the remote end hung up unexpectedly</code></p><p>解决方法：</p><ol><li><p>缓存过小导致，可以尝试增大缓存 单位为byte, 524288000就是500M</p><p>​<code>git config --global http.postBuffer 524288000</code>  </p><p>百度查到说是的postBuffer默认值太小的原因，我看有人说调整到500M就行，但我试了不可以，所以就调整到了2G，有人成功了，是根据以下命令调整的</p><p>​<code>git config --global http.postBuffer 2024288000</code></p></li><li><p>网络波动导致，可以尝试取消相关的网络限制</p><p>​<code>git config --global http.lowSpeedLimit 0</code></p><p>​<code>git config --global http.lowSpeedTime 999999</code></p></li><li><p>若传输文件实在太大，可以尝试增大压缩率(压缩率大小根据实际情况设置),compression 是压缩的意思，从 clone 的终端输出就知道，服务器会压缩目标文件，然后传输到客户端，客户端再解压。取值为 [-1, 9]，-1 以 zlib 为默认压缩库，0 表示不进行压缩，1…9 是压缩速度与最终获得文件大小的不同程度的权衡，数字越大，压缩越慢，当然得到的文件会越小</p><p>​<code>git config --global core.compression 3</code></p></li><li><p>推送的文件大小太大了，超过了HTTP的限制，更换远程地址，改用git 协议来推送代码，这个最终成功了</p><p>​<code>git remote set-url origin git@github.com:wxydaydayup/BookPdf.git</code></p><p>​<code>git push -u origin master</code></p></li></ol><h2 id="Idea连接Github-x2F-Gitee"><a href="#Idea连接Github-x2F-Gitee" class="headerlink" title="Idea连接Github&#x2F;Gitee"></a>Idea连接Github&#x2F;Gitee</h2><ol><li><p>创建Tooken  <a href="https://github.com/settings/tokens/new">https://github.com/settings/tokens/new</a> 权限全部点上</p></li><li><p>VCS –&gt; Import into version Control –&gt; Create Git Repository </p></li><li><p>VCS –&gt; clone</p></li><li><p>设置SDK 与 配置maven</p><img src="/images/Git%E7%AC%94%E8%AE%B0/image-20221013151533015.png" alt="image-20221013151533015" style="zoom: 67%;" /><p>pom.xml 点击右键 -》Add as Maven Project</p></li><li><p>连接数据库</p><p>若出现错误：</p><p>​<code>Server returns invalid timezone. Go to &#39;Advanced&#39; tab and set &#39;serverTimezone&#39; property manually.</code></p><p>在Advanced设置一下时区即可</p><img src="/images/Git%E7%AC%94%E8%AE%B0/image-20221013154539389.png" alt="image-20221013154539389" style="zoom:67%;" /></li><li><p>IDEA集成GitBash作为Terminal（建议）</p><img src="/images/Git%E7%AC%94%E8%AE%B0/image-20221014095006382.png" alt="image-20221014095006382" style="zoom: 67%;" /><p>7、看看效果</p><img src="/images/Git%E7%AC%94%E8%AE%B0/image-20221014095334858.png" alt="image-20221014095334858" style="zoom: 50%;" /></li></ol><h2 id="Git合并拉取代码规范"><a href="#Git合并拉取代码规范" class="headerlink" title="Git合并拉取代码规范"></a>Git合并拉取代码规范</h2><ol><li>先拉取自己开发分支远端代码（适用多人共用一个开发分支）</li><li>测试完成后将自己开发代码提交到本地仓库，上传到自己的远端开发分支</li><li>换到master分支，拉取master远端的最新代码</li><li>确保本地master分支的代码为远端最新代码后，把开发分支合并到master分支</li><li>本地master分支代码上传到远端master</li></ol><h2 id="Github搜索技巧"><a href="#Github搜索技巧" class="headerlink" title="Github搜索技巧"></a>Github搜索技巧</h2><p>计算机图形学 in:name stars:&gt;100 language:java</p><p>计算机图形学 in:readme</p><p><a href="https://blog.csdn.net/zzzzlei123123123/article/details/105174595">Github删除自己的仓库</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
          <category> Github </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Git </tag>
            
            <tag> Github </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pumpkin</title>
      <link href="/2022/10/21/pumpkin/"/>
      <url>/2022/10/21/pumpkin/</url>
      
        <content type="html"><![CDATA[<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="哈希表构造散列表并求平均查找长度"><a href="#哈希表构造散列表并求平均查找长度" class="headerlink" title="哈希表构造散列表并求平均查找长度"></a>哈希表构造散列表并求平均查找长度</h3><h4 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h4><p>将关键字序列（7、8、30、11、18、9、14）散列存储到散列表中。散列表的存储空间是一个下标从0开始的一维数组，散列函数为： H(key) &#x3D; (key * 3) MOD 7，处理冲突采用线性探测再散列法，要求装填（载）因子为0.7。</p><p>（1）请画出所构造的散列表。</p><p>（2）分别计算等概率情况下查找成功和查找不成功的平均查找长度。</p><h4 id="解答"><a href="#解答" class="headerlink" title="解答"></a>解答</h4><p><strong>装载因子</strong>是指所有关键子填充哈希表后饱和的程度，它等于 <strong>填入表中的关键字总数&#x2F;哈希表的长度</strong>。根据题意，我们可以确定哈希表的长度为 L &#x3D; 7&#x2F;0.7 &#x3D; 10；因此此题需要构建的哈希表是<strong>下标为0~9</strong>的一维数组。查找不成功的次数就直接找关键字到下一个地址关键字为空的距离，但根据散列函数地址为<strong>MOD7</strong>，因此初始只可能在0~6的位置，</p><p>参考链接： <a href="https://blog.csdn.net/dyw_666666/article/details/110291968">哈希表查找</a></p><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><h3 id="硬链接和软链接引用区别"><a href="#硬链接和软链接引用区别" class="headerlink" title="硬链接和软链接引用区别"></a>硬链接和软链接引用区别</h3><h4 id="问题-1"><a href="#问题-1" class="headerlink" title="问题"></a>问题</h4><p>​设文件F1当前引用计数值为1，先建立F1的符号链接文件F2，再建立F1的硬链接文件F3，然后删除F1。此时，F2和F3的引用计数值分别是() 。</p><p>​当建立F2时，F1和F2的引用计数值都为1。当再建立F3时，F1和F3的引用计数值就都变成了2。当后来删除F1时，F3的引用计数值为2-1&#x3D;1。F2的引用计数值仍然保持不变。综上：F2的引用值为1，F3的引用值也为1。</p><h4 id="解答-1"><a href="#解答-1" class="headerlink" title="解答"></a>解答</h4><p>​记住结论就行，硬链接删除原文件减一，软链接删除原文件不变</p><p>​记住结论就行，硬链接删除原文件引用数减1，软链接删除原文件引用数不变</p><p>参考链接： <a href="https://blog.csdn.net/weixin_46264660/article/details/124763635">文件链接</a></p><h2 id="计算机网络"><a href="#计算机网络" class="headerlink" title="计算机网络"></a>计算机网络</h2><h3 id="给定带宽求数据传输率"><a href="#给定带宽求数据传输率" class="headerlink" title="给定带宽求数据传输率"></a>给定带宽求数据传输率</h3><h4 id="问题-2"><a href="#问题-2" class="headerlink" title="问题"></a>问题</h4><p>​一个带宽为4 KHz 的理想低通通道，其允许的最高码元传输速率为多少？</p><p>​采用8个相位，每相位取2种幅度值的调制技术，可以获得的数据传输率是多少？</p><h4 id="解答-2"><a href="#解答-2" class="headerlink" title="解答"></a>解答</h4><ul><li><p>数据传输速率：在数值上等于<strong>每秒传输构成数据代码的二进制比特数</strong>,单位为比特&#x2F;秒(bit&#x2F;second),记作bps.</p></li><li><p>信号传输速率：也称码元率、调制速率或波特率,表示<strong>单位时间内通过信道传输的码元个数</strong>,单位记做Baud.</p></li><li><p>信道容量：信道在单位时间内可以传输的最大信号量,表示信道的传输能力.信道容量有时也表示为<strong>单位时间内可传输的二进制位的位数（称信道的数据传输速率,位速率）</strong>,单位为位&#x2F;秒（b&#x2F;s）,简记为bps。</p></li></ul><p>因为公式 若信道带宽为W,则奈氏定理的最大码元速率为： B &#x3D; 2W （Baud）</p><p>所以带宽为4K的理想低通信道最大码元速率为：2 × 4000 &#x3D; 8000 （Baud）</p><p>因为采用8个相位，每相位取2种幅度值的调制技术</p><p>说明每个信号有2×8 &#x3D;16种变化，每个码元携带log(2, 16) &#x3D; 4比特的信息</p><p>所以最高数据传送速率  Rmax &#x3D; Bmax × n &#x3D; 8000 × 4 &#x3D; 32000(b&#x2F;s)</p><p>参考链接：</p><ul><li>​<a href="https://blog.csdn.net/yang_gang2017/article/details/78226155">求数据传输率</a></li><li>​<a href="https://blog.csdn.net/weixin_43336281/article/details/121486370">相位调制求码元携带信息</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生日提醒脚本</title>
      <link href="/2021/10/21/%E7%94%9F%E6%97%A5%E6%8F%90%E9%86%92%E8%84%9A%E6%9C%AC/"/>
      <url>/2021/10/21/%E7%94%9F%E6%97%A5%E6%8F%90%E9%86%92%E8%84%9A%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h2 id="服务器部署"><a href="#服务器部署" class="headerlink" title="服务器部署"></a>服务器部署</h2><h3 id="一、创建数据库"><a href="#一、创建数据库" class="headerlink" title="一、创建数据库"></a>一、创建数据库</h3><p>1、云服务器Mysql修改密码</p><ul><li>在my.cnf中的[mysqld]下输入</li></ul><pre class="line-numbers language-none"><code class="language-none">skip-grant-tables<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>终端输入以下命令</li></ul><pre class="line-numbers language-none"><code class="language-none">service mysqld restartmysql -u root -puse mysqlupdate user set password &#x3D; password (&#39;123456&#39;) where user &#x3D; &#39;root&#39;;flush privileges; service mysqld restart<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>在my.cnf中的[mysqld]下删除刚刚输入的代码</li></ul><p>2、创建表</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> <span class="token identifier"><span class="token punctuation">`</span>birth<span class="token punctuation">`</span></span> <span class="token punctuation">(</span>  <span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span> <span class="token keyword">int</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">NOT</span> <span class="token boolean">NULL</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>isBirthday<span class="token punctuation">`</span></span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>isPreGift<span class="token punctuation">`</span></span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>isLunardate<span class="token punctuation">`</span></span> <span class="token keyword">tinyint</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>name<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token identifier"><span class="token punctuation">`</span>birDate<span class="token punctuation">`</span></span> <span class="token keyword">varchar</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">)</span> <span class="token keyword">DEFAULT</span> <span class="token boolean">NULL</span><span class="token punctuation">,</span>  <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span><span class="token identifier"><span class="token punctuation">`</span>id<span class="token punctuation">`</span></span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">ENGINE</span><span class="token operator">=</span><span class="token keyword">InnoDB</span> <span class="token keyword">AUTO_INCREMENT</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">DEFAULT</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>utf8<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、插入数据</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> <span class="token identifier"><span class="token punctuation">`</span>birth<span class="token punctuation">`</span></span> <span class="token keyword">VALUES</span> <span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'1'</span><span class="token punctuation">,</span> <span class="token string">'XX'</span><span class="token punctuation">,</span> <span class="token string">'0824'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>4、远程连接云服务器数据库</p><ul><li>支持root用户允许远程连接mysql数据库</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">use</span> mysql<span class="token punctuation">;</span><span class="token keyword">grant</span> <span class="token keyword">all</span> <span class="token keyword">privileges</span> <span class="token keyword">on</span> <span class="token operator">*</span><span class="token punctuation">.</span><span class="token operator">*</span> <span class="token keyword">to</span> <span class="token string">'root'</span><span class="token variable">@'%'</span> identified <span class="token keyword">by</span> <span class="token string">'123456'</span> <span class="token keyword">with</span> <span class="token keyword">grant</span> <span class="token keyword">option</span><span class="token punctuation">;</span>flush <span class="token keyword">privileges</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>查看是否修改成功</li></ul><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">select</span> <span class="token keyword">user</span><span class="token punctuation">,</span>host <span class="token keyword">from</span> <span class="token keyword">user</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><p>远程连接云服务器数据库</p><p>​这个密码是登录服务器SSH密码</p></li></ul><img src="/images/%E7%94%9F%E6%97%A5%E6%8F%90%E9%86%92%E8%84%9A%E6%9C%AC/image-20221027153238411.png" alt="远程连接服务器" style="zoom: 67%;" /><p>​这个密码是登录Mysql的密码，<strong>主机名一定要写localhost的</strong></p><img src="/images/%E7%94%9F%E6%97%A5%E6%8F%90%E9%86%92%E8%84%9A%E6%9C%AC/image-20221027153314029.png" alt="远程连接Mysql" style="zoom:67%;" /><h3 id="二、服务器定时执行脚本"><a href="#二、服务器定时执行脚本" class="headerlink" title="二、服务器定时执行脚本"></a>二、服务器定时执行脚本</h3><p>1、安装crontab</p><pre class="line-numbers language-none"><code class="language-none">yum install cronieyum install crontabs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>2、开启crontab服务</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">service crond start <span class="token comment">#启动服务</span><span class="token comment">#其他相关命令</span>service crond stop <span class="token comment">#关闭服务</span>service crond restart <span class="token comment">#重启服务</span>service crond <span class="token builtin">reload</span> <span class="token comment">#重新载入配置</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3、在命令行输入: <code>crontab -e</code>  然后添加相应的任务，<code>:wq</code> 可以保存并退出编辑模式  或是  <code>ctrl+zz</code> 退出</p><p>存放位置在&#x2F;var&#x2F;spool&#x2F;cron&#x2F;root目录下</p><pre class="line-numbers language-none"><code class="language-none">0 7 * * * python3 &#x2F;wxyTest&#x2F;birth.py #每天七点执行* * * * * python3 &#x2F;wxyTest&#x2F;note.py  #每分钟执行一次<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>4、时间的有关语法</p><pre class="line-numbers language-none"><code class="language-none"># Example of job definition:# .---------------- minute (0 - 59)# |  .------------- hour (0 - 23)# |  |  .---------- day of month (1 - 31)# |  |  |  .------- month (1 - 12) OR jan,feb,mar,apr ...# |  |  |  |  .---- day of week (0 - 6) (Sunday&#x3D;0 or 7) OR sun,mon,tue,wed,thu,fri,sat# |  |  |  |  |# *  *  *  *  * command to be executed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="其他学到知识"><a href="#其他学到知识" class="headerlink" title="其他学到知识"></a>其他学到知识</h3><h4 id="1、导出-x2F-下载依赖"><a href="#1、导出-x2F-下载依赖" class="headerlink" title="1、导出&#x2F;下载依赖"></a>1、导出&#x2F;下载依赖</h4><p><strong>第一种方法</strong></p><p>此命令将会列出当前开发环境所有依赖库到requirements.txt文件中，相对较为冗杂。在项目根目录位置，执行：</p><pre class="line-numbers language-none"><code class="language-none">pip freeze &gt; requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>第二种方法</strong></p><p>使用pipreqs，这个工具的好处是可以通过对项目目录的扫描，自动发现使用了那些类库，自动生成依赖清单。缺点是可能会有些偏差，需要检查并自己调整下。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pip install pipreqs<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在项目根目录下运行：<code>pipreqs ./</code>  </p><p>如果是Windows系统，会报编码错误 </p><p>​<code>(UnicodeDecodeError: &#39;gbk&#39; codec can&#39;t decode byte 0xa8 in position 24: illegal multibyte sequence)</code>  </p><p>改成如下命令</p><pre class="line-numbers language-none"><code class="language-none">pipreqs .&#x2F; --encoding&#x3D;utf8<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>生成requirements.txt 文件后，可以根据这个文件下载所有的依赖</p><pre class="line-numbers language-none"><code class="language-none">pip install -r requirements.txt<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="2、查询自己的公网ip"><a href="#2、查询自己的公网ip" class="headerlink" title="2、查询自己的公网ip"></a>2、查询自己的公网ip</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">curl ifconfig<span class="token punctuation">.</span>me  <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="3、服务器改用465端口发送邮件"><a href="#3、服务器改用465端口发送邮件" class="headerlink" title="3、服务器改用465端口发送邮件"></a>3、服务器改用465端口发送邮件</h4><p>服务器会把25端口封掉，防止发送垃圾邮件，改用465端口发送邮件，可以看一下对比</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># server = smtplib.SMTP('smtp.qq.com')</span>server <span class="token operator">=</span> smtplib<span class="token punctuation">.</span>SMTP_SSL<span class="token punctuation">(</span><span class="token string">'smtp.qq.com'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="4、编码路径的三种写法"><a href="#4、编码路径的三种写法" class="headerlink" title="4、编码路径的三种写法"></a>4、编码路径的三种写法</h4><ul><li>在路径前面加r，即保持字符原始值的意思。</li></ul><pre class="line-numbers language-none"><code class="language-none">sys.path.append(r‘c:\Users\mshacxiang\VScode_project\web_ddt‘)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>替换为双反斜杠</li></ul><pre class="line-numbers language-none"><code class="language-none">sys.path.append(‘c:\\Users\\mshacxiang\\VScode_project\\web_ddt‘)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>替换为正斜杠</li></ul><pre class="line-numbers language-none"><code class="language-none">sys.path.append(‘c:&#x2F;Users&#x2F;mshacxiang&#x2F;VScode_project&#x2F;web_ddt‘)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="5、最稳定的青龙面板2-10-2的安装"><a href="#5、最稳定的青龙面板2-10-2的安装" class="headerlink" title="5、最稳定的青龙面板2.10.2的安装"></a>5、最稳定的青龙面板2.10.2的安装</h4><ul><li>安装Doker</li></ul><pre class="line-numbers language-none"><code class="language-none">yum install docker-io –ysudo systemctl start dockersudo systemctl status dockersudo systemctl enable docker<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>拉取镜像</li></ul><pre class="line-numbers language-none"><code class="language-none">docker pull ytong825&#x2F;qinglong:2.10.2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>创建容器&#x2F;多容器更改容器名，注意： <strong>端口是3885 不是5700 已经做了修改</strong></li></ul><pre class="line-numbers language-none"><code class="language-none">docker run -dit \   -v $PWD&#x2F;ql&#x2F;config:&#x2F;ql&#x2F;config \   -v $PWD&#x2F;ql&#x2F;log:&#x2F;ql&#x2F;log \   -v $PWD&#x2F;ql&#x2F;db:&#x2F;ql&#x2F;db \   -v $PWD&#x2F;ql&#x2F;repo:&#x2F;ql&#x2F;repo \   -v $PWD&#x2F;ql&#x2F;raw:&#x2F;ql&#x2F;raw \   -v $PWD&#x2F;ql&#x2F;scripts:&#x2F;ql&#x2F;scripts \   -v $PWD&#x2F;ql&#x2F;jbot:&#x2F;ql&#x2F;jbot \   -p 3885:5700 \   --name qinglong \   --hostname qinglong \   --restart unless-stopped \   ytong825&#x2F;qinglong:2.10.2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>配置相关依赖</li><li>NodeJs</li></ul><pre class="line-numbers language-none"><code class="language-none">crypto-jsprettytabledotenvjsdomdate-fnstough-cookietslibws@7.4.3ts-md5jsdom -gjiebafsform-datajson5global-agentpng-js@types&#x2F;noderequiretypescriptjs-base64axios<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Python3</li></ul><pre class="line-numbers language-none"><code class="language-none">requestscanvasping3jieba<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Linux</li></ul><pre class="line-numbers language-none"><code class="language-none">bizCodebizMsglxml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>拉取KR库</li></ul><pre class="line-numbers language-none"><code class="language-none">ql repo https:&#x2F;&#x2F;gh.fakev.cn&#x2F;KingRan&#x2F;KR.git &quot;jd_|jx_|jdCookie&quot; &quot;activity|backUp&quot; &quot;^jd[^_]|USER|utils|function|sign|sendNotify|ql|JDJR&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="6、删除Docker里的容器"><a href="#6、删除Docker里的容器" class="headerlink" title="6、删除Docker里的容器"></a>6、删除Docker里的容器</h4><ul><li>重启docker</li></ul><pre class="line-numbers language-none"><code class="language-none">systemctl restart docker<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>列出所有容器ID</li></ul><pre class="line-numbers language-none"><code class="language-none">docker ps -aq<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>列出运行的容器ID</li></ul><pre class="line-numbers language-none"><code class="language-none">docker ps<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>停止所有的容器，这样才能够删除其中的镜像</li></ul><pre class="line-numbers language-none"><code class="language-none">docker stop $(docker ps -a -q) 或者 docker stop $(docker ps -aq) <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>删除所有容器指令</li></ul><pre class="line-numbers language-none"><code class="language-none">docker rm $(docker ps -a -q) 或者 docker rm $(docker ps -aq) <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>查看当前镜像</li></ul><pre class="line-numbers language-none"><code class="language-none">docker images<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>删除镜像，通过镜像的id来指定删除</li></ul><pre class="line-numbers language-none"><code class="language-none">docker rmi &lt;image id&gt;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>强制删除全部镜像</li></ul><pre class="line-numbers language-none"><code class="language-none">docker rmi -f $(docker images -q)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>树-算法专题</title>
      <link href="/2021/10/20/%E6%A0%91-%E7%AE%97%E6%B3%95%E4%B8%93%E9%A2%98/"/>
      <url>/2021/10/20/%E6%A0%91-%E7%AE%97%E6%B3%95%E4%B8%93%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h2 id="二叉树的最大深度"><a href="#二叉树的最大深度" class="headerlink" title="二叉树的最大深度"></a>二叉树的最大深度</h2><h3 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h3><ul><li><a href="https://leetcode.cn/problems/maximum-depth-of-binary-tree/">二叉树的最大深度</a></li></ul><h3 id="相关题目"><a href="#相关题目" class="headerlink" title="相关题目"></a>相关题目</h3><p>给定一个二叉树，找出其最大深度。</p><p>二叉树的深度为根节点到最远叶子节点的最长路径上的节点数。</p><p><strong>说明:</strong> 叶子节点是指没有子节点的节点。</p><p><strong>示例:</strong> 给定二叉树 <code>[3,9,20,null,null,15,7]</code>，返回它的最大深度 3 。</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">  3 / \9  20  /  \ 15   7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="写法1"><a href="#写法1" class="headerlink" title="写法1"></a>写法1</h4><ul><li>递归的参数：根结点与递归的层数</li><li>返回条件是：当前为叶子节点 或是 返回左右子树的深度最大值</li><li>进行递归的条件是：左右子树不为空</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">class Solution <span class="token punctuation">&#123;</span>public<span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> cnt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left <span class="token operator">==</span> nullptr <span class="token operator">&amp;&amp;</span> root<span class="token operator">-></span>right <span class="token operator">==</span> nullptr<span class="token punctuation">)</span> <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>        <span class="token keyword">int</span> l <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span>  l <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> cnt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span> r <span class="token operator">=</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span> cnt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="写法2"><a href="#写法2" class="headerlink" title="写法2"></a>写法2</h4><p>但是写法1太过冗余，可以继续进行精简</p><ul><li>递归的参数：根结点与递归的层数，需要注意：<ul><li>如果初始传入递归层数参数为1，当递归到空节点时应该为返回上一层的层数，结束条件应该为return cnt - 1;</li><li>如果初始递归层数参数为0，当递归到空节点时正好为返回当层的层数，结束条件应该为return cnt；</li></ul></li><li>返回条件是：当前节点为空节点 或是 返回左右子树的深度最大值</li><li>递归的条件可以进行取消，因为节点为空节点才进行返回</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c">class Solution <span class="token punctuation">&#123;</span>public<span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> cnt<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> cnt<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> cnt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span> cnt <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="写法3"><a href="#写法3" class="headerlink" title="写法3"></a>写法3</h4><p>写法2仍然多定义了dfs函数，显得冗余，可以不定义dfs函数，将cnt层数这个参数提取出来，直接在maxDepth进行递归。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">class Solution <span class="token punctuation">&#123;</span>public<span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token function">maxDepth</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二叉树每层的最大值"><a href="#二叉树每层的最大值" class="headerlink" title="二叉树每层的最大值"></a>二叉树每层的最大值</h2><h3 id="相关链接-1"><a href="#相关链接-1" class="headerlink" title="相关链接"></a>相关链接</h3><ul><li><a href="https://leetcode.cn/problems/hPov7L/">二叉树每层的最大值</a></li></ul><h3 id="相关题目-1"><a href="#相关题目-1" class="headerlink" title="相关题目"></a>相关题目</h3><p>给定一棵二叉树的根节点 <code>root</code> ，请找出该二叉树中每一层的最大值。</p><p><strong>示例1：</strong></p><pre class="line-numbers language-none"><code class="language-none">输入: root &#x3D; [1,3,2,5,3,null,9]输出: [1,3,9]解释:          1         &#x2F; \        3   2       &#x2F; \   \        5   3   9 <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="解题思路-1"><a href="#解题思路-1" class="headerlink" title="解题思路"></a>解题思路</h3><h4 id="写法1-1"><a href="#写法1-1" class="headerlink" title="写法1"></a>写法1</h4><p>深度优先遍历，思路与求二叉树最大值一样，但是多传递一个h参数表示当前的高度，通过当时h来找到此时这层高度存储的最大值，进行比较。需要注意的是，当第一次结果数组等于树的高度时候，要在结果数组内放入当前元素，以后才能通过下标访问！</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">class Solution <span class="token punctuation">&#123;</span>public<span class="token operator">:</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token operator">&amp;</span> res<span class="token punctuation">,</span> TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span> <span class="token keyword">int</span> h<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> h<span class="token punctuation">)</span> res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>root<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        res<span class="token punctuation">[</span>h<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>h<span class="token punctuation">]</span><span class="token punctuation">,</span> root<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">)</span> <span class="token function">dfs</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> root<span class="token operator">-></span>left<span class="token punctuation">,</span> h <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">)</span>  <span class="token function">dfs</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> root<span class="token operator">-></span>right<span class="token punctuation">,</span> h <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">largestValues</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> root<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="写法2-1"><a href="#写法2-1" class="headerlink" title="写法2"></a>写法2</h4><p>广度优先遍历，与深度优先遍历一个一个比较不同的是，广度优先遍历是通过一层一层的比较的</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">class Solution <span class="token punctuation">&#123;</span>public<span class="token operator">:</span>    vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> <span class="token function">largestValues</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        vector<span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span> res<span class="token punctuation">;</span>        queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> q<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> len <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> MAX <span class="token operator">=</span> INT_MIN<span class="token punctuation">;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>len<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">auto</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                MAX <span class="token operator">=</span> <span class="token function">max</span><span class="token punctuation">(</span>MAX<span class="token punctuation">,</span> t<span class="token operator">-></span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">-></span>left<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">-></span>right<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            res<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span>MAX<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> res<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二叉树最底层最左边的值"><a href="#二叉树最底层最左边的值" class="headerlink" title="二叉树最底层最左边的值"></a>二叉树最底层最左边的值</h2><h3 id="相关链接-2"><a href="#相关链接-2" class="headerlink" title="相关链接"></a>相关链接</h3><ul><li><a href="https://leetcode.cn/problems/LwUNpT/">二叉树最底层最左边的值</a></li></ul><h3 id="相关题目-2"><a href="#相关题目-2" class="headerlink" title="相关题目"></a>相关题目</h3><p>给定一个二叉树的 <strong>根节点</strong> <code>root</code>，请找出该二叉树的 <strong>最底层 最左边</strong> 节点的值。</p><p>假设二叉树中至少有一个节点。</p><p><strong>示例1：</strong></p><img src="/images/%E6%A0%91-%E7%AE%97%E6%B3%95%E4%B8%93%E9%A2%98/image-20221101100946583.png" alt="示例1" style="zoom: 50%;box-shadow:rgba(0,0,0,0) 0 0px 0px 0px;" /><pre class="line-numbers language-none"><code class="language-none">输入: root &#x3D; [2,1,3]输出: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>示例2：</strong></p><img src="/images/%E6%A0%91-%E7%AE%97%E6%B3%95%E4%B8%93%E9%A2%98/image-20221101101037177.png" alt="示例2" style="zoom:55%;box-shadow:rgba(0,0,0,0) 0 0px 0px 0px;" /><pre class="line-numbers language-none"><code class="language-none">输入: [1,2,3,4,null,5,6,null,null,7]输出: 7<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="解答思路"><a href="#解答思路" class="headerlink" title="解答思路"></a>解答思路</h3><h4 id="写法1-2"><a href="#写法1-2" class="headerlink" title="写法1"></a>写法1</h4><p>深度优先遍历：当最大高度超过当前高度后才开始更新 最底层 最左边 的值</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">class Solution <span class="token punctuation">&#123;</span>public<span class="token operator">:</span>    <span class="token keyword">int</span> cur_val <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> max_h <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">,</span><span class="token keyword">int</span> h<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>root<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>         h<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>left<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token operator">-></span>right<span class="token punctuation">,</span> h<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>h <span class="token operator">></span> max_h<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            max_h <span class="token operator">=</span> h<span class="token punctuation">;</span>            cur_val <span class="token operator">=</span> root<span class="token operator">-></span>val<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> <span class="token function">findBottomLeftValue</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">dfs</span><span class="token punctuation">(</span>root<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> cur_val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>需要注意的是</strong></p><p><code>h++</code>应该写在遍历左右子树之前，不应该在<code>dfs(root-&gt;left, ++h);dfs(root-&gt;right, ++h);</code>，后者会在遍历左子树后再加左子树的高度上加1，导致错误。</p><h4 id="写法2-2"><a href="#写法2-2" class="headerlink" title="写法2"></a>写法2</h4><p>在遍历一个节点时，需要先把它的非空右子节点放入队列，然后再把它的非空左子节点放入队列，这样才能保证从右到左遍历每一层的节点。广度优先搜索所遍历的最后一个节点的值就是最底层最左边节点的值。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">class Solution <span class="token punctuation">&#123;</span>public<span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findBottomLeftValue</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        queue<span class="token operator">&lt;</span>TreeNode<span class="token operator">*</span><span class="token operator">></span> q<span class="token punctuation">;</span>        q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> val<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>q<span class="token punctuation">.</span><span class="token function">empty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            TreeNode<span class="token operator">*</span> t <span class="token operator">=</span> q<span class="token punctuation">.</span><span class="token function">front</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            q<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            val <span class="token operator">=</span> t<span class="token operator">-></span>val<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">-></span>right<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">-></span>left<span class="token punctuation">)</span> q<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>t<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> val<span class="token punctuation">;</span>     <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h4><p>二叉树的 <strong>最底层 最左边</strong> 节点的值不一定就是<strong>最左边</strong>的点，如示例2所示，最左边的点为4，最底层最左边点为 7</p><img src="/images/%E6%A0%91-%E7%AE%97%E6%B3%95%E4%B8%93%E9%A2%98/image-20221101101037177.png" alt="示例2" style="zoom:55%;box-shadow:rgba(0,0,0,0) 0 0px 0px 0px;" /><p>求最左边的点代码如下，可以出题为<strong>返回先序遍历的第一个点</strong></p><pre class="line-numbers language-c" data-language="c"><code class="language-c">class Solution <span class="token punctuation">&#123;</span>public<span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findBottomLeftValue</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> t <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">-></span>left <span class="token operator">||</span> t<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">-></span>left<span class="token punctuation">)</span> t <span class="token operator">=</span> t<span class="token operator">-></span>left<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> t<span class="token operator">-></span>val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是<strong>返回后序遍历的第一个点，</strong>求法如下：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">class Solution <span class="token punctuation">&#123;</span>public<span class="token operator">:</span>    <span class="token keyword">int</span> <span class="token function">findBottomLeftValue</span><span class="token punctuation">(</span>TreeNode<span class="token operator">*</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> t <span class="token operator">=</span> root<span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">-></span>left <span class="token operator">||</span> t<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">while</span><span class="token punctuation">(</span>t<span class="token operator">-></span>left<span class="token punctuation">)</span> t <span class="token operator">=</span> t<span class="token operator">-></span>left<span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>t<span class="token operator">-></span>right<span class="token punctuation">)</span> t <span class="token operator">=</span> t<span class="token operator">-></span>right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> t<span class="token operator">-></span>val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 树 </category>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 树 </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
