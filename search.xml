<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>数据分析实战45讲</title>
      <link href="/2022/10/24/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/"/>
      <url>/2022/10/24/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="数据分析实战45讲"><a href="#数据分析实战45讲" class="headerlink" title="数据分析实战45讲"></a>数据分析实战45讲</h1><h2 id="数据全景图"><a href="#数据全景图" class="headerlink" title="数据全景图"></a>数据全景图</h2><h3 id="一、数据采集"><a href="#一、数据采集" class="headerlink" title="一、数据采集"></a>一、数据采集</h3><p>​数据源 ：开源数据源、爬虫抓取、日志采集、传感器</p><p>​工具使用：火车采集器、八爪鱼、搜集客</p><ul><li><p><a href="http://www.locoy.com/">火车采集器 </a>不仅可以做抓取工具，也可以做数据清洗、数据分析、数据挖掘和可视化等工作。数据源适用于绝大部分的网页，网页中能看到的内容都可以通过采集规则进行抓取。</p></li><li><p><a href="http://www.bazhuayu.com/">八爪鱼</a>    是知名的采集工具，它有两个版本，一个就是免费的采集模板，还有一个就是云采集（付费）。</p><p>免费的采集模板实际上就是内容采集规则，包括了电商类、生活服务类、社交媒体类和论坛类的网站都可以采集，用起来非常方便。</p><p>云采集就是当你配置好采集任务，就可以交给八爪鱼的云端进行采集。八爪鱼一共有5000台服务器，通过云端多节点并发采集，采集速度远远超过本地采集。此外还可以自动切换多个 IP，避免IP被封，影响采集。做过工程项目的同学应该能体会到，云采集这个功能太方便了，很多时候自动切换IP以及云采集才是自动化采集的关键。</p></li><li><p><a href="http://www.gooseeker.com/">集搜客</a>   这个工具的特点是完全可视化操作，无需编程。整个采集过程也是所见即所得，抓取结果信息、错误信息等都反应在软件中。相比于八爪鱼来说，集搜客没有流程的概念，用户只需要关注抓取什么数据，而流程细节完全交给集搜客来处理。但是集搜客的缺点是没有云采集功能，所有爬虫都是在用户自己电脑上跑的。</p></li></ul><h3 id="二、数据挖掘"><a href="#二、数据挖掘" class="headerlink" title="二、数据挖掘"></a>二、数据挖掘</h3><p>​找到其中的规律，来指导公司业务，数据挖掘的核心是挖掘数据的商业价值</p><ol><li>商业理解：数据挖掘不是我们的目的，我们的目的是更好地帮助业务，所以首先要从商业的角度理解项目需求，在这个基础上，再对数据挖掘的目标进行定义。 </li><li>数据理解：尝试收集部分数据，然后对数据进行探索，包括数据描述、数据质量验证等，这有助于你对收集的数据有个初步的认知。 </li><li>数据准备：开始收集数据，并对数据进行清洗、数据集成等操作，完成数据挖掘前的准备工作。 </li><li>模型建立：选择和应用各种数据挖掘模型，并进行优化，以便得到更好的分类结果。 </li><li>模型评估：对模型进行评价，并检查构建模型的每个步骤，确认模型是否实现了预定的 商业目标。 </li><li>上线发布：模型的作用是从数据中找到金矿，也就是我们所说的“知识”，获得的知识需要转化成用户可以使用的方式，数据挖掘结果如果是日常运营的一部分，那么后续的监控和维护就会变得重要。</li></ol><h3 id="三、数据可视化"><a href="#三、数据可视化" class="headerlink" title="三、数据可视化"></a>三、数据可视化</h3><p>第一种：使用 Python，在 Python 对数据进行清洗、挖掘的过程中，我们可以使用 Matplotlib、Seaborn 等第三方库进行呈现。 </p><p>第二种：直接使用第三方工具。如果你已经生成了 csv 格式文件，可以采用微图、DataV、Data GIF Maker 等第三方工具。</p><h2 id="数据分析的概念"><a href="#数据分析的概念" class="headerlink" title="数据分析的概念"></a>数据分析的概念</h2><h3 id="陈旸白话数据概念"><a href="#陈旸白话数据概念" class="headerlink" title="陈旸白话数据概念"></a>陈旸白话数据概念</h3><h4 id="1、商业智能、数据仓库、数据挖掘"><a href="#1、商业智能、数据仓库、数据挖掘" class="headerlink" title="1、商业智能、数据仓库、数据挖掘"></a>1、商业智能、数据仓库、数据挖掘</h4><p>比如你认识了两个漂亮的女孩。</p><p><strong>商业智能</strong>会告诉你要追哪个？成功概率有多大？</p><p><strong>数据仓库</strong>会说，我这里存储了这两个女孩的相关信息，你要吗？</p><p>其中每个女孩的数据都有单独的文件夹，里面有她们各自的姓名、生日、喜好和联系方式等，这些具体的信息就是<strong>数据元</strong>，加起来叫作<strong>元数据</strong>。</p><p><strong>数据挖掘</strong>会帮助你确定追哪个女孩，并且整理好数据仓库，这里就可以使用到各种算法，帮你做决策了。</p><h4 id="2、数据挖掘中的类型"><a href="#2、数据挖掘中的类型" class="headerlink" title="2、数据挖掘中的类型"></a>2、数据挖掘中的类型</h4><p>你可能会用到<strong>分类算法</strong>。御姐、萝莉、女王，她到底属于哪个分类？</p><p>如果认识的女孩太多了，多到你已经数不过来了，比如说5万人！你就可以使用<strong>聚类算法</strong>了，它帮你把这些女孩分成多个群组，比如5个组。然后再对每个群组的特性进行了解，进行决策。这样就把5万人的决策，转化成了5个组的决策。成功实现降维，大大提升了效率。</p><p>如果你想知道这个女孩的闺蜜是谁，那么<strong>关联分析算法</strong>可以告诉你。</p><h4 id="3、数据预处理中的术语"><a href="#3、数据预处理中的术语" class="headerlink" title="3、数据预处理中的术语"></a>3、数据预处理中的术语</h4><p>如果你的数据来源比较多，比如有很多朋友给你介绍女朋友，很多人都推荐了同一个，你就需要去重，这叫<strong>数据清洗</strong>；</p><p>为了方便记忆，你把不同朋友推荐的女孩信息合成一个，这叫<strong>数据集成</strong>；</p><p>有些数据渠道统计的体重的单位是公斤，有些是斤，你就需要将它们转换成同一个单位，这叫<strong>数据变换。</strong></p><p>最后你可以进行数据可视化了，它会直观地把你想要的结果呈现出来。</p><h3 id="用户画像建模"><a href="#用户画像建模" class="headerlink" title="用户画像建模"></a>用户画像建模</h3><h4 id="1、设计唯一标识"><a href="#1、设计唯一标识" class="headerlink" title="1、设计唯一标识"></a>1、设计唯一标识</h4><p>​<strong>用户唯一标识是整个用户画像的核心</strong>。我们以一个App为例，它把“从用户开始使用APP到下单到售后整个所有的用户行为”进行串联，这样就可以更好地去跟踪和分析一个用户的特征。设计唯一标识可以从这些项中选择：用户名、注册手机号、联系人手机号、邮箱、设备号、CookieID等。</p><h4 id="2、用户标签化"><a href="#2、用户标签化" class="headerlink" title="2、用户标签化"></a>2、用户标签化</h4><ul><li>用户标签：它包括了性别、年龄、地域、收入、学历、职业等。这些包括了用户的基础属性。</li><li>消费标签：消费习惯、购买意向、是否对促销敏感。这些统计分析用户的消费习惯。</li><li>行为标签：时间段、频次、时长、访问路径。这些是通过分析用户行为，来得到他们使用App的习惯。</li><li>内容分析：对用户平时浏览的内容，尤其是停留时间长、浏览次数多的内容进行分析，分析出用户对哪些内容感兴趣，比如，金融、娱乐、教育、体育、时尚、科技等。</li></ul><h4 id="3、赋能业务价值"><a href="#3、赋能业务价值" class="headerlink" title="3、赋能业务价值"></a>3、赋能业务价值</h4><ul><li>获客：如何进行拉新，通过更精准的营销获取客户。</li><li>粘客：个性化推荐，搜索排序，场景运营等。</li><li>留客：流失率预测，分析关键节点降低流失率。</li></ul><h4 id="4、以美团为例"><a href="#4、以美团为例" class="headerlink" title="4、以美团为例"></a>4、以美团为例</h4><ul><li><p>手机号是唯一标识</p></li><li><p>用户标签：性别、年龄、家乡、居住地、收货地址、婚姻、宝宝信息、通过何种渠道进行的注册。</p></li><li><p>消费标签：餐饮口味、消费均价、团购等级、预定使用等级、排队使用等级、外卖等级。</p></li><li><p>行为标签：点外卖时间段、使用频次、平均点餐用时、访问路径。</p></li><li><p>内容分析：基于用户平时浏览的内容进行统计，包括餐饮口味、优惠敏感度等。</p></li><li><p>在获客上，我们可以找到优势的宣传渠道，如何通过个性化的宣传手段，吸引有潜在需求的用户，并刺激其转化。</p></li><li><p>在粘客上，如何提升用户的单价和消费频次，方法可以包括购买后的个性化推荐、针对优质用户进行优质高价商品的推荐、以及重复购买，比如通过红包、优惠等方式激励对优惠敏感的人群，提升购买频次。</p></li><li><p>留客上，预测用户是否可能会从平台上流失。在营销领域，关于用户留存有一个观点——如果将顾客流失率降低5%，公司利润将提升25%~85%。可以看出留存率是多么的重要。用户流失可能会包括多种情况，比如用户体验、竞争对手、需求变化等，通过预测用户的流失率可以大幅降低用户留存的运营成本。</p></li></ul><h2 id="NumPy"><a href="#NumPy" class="headerlink" title="NumPy"></a>NumPy</h2><p>​标准的 Python 中，用列表list 保存数组的数值。由于列表中的元素可以是任意 的对象，所以列表中 list 保存的是对象的指针。虽然在 Python 编程中隐去了指针的概 念，但是数组有指针，Python 的列表 list 其实就是数组。这样如果我要保存一个简单的数组 [0,1,2]，就需要有 3 个指针和 3 个整数的对象，这样对于 Python 来说是非常不经济的，浪费了内存和计算时间。</p><p>​为什么使用 NumPy 让你的 Python 科学计算更高效</p><ol><li>列表 list 的元素 在系统内存中是分散存储的，而 NumPy 数组存储在一个均匀连续的内存块中。这样数组计算遍历所有的元素，不像列表 list 还需要对内存地址进行查找，从而节省了计算资源。</li><li>在内存访问模式中，缓存会直接把字节块从 RAM 加载到 CPU 寄存器中。因为数据连续的存储在内存中，NumPy 直接利用现代 CPU 的矢量化指令计算，加载寄存器中的多个连续浮点数。</li><li>另外 NumPy 中的矩阵计算可以采用多线程的方式，充分利用多核 CPU 计算资源，大大提升了计算效率</li></ol><p>在 NumPy 里有两个重要的对象： ndarray解决了多维数组问题，而 ufunc则是解决对数组进行处理的函数。</p><h3 id="Ndarray"><a href="#Ndarray" class="headerlink" title="Ndarray"></a>Ndarray</h3><p>​Ndarray全称为N-dimensional array object, 实际上是多维数组的含义。在 NumPy 数组中，维数称为秩（rank），一维数组 的秩为 1，二维数组的秩为 2，以此类推。在 NumPy 中，每一个线性的数组称为一个轴 （axes），其实秩就是描述轴的数量。</p><p>​可以通过函数 shape 属性获得数组的大小，通过 dtype 获得元素的属性，</p><h4 id="Shape-amp-dtype"><a href="#Shape-amp-dtype" class="headerlink" title="Shape&amp;dtype"></a>Shape&amp;dtype</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> npa <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">10</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>shape<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>dtype<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-txt" data-language="txt"><code class="language-txt">(3,)(3, 3)int32[[ 1  2  3] [ 4 10  6] [ 7  8  9]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="结构数组"><a href="#结构数组" class="headerlink" title="结构数组"></a>结构数组</h4><p>​如果你想统计一个班级里面学生的姓名、年龄，以及语文、英语、数学成绩该怎么办？当然你可以用数组的下标来代表不同的字段，比如下标为 0 是姓名、下标为1是年龄等，但是这样不显性，此时便可以使用Numpy中的结构数组。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">persontype <span class="token operator">=</span> np<span class="token punctuation">.</span>dtype<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'names'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'name'</span><span class="token punctuation">,</span> <span class="token string">'age'</span><span class="token punctuation">,</span> <span class="token string">'chinese'</span><span class="token punctuation">,</span> <span class="token string">'math'</span><span class="token punctuation">,</span> <span class="token string">'english'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'formats'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'S32'</span><span class="token punctuation">,</span><span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'i'</span><span class="token punctuation">,</span> <span class="token string">'f'</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>peoples <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token string">"ZhangFei"</span><span class="token punctuation">,</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"GuanYu"</span><span class="token punctuation">,</span><span class="token number">24</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">96</span><span class="token punctuation">,</span><span class="token number">88.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>          <span class="token punctuation">(</span><span class="token string">"ZhaoYun"</span><span class="token punctuation">,</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">92</span><span class="token punctuation">,</span><span class="token number">96.5</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token string">"HuangZhong"</span><span class="token punctuation">,</span><span class="token number">29</span><span class="token punctuation">,</span><span class="token number">65</span><span class="token punctuation">,</span><span class="token number">85</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>persontype<span class="token punctuation">)</span>ages <span class="token operator">=</span> peoples<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'age'</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>ages<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>ages<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">[32 24 28 29]28.25<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Ufunc"><a href="#Ufunc" class="headerlink" title="Ufunc"></a>Ufunc</h3><h4 id="加、减、乘、除、指数、取余"><a href="#加、减、乘、除、指数、取余" class="headerlink" title="加、减、乘、除、指数、取余"></a>加、减、乘、除、指数、取余</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#arange 通过指定初始值、终值、步长来创建等差数列的一维数组，默认不包括终值</span>x1 <span class="token operator">=</span> np<span class="token punctuation">.</span>arange<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#linspace 通过指定初始值、终值、元素个数来创建等差数列的一维数组，默认是包括终值的</span>x2 <span class="token operator">=</span> np<span class="token punctuation">.</span>linspace<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>add<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#加</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>subtract<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#减</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>multiply<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment">#乘</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>divide<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#除</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>power<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#指数</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>mod<span class="token punctuation">(</span>x1<span class="token punctuation">,</span> x2<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#取余</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">[1 3 5 7 9][1. 3. 5. 7. 9.][ 2.  6. 10. 14. 18.][0. 0. 0. 0. 0.][ 1.  9. 25. 49. 81.][1. 1. 1. 1. 1.][1.00000000e+00 2.70000000e+01 3.12500000e+03 8.23543000e+05 3.87420489e+08][0. 0. 0. 0. 0.]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="最大值、最小值"><a href="#最大值、最小值" class="headerlink" title="最大值、最小值"></a>最大值、最小值</h4><p>amin() 用于计算数组中的元素沿指定轴的最小值, amax()同理。</p><p>amin(a,0) 是延着 axis&#x3D;0 轴的最小值，axis&#x3D;0 轴是把元素看成了 [1,4,7], [2,5,8], [3,6,9] 三个元素。</p><p>amin(a,1) 是延着 axis&#x3D;1 轴的最小值，axis&#x3D;1 轴是把元素看成了 [1,2,3], [4,5,6], [7,8,9] 三个元素。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>amin<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>amin<span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>amin<span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">1[1 2 3][1 4 7]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="最大值与最小值之差"><a href="#最大值与最小值之差" class="headerlink" title="最大值与最小值之差"></a>最大值与最小值之差</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>ptp<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>ptp<span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>ptp<span class="token punctuation">(</span>a<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">a &#x3D; np.array([[1,2,3], [4,5,6], [7,8,9]])print(np.ptp(a))print(np.ptp(a,0))print(np.ptp(a,1))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="统计数组的百分位数-amp-中位数"><a href="#统计数组的百分位数-amp-中位数" class="headerlink" title="统计数组的百分位数&amp;中位数"></a>统计数组的百分位数&amp;中位数</h4><p>percentile() 代表着第 p 个百分位数，这里 p 的取值范围是 0-100，如果 p&#x3D;0， 那么就是求最小值，如果 p&#x3D;50 就是求平均值，如果 p&#x3D;100 就是求最大值。同样你也可 以求得在 axis&#x3D;0 和 axis&#x3D;1 两个轴上的 p% 的百分位数。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>percentile<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>percentile<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>percentile<span class="token punctuation">(</span>a<span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># 求中位数</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>median<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>median<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>median<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">5.0[4. 5. 6.][2. 5. 8.]# 求中位数5.0[4. 5. 6.][2. 5. 8.]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="统计数组中的加权平均值"><a href="#统计数组中的加权平均值" class="headerlink" title="统计数组中的加权平均值"></a>统计数组中的加权平均值</h4><p>average() 函数可以求加权平均，加权平均的意思就是每个元素可以设置个权重，默认情况下每个元素的权重是相同的，所以 np.average(a)&#x3D;(1+2+3+4)&#x2F;4&#x3D;2.5，你也可以指定 权重数组 wts&#x3D;[1,2,3,4]，这样加权平均 np.average(a,weights&#x3D;wts)&#x3D; (1<em>1+2</em>2+3<em>3+4</em>4)&#x2F;(1+2+3+4)&#x3D;3.0。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>wts <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>average<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>average<span class="token punctuation">(</span>a<span class="token punctuation">,</span>weights<span class="token operator">=</span>wts<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">2.53.0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="统计数组中的标准差、方差"><a href="#统计数组中的标准差、方差" class="headerlink" title="统计数组中的标准差、方差"></a>统计数组中的标准差、方差</h4><p>方差的计算是指每个数值与平均值之差的平方求和的平均值，即 mean((x - x.mean())** 2)。标准差是方差的算术平方根。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>std<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#标准差</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>var<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#方差</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">1.1180339887498951.25<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p>sort(a, axis&#x3D;-1, kind&#x3D;‘quicksort’, order&#x3D;None)；</p><ul><li><p>kind 字段：默认情况下使 用的是快速排序，可以指定 quicksort、mergesort、heapsort 分别表示快速排序、合并排序、堆排序。</p></li><li><p>axis 字段：默认是 -1，即沿着数组的最后一个轴进行排序， 也可以取不同的 axis 轴，或者 axis&#x3D;None 代表采用扁平化的方式作为一个向量进行排序。</p></li><li><p>order 字段：对于结构化的数组可以指定按照某个字段进行排序。</p></li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">a <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>np<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>a<span class="token punctuation">,</span> axis<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">[[2 3 4][1 2 4]][1 2 2 3 4 4][[2 3 1][4 4 2]][[2 3 4][1 2 4]]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Pandas"><a href="#Pandas" class="headerlink" title="Pandas"></a>Pandas</h2><p>在数据分析工作中，Pandas 的使用频率是很高的，一方面是因为 Pandas 提供的基础数据结构DataFrame 与 json 的契合度很高，转换起来就很方便。另一方面，如果我们数据清理工作不是很复杂的话，通常用几句 Pandas 代码就可以对数据进行规整。</p><p>Series 和 DataFrame 这两个核心数据结构，他们分别代表着一维的序列和二维的表结构。基于这两种数据结构，Pandas 可以对数据进行导入、清洗、处理、 统计和输出。</p><h3 id="Series"><a href="#Series" class="headerlink" title="Series"></a>Series</h3><p>Series 是个定长的字典序列。说是定长是因为在存储的时候，相当于两个 ndarray，这也是和字典结构最大的不同。因为在字典的结构里，元素的个数是不固定的。 </p><p>Series有两个基本属性：index 和 values。在 Series 结构中，index 默认是 0,1,2,……递增的整数序列，当然我们也可以自己来指定索引，比如 index&#x3D;[‘a’, ‘b’, ‘c’, ‘d’]。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> pandas <span class="token keyword">import</span> Series<span class="token punctuation">,</span> DataFramex1 <span class="token operator">=</span> Series<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>x2 <span class="token operator">=</span> Series<span class="token punctuation">(</span>data<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">0    11    22    33    4dtype: int64a    1b    2c    3d    4dtype: int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们也可以采用字典的方式来创建 Series</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">d <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'a'</span><span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">&#125;</span>x3 <span class="token operator">=</span> Series<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">a    1b    2c    3d    4dtype: int64<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DataFrame"><a href="#DataFrame" class="headerlink" title="DataFrame"></a>DataFrame</h3><p><strong>DataFrame 类型数据结构类似数据库表。</strong> </p><p>它包括了行索引和列索引，我们可以将 DataFrame 看成是由相同索引的 Series 组成的字 典类型。</p><p>一般会用 df, df1, df2 这些作为 DataFrame 数据类型的变量名，以例子中的 df2 为例，列索引是 [‘English’, ‘Math’, ‘Chinese’]，行索引是 [‘ZhangFei’, ‘GuanYu’, ‘ZhaoYun’, ‘HuangZhong’, ‘DianWei’]。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'Chinese'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span><span class="token number">80</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'English'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'Math'</span><span class="token punctuation">:</span> <span class="token punctuation">[</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span>df1<span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">)</span>df2 <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>data<span class="token punctuation">,</span> index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'ZhangFei'</span><span class="token punctuation">,</span> <span class="token string">'GuanYu'</span><span class="token punctuation">,</span> <span class="token string">'ZhaoYun'</span><span class="token punctuation">,</span> <span class="token string">'HuangZhong'</span><span class="token punctuation">,</span> <span class="token string">'DianWei'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'English'</span><span class="token punctuation">,</span> <span class="token string">'Math'</span><span class="token punctuation">,</span> <span class="token string">'Chinese'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none"> Chinese  English  Math0       66       65    301       95       85    982       93       92    963       90       88    774       80       90    90            English  Math  ChineseZhangFei         65    30       66GuanYu           85    98       95ZhaoYun          92    96       93HuangZhong       88    77       90DianWei          90    90       80<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="用DataFranme进行数据处理"><a href="#用DataFranme进行数据处理" class="headerlink" title="用DataFranme进行数据处理"></a>用DataFranme进行数据处理</h3><h4 id="1、数据导入和输出"><a href="#1、数据导入和输出" class="headerlink" title="1、数据导入和输出"></a>1、数据导入和输出</h4><p>需要先下载依赖</p><pre class="line-numbers language-none"><code class="language-none">pip installxlrdpip installopenpyxl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>将data.xlsx放在Jupyter目录下,默认为 C:\Users\${用户名}</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">score <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span>pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">'data.xlsx'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>score<span class="token punctuation">.</span>to_excel<span class="token punctuation">(</span><span class="token string">'data1.xlsx'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>score<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="2、数据清洗"><a href="#2、数据清洗" class="headerlink" title="2、数据清洗"></a>2、数据清洗</h4><p>以上文df2为例</p><p><strong>删除 DataFrame 中的不必要的列或行</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df2 <span class="token operator">=</span> df2<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Chinese'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>df2 <span class="token operator">=</span> df2<span class="token punctuation">.</span>drop<span class="token punctuation">(</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'ZhangFei'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>重命名列名 columns，让列表名更容易识别</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df2<span class="token punctuation">.</span>rename<span class="token punctuation">(</span>columns<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'Chinese'</span><span class="token punctuation">:</span> <span class="token string">'YuWen'</span><span class="token punctuation">,</span> <span class="token string">'English'</span><span class="token punctuation">:</span> <span class="token string">'Yingyu'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> inplace <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>去除重复的值</strong></p><p>不是字段名相同就去除，而是这个字段里面的数组一样才去除</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df <span class="token operator">=</span> df2<span class="token punctuation">.</span>drop_duplicates<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#去除重复行</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><strong>更改数据格式</strong></p><p>把 Chinese 字段的值改成 str 类型，或者 int64 可以这么写</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df2<span class="token punctuation">[</span><span class="token string">'Chinese'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">'str'</span><span class="token punctuation">)</span>df2<span class="token punctuation">[</span><span class="token string">'Chinese'</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>int64<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><strong>数据间的空格</strong></p><p>有时候我们先把格式转成了 str 类型，是为了方便对数据进行操作，这时想要删除数据间的空格或字符，我们就可以使用 strip 函数</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 删除左右两边空格</span>df2<span class="token punctuation">[</span><span class="token string">'Chinese'</span><span class="token punctuation">]</span><span class="token operator">=</span>df2<span class="token punctuation">[</span><span class="token string">'Chinese'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>strip<span class="token punctuation">)</span><span class="token comment"># 删除左边空格</span>df2<span class="token punctuation">[</span><span class="token string">'Chinese'</span><span class="token punctuation">]</span><span class="token operator">=</span>df2<span class="token punctuation">[</span><span class="token string">'Chinese'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>lstrip<span class="token punctuation">)</span><span class="token comment"># 删除右边空格</span>df2<span class="token punctuation">[</span><span class="token string">'Chinese'</span><span class="token punctuation">]</span><span class="token operator">=</span>df2<span class="token punctuation">[</span><span class="token string">'Chinese'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">)</span><span class="token comment"># 删除其中的$符号</span>df2<span class="token punctuation">[</span><span class="token string">'Chinese'</span><span class="token punctuation">]</span><span class="token operator">=</span>df2<span class="token punctuation">[</span><span class="token string">'Chinese'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'$'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>大小写转换</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#全部大写</span>df2<span class="token punctuation">.</span>columns <span class="token operator">=</span> df2<span class="token punctuation">.</span>columns<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>upper<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#全部小写</span>df2<span class="token punctuation">.</span>columns <span class="token operator">=</span> df2<span class="token punctuation">.</span>columns<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#首字母大写</span>df2<span class="token punctuation">.</span>columns <span class="token operator">=</span> df2<span class="token punctuation">.</span>columns<span class="token punctuation">.</span><span class="token builtin">str</span><span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>查找空值</strong></p><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221025092409470.png" alt="表结构" style="zoom:50%;" /><p>针对数据表df使用df.isnull()</p><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221025092428614.png" alt="针对数据表df使用df.isnull()" style="zoom:50%;" /><p>针对某列使用df.isnull().any()</p><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221025092518068.png" alt="针对某列使用df.isnull().any()" style="zoom:67%;" /><p><strong>使用 apply 函数对数据进行清洗</strong></p><p>​apply 函数是 Pandas 中自由度非常高的函数，使用频率也非常高。</p><p>​我们也可以定义个函数，在 apply中进行使用。比如定义 double_df 函数是将原来的数值 *2 进行返回。然后对 df1 中的“语文”列的数值进行 *2 处理，可以写成：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">double_df</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token number">2</span><span class="token operator">*</span>xdf1<span class="token punctuation">[</span><span class="token string">u'语文'</span><span class="token punctuation">]</span> <span class="token operator">=</span> df1<span class="token punctuation">[</span><span class="token string">u'语文'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin">apply</span><span class="token punctuation">(</span>double_df<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="3、数据统计"><a href="#3、数据统计" class="headerlink" title="3、数据统计"></a>3、数据统计</h4><p><strong>统计函数</strong></p><p>​describe() 函数最简便。它是个统计大礼包，可以快速让我们对数据有个全面的了解。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df1 <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'ZhangFei'</span><span class="token punctuation">,</span> <span class="token string">'GuanYu'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'data1'</span><span class="token punctuation">:</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>df1<span class="token punctuation">.</span>describe<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>运行结果：</p><pre class="line-numbers language-none"><code class="language-none">          data1count  5.000000mean   2.000000std    1.581139min    0.00000025%    1.00000050%    2.00000075%    3.000000max    4.000000<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>数据表合并</strong></p><p>​基于指定列进行连接</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">,</span> on<span class="token operator">=</span><span class="token string">'name'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221025093942797.png" alt="指定name进行连接"  style="zoom: 50%;" /><p>​inner 内连接</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'inner'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>​<img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221025094218284.png" alt="两表的交集" style="zoom:50%;" /></p><p>left 左连接</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'left'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221025094330227.png" alt="以左表为主,右表做补充" style="zoom:50%;" /><p>right 右连接</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'right'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221025094517630.png" alt="以右表为主,左表做补充" style="zoom:50%;" /><p>outer 外连接</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">df3 <span class="token operator">=</span> pd<span class="token punctuation">.</span>merge<span class="token punctuation">(</span>df1<span class="token punctuation">,</span> df2<span class="token punctuation">,</span> how<span class="token operator">=</span><span class="token string">'outer'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221025094558773.png" alt="两表的并集" style="zoom:50%;" /><p><strong>用 SQL 方式打开 Pandas</strong></p><p>pandasql 中的主要函数是 sqldf，它接收两个参数：一个 SQL 查询语句，还有一组环境 变量 globals() 或 locals()。这样我们就可以在 Python 里，直接用 SQL 语句中对 DataFrame 进行操作</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd<span class="token keyword">from</span> pandas <span class="token keyword">import</span> DataFrame<span class="token keyword">from</span> pandasql <span class="token keyword">import</span> sqldf<span class="token punctuation">,</span> load_meat<span class="token punctuation">,</span> load_birthsdf1 <span class="token operator">=</span> DataFrame<span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token string">'ZhangFei'</span><span class="token punctuation">,</span> <span class="token string">'GuanYu'</span><span class="token punctuation">,</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'data1'</span><span class="token punctuation">:</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>pysqldf <span class="token operator">=</span> <span class="token keyword">lambda</span> sql<span class="token punctuation">:</span> sqldf<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>sql <span class="token operator">=</span> <span class="token string">"select * from df1 where name ='ZhangFei'"</span><span class="token keyword">print</span> pysqldf<span class="token punctuation">(</span>sql<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> lambda函数是用来定义一个匿名函数的，具体的使用形式为：</p><pre class="line-numbers language-none"><code class="language-none">lambda argument_list: expression<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>这里 argument_list 是参数列表，expression 是关于参数的表达式，会根据 expression 表达式计算结果进行输出返回。 在上面的代码中，我们定义了：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">pysqldf <span class="token operator">=</span> <span class="token keyword">lambda</span> sql<span class="token punctuation">:</span> sqldf<span class="token punctuation">(</span>sql<span class="token punctuation">,</span> <span class="token builtin">globals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在这个例子里，输入的参数是 sql，返回的结果是 sqldf 对 sql 的运行结果，当然 sqldf 中也输入了 globals 全局参数，因为在 sql 中有对全局参数 df1 的使用。</p><h1 id="机器学习Kaggle比赛"><a href="#机器学习Kaggle比赛" class="headerlink" title="机器学习Kaggle比赛"></a>机器学习Kaggle比赛</h1><h3 id="常见算法工具"><a href="#常见算法工具" class="headerlink" title="常见算法工具"></a>常见算法工具</h3><img src="/images/%E6%95%B0%E6%8D%AE%E5%88%86%E6%9E%90%E5%AE%9E%E6%88%9845%E8%AE%B2/image-20221019150534162.png" alt="" style="zoom: 33%;" /><h3 id="四大分类"><a href="#四大分类" class="headerlink" title="四大分类"></a>四大分类</h3><ul><li>分类算法 知道事先的定义<ul><li>C4.5、朴素贝叶斯、SVM、KNN、AdaBoost、CART</li></ul></li><li>聚类算法 不知道事先的定义<ul><li>K-Means、EM</li></ul></li><li>关联分析 A出现10次 B同时出现8次<ul><li>Apriori</li></ul></li><li>连接分析   比如通过邮件来连接<ul><li>PageRank</li></ul></li></ul><h3 id="十大经典模型"><a href="#十大经典模型" class="headerlink" title="十大经典模型"></a>十大经典模型</h3><h4 id="1-C4-5"><a href="#1-C4-5" class="headerlink" title="1. C4.5"></a>1. C4.5</h4><p>​C4.5 是决策树的算法，它创造性地在决策树构造过程中就进行了剪枝，并且可以处理连续的属性，也能对不完整的数据进行处理。</p><h4 id="2-朴素贝叶斯"><a href="#2-朴素贝叶斯" class="headerlink" title="2. 朴素贝叶斯"></a>2. 朴素贝叶斯</h4><p>​对于给出的未知物体想要进行分类，就需要求解在这个未知物体出现的条件下各个类别出现的概率，哪个最大，就认为 这个未知物体属于哪个分类。</p><h4 id="3-SVM"><a href="#3-SVM" class="headerlink" title="3. SVM"></a>3. SVM</h4><p>​SVM 在训练中建立了一个超平面的分类模型。</p><h4 id="4-KNN"><a href="#4-KNN" class="headerlink" title="4. KNN"></a>4. KNN</h4><p>​KNN 也叫 K 最近邻算法，就是每个样本都 可以用它最接近的 K 个邻居来代表。如果一个样本，它的 K 个最接近的邻居都属于分类 A，那么这个样本也属于分类 A。</p><h4 id="5-AdaBoost"><a href="#5-AdaBoost" class="headerlink" title="5. AdaBoost"></a>5. AdaBoost</h4><p>​Adaboost 在训练中建立了一个联合的分类模型。boost 在英文中代表提升的意思，所以 Adaboost 是个构建分类器的提升算法。它可以让我们多个弱的分类器组成一个强的分类器</p><h4 id="6-CART"><a href="#6-CART" class="headerlink" title="6. CART"></a>6. CART</h4><p>​CART 代表分类和回归树，英文是 Classification and Regression Trees，它构建了两棵树：一颗是分类树，另一个是回归树，和 C4.5 一样，是一个决策树学习方法。</p><h4 id="7-K-Means"><a href="#7-K-Means" class="headerlink" title="7. K-Means"></a>7. K-Means</h4><p>​K-Means 算法是一个聚类算法。你可以这么理解，最终我想把物体划分成 K 类。假设每 个类别里面，都有个“中心点”，即意见领袖，它是这个类别的核心。现在我有一个新点 要归类，这时候就只要计算这个新点与 K 个中心点的距离，距离哪个中心点近，就变成了 哪个类别。</p><h4 id="8-EM"><a href="#8-EM" class="headerlink" title="8. EM"></a>8. EM</h4><p>​EM 算法也叫最大期望算法，是求参数的最大似然估计的一种方法。原理是这样的：假设 我们想要评估参数 A 和参数 B，在开始状态下二者都是未知的，并且知道了 A 的信息就可 以得到 B 的信息，反过来知道了 B 也就得到了 A。可以考虑首先赋予 A 某个初值，以此 得到 B 的估值，然后从 B 的估值出发，重新估计 A 的取值，这个过程一直持续到收敛为 止。 EM 算法经常用于聚类和机器学习领域中。</p><h4 id="9-Apriori"><a href="#9-Apriori" class="headerlink" title="9. Apriori"></a>9. Apriori</h4><p>​Apriori 是一种挖掘关联规则（association rules）的算法，它通过挖掘频繁项集 （frequent item sets）来揭示物品之间的关联关系，被广泛应用到商业挖掘和网络安全 等领域中。频繁项集是指经常出现在一起的物品的集合，关联规则暗示着两种物品之间可能存在很强的关系。</p><h4 id="10-PageRank"><a href="#10-PageRank" class="headerlink" title="10. PageRank"></a>10. PageRank</h4><p>​PageRank 起源于论文影响力的计算方式，如果一篇文论被引入的次数越多，就代表这篇 论文的影响力越强。同样 PageRank 被 Google 创造性地应用到了网页权重的计算中：当 一个页面链出的页面越多，说明这个页面的“参考文献”越多，当这个页面被链入的频率 越高，说明这个页面被引用的次数越高。基于这个原理，我们可以得到网站的权重划分。</p><h1 id="机器学习建模流程"><a href="#机器学习建模流程" class="headerlink" title="机器学习建模流程"></a>机器学习建模流程</h1><h2 id="一、数据探索"><a href="#一、数据探索" class="headerlink" title="一、数据探索"></a>一、数据探索</h2><h2 id="二、数据预处理"><a href="#二、数据预处理" class="headerlink" title="二、数据预处理"></a>二、数据预处理</h2><h2 id="三、特征工程"><a href="#三、特征工程" class="headerlink" title="三、特征工程"></a>三、特征工程</h2><h2 id="四、模型建立"><a href="#四、模型建立" class="headerlink" title="四、模型建立"></a>四、模型建立</h2><h2 id="五、参数调优"><a href="#五、参数调优" class="headerlink" title="五、参数调优"></a>五、参数调优</h2><h2 id="六、模型融合"><a href="#六、模型融合" class="headerlink" title="六、模型融合"></a>六、模型融合</h2>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
          <category> 数据分析 </category>
          
          <category> Kaggle </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习 </tag>
            
            <tag> 数据分析 </tag>
            
            <tag> Kaggle </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git笔记</title>
      <link href="/2022/10/22/Git%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/22/Git%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="Git"><a href="#Git" class="headerlink" title="Git"></a>Git</h1><h2 id="GitHub加速"><a href="#GitHub加速" class="headerlink" title="GitHub加速"></a>GitHub加速</h2><p>方法一：修改hosts文件，hosts文件地址  <code>C:\Windows\System32\drivers\etc</code></p><p>方法二：使用FastGithub加速器  <a href="https://github.com/wxydaydayup/goodSoftware">FastGithub加速器</a></p><h2 id="Git操作"><a href="#Git操作" class="headerlink" title="Git操作"></a>Git操作</h2><h3 id="Git上传到GitHub"><a href="#Git上传到GitHub" class="headerlink" title="Git上传到GitHub"></a>Git上传到GitHub</h3><h4 id="第一种方法"><a href="#第一种方法" class="headerlink" title="第一种方法"></a>第一种方法</h4><p>第一步：</p><p>​查看SSH key 秘钥位置  <code>C:/Users/LENOVO/.ssh/id_rsa </code>  并且在Github中创建SSH key</p><p>第二步：</p><p>​在要上传的文件夹里右键打开<code>Git Bash Here</code></p><p>第三步：</p><p>​把Github上面的仓库克隆到本地</p><p>​<code>git clone https://github.com/wxydaydayup/Study_Notes.git</code></p><p>​这个步骤以后本地项目文件夹下面就会多出个文件夹，该文件夹名即为Github上面的项目名，多出了个Study_Notes文件夹，把本地项目文件夹下的所有文件（除了新多出的那个文件夹不用），其余都复制到那个新多出的文件夹下</p><p>​继续输入命令 <code>cd Study_Notes</code>，进入Study_Notes文件夹接下来依次执行 </p><ol><li><code>git add *</code>    （注：别忘记后面的.，此操作是把Test文件夹下面的文件都添加进来）</li><li><code>git commit  -m  &quot;提交信息&quot;</code>  （注：“提交信息”里面换成你需要，如“first commit”）</li><li><code>git push -u origin main</code>   （注：此操作目的是把本地仓库push到Github上，此步骤需要你输入帐号和密码）</li></ol><h4 id="第二种方法"><a href="#第二种方法" class="headerlink" title="第二种方法"></a>第二种方法</h4><p>从第一种方法 的第三步开始输入</p><ol><li><p><code>git init</code></p></li><li><p><code>git add *</code></p></li><li><p><code>git commit -m 1.zip</code></p><p>不加 -m 退出 ESC :wq </p></li><li><p><code>git remote add origin github.com/wxydaydayup/Study_Notes.git</code>（此时记得在github上创建一个仓库，并把仓库的ssh地址赋值下来，关联远程仓库）</p></li><li><p><code>git push -u origin master</code>  (这时github上就会多出文件，空加-u，不空不用,<code>git push -f origin master</code> 在这里，如果报错，就强制性上传代码)</p></li></ol><h3 id="Git大文件上传"><a href="#Git大文件上传" class="headerlink" title="Git大文件上传"></a>Git大文件上传</h3><h4 id="Git-lfs"><a href="#Git-lfs" class="headerlink" title="Git lfs"></a>Git lfs</h4><h4 id="彻底删除lfs"><a href="#彻底删除lfs" class="headerlink" title="彻底删除lfs"></a>彻底删除lfs</h4><p><code>git lfs uninstall</code></p><p><code>git filter-branch --force --index-filter</code></p><h3 id="Git-分支"><a href="#Git-分支" class="headerlink" title="Git 分支"></a>Git 分支</h3><ol><li>切换分支 <code>git checkout 分支名</code></li><li>创建并切换 <code>git checkout -b 分支名</code></li><li>合并分支  <code>git merge 分支名</code></li><li>删除分支时，需要做各种检查  <code>git branch -d 分支名</code></li><li>不做任何检查，强制删除分支 <code>git branch -D 分支名</code>（适用于dev分支没merge到主分支上）</li></ol><h3 id="Git常用命令"><a href="#Git常用命令" class="headerlink" title="Git常用命令"></a>Git常用命令</h3><ol><li>查看仓库状态 :  <code>git status</code></li><li>仓库初始化：<code>git init</code></li><li>添加文件到Git仓库：<code>git add demo.txt</code></li><li>提交文件到Git仓库：<code>git commit -m &quot;1&quot;</code></li><li>版本回退 <code>git reset --hard XXXX</code></li><li>查看版本信息 <code>git reflog</code></li><li>以精简的方式显示提交记录 <code>git-log</code></li></ol><h3 id="Git错误"><a href="#Git错误" class="headerlink" title="Git错误"></a>Git错误</h3><h4 id="错误1："><a href="#错误1：" class="headerlink" title="错误1："></a>错误1：</h4><p>​<code>error: git SSl certificate problem: unable to get local issuer certificate</code></p><p>​这个问题是由于没有配置信任的服务器HTTPS验证。默认，CURL被设为不信任任何CAS，就是说，它不信任任何服务器验证。只需要执行下面命令就可以解决：</p><p>​<code>git config --global http.sslVerify false</code></p><h4 id="错误2："><a href="#错误2：" class="headerlink" title="错误2："></a>错误2：</h4><p>​<code>error: RPC failed; curl 18 transfer closed with outstanding read data remaining</code></p><p>​<code>send-pack: unexpected disconnect while reading sideband packet</code></p><p>​<code>fatal: the remote end hung up unexpectedly</code></p><p>解决方法：</p><ol><li><p>缓存过小导致，可以尝试增大缓存 单位为byte, 524288000就是500M</p><p>​<code>git config --global http.postBuffer 524288000</code>  </p><p>百度查到说是的postBuffer默认值太小的原因，我看有人说调整到500M就行，但我试了不可以，所以就调整到了2G，有人成功了，是根据以下命令调整的</p><p>​<code>git config --global http.postBuffer 2024288000</code></p></li><li><p>网络波动导致，可以尝试取消相关的网络限制</p><p>​<code>git config --global http.lowSpeedLimit 0</code></p><p>​<code>git config --global http.lowSpeedTime 999999</code></p></li><li><p>若传输文件实在太大，可以尝试增大压缩率(压缩率大小根据实际情况设置),compression 是压缩的意思，从 clone 的终端输出就知道，服务器会压缩目标文件，然后传输到客户端，客户端再解压。取值为 [-1, 9]，-1 以 zlib 为默认压缩库，0 表示不进行压缩，1…9 是压缩速度与最终获得文件大小的不同程度的权衡，数字越大，压缩越慢，当然得到的文件会越小</p><p>​<code>git config --global core.compression 3</code></p></li><li><p>推送的文件大小太大了，超过了HTTP的限制，更换远程地址，改用git 协议来推送代码，这个最终成功了</p><p>​<code>git remote set-url origin git@github.com:wxydaydayup/BookPdf.git</code></p><p>​<code>git push -u origin master</code></p></li></ol><h2 id="Idea连接Github-x2F-Gitee"><a href="#Idea连接Github-x2F-Gitee" class="headerlink" title="Idea连接Github&#x2F;Gitee"></a>Idea连接Github&#x2F;Gitee</h2><ol><li><p>创建Tooken  <a href="https://github.com/settings/tokens/new">https://github.com/settings/tokens/new</a> 权限全部点上</p></li><li><p>VCS –&gt; Import into version Control –&gt; Create Git Repository </p></li><li><p>VCS –&gt; clone</p></li><li><p>设置SDK 与 配置maven</p><img src="/images/Git%E7%AC%94%E8%AE%B0/image-20221013151533015.png" alt="image-20221013151533015" style="zoom: 67%;" /><p>pom.xml 点击右键 -》Add as Maven Project</p></li><li><p>连接数据库</p><p>若出现错误：</p><p>​<code>Server returns invalid timezone. Go to &#39;Advanced&#39; tab and set &#39;serverTimezone&#39; property manually.</code></p><p>在Advanced设置一下时区即可</p><img src="/images/Git%E7%AC%94%E8%AE%B0/image-20221013154539389.png" alt="image-20221013154539389" style="zoom:67%;" /></li><li><p>IDEA集成GitBash作为Terminal（建议）</p><img src="/images/Git%E7%AC%94%E8%AE%B0/image-20221014095006382.png" alt="image-20221014095006382" style="zoom: 67%;" /><p>7、看看效果</p><img src="/images/Git%E7%AC%94%E8%AE%B0/image-20221014095334858.png" alt="image-20221014095334858" style="zoom: 50%;" /></li></ol><h2 id="Git合并拉取代码规范"><a href="#Git合并拉取代码规范" class="headerlink" title="Git合并拉取代码规范"></a>Git合并拉取代码规范</h2><ol><li>先拉取自己开发分支远端代码（适用多人共用一个开发分支）</li><li>测试完成后将自己开发代码提交到本地仓库，上传到自己的远端开发分支</li><li>换到master分支，拉取master远端的最新代码</li><li>确保本地master分支的代码为远端最新代码后，把开发分支合并到master分支</li><li>本地master分支代码上传到远端master</li></ol><h2 id="Github搜索技巧"><a href="#Github搜索技巧" class="headerlink" title="Github搜索技巧"></a>Github搜索技巧</h2><p>计算机图形学 in:name stars:&gt;100 language:java</p><p>计算机图形学 in:readme</p><p><a href="https://blog.csdn.net/zzzzlei123123123/article/details/105174595">Github删除自己的仓库</a></p>]]></content>
      
      
      <categories>
          
          <category> Github </category>
          
          <category> Git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Github </tag>
            
            <tag> Git </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>pumpkin</title>
      <link href="/2022/10/21/pumpkin/"/>
      <url>/2022/10/21/pumpkin/</url>
      
        <content type="html"><![CDATA[<h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><h3 id="哈希表"><a href="#哈希表" class="headerlink" title="哈希表"></a>哈希表</h3><p>将关键字序列（7、8、30、11、18、9、14）散列存储到散列表中。散列表的存储空间是一个下标从0开始的一维数组，散列函数为： H(key) &#x3D; (key * 3) MOD 7，处理冲突采用线性探测再散列法，要求装填（载）因子为0.7。</p><p>（1）请画出所构造的散列表。</p><p>（2）分别计算等概率情况下查找成功和查找不成功的平均查找长度。</p><p><strong>装载因子</strong>是指所有关键子填充哈希表后饱和的程度，它等于 <strong>填入表中的关键字总数&#x2F;哈希表的长度</strong>。根据题意，我们可以确定哈希表的长度为 L &#x3D; 7&#x2F;0.7 &#x3D; 10；因此此题需要构建的哈希表是<strong>下标为0~9</strong>的一维数组。查找不成功的次数就直接找关键字到下一个地址关键字为空的距离，但根据散列函数地址为<strong>MOD7</strong>，因此初始只可能在0~6的位置，</p><p>参考链接： <a href="https://blog.csdn.net/dyw_666666/article/details/110291968">哈希表查找</a></p><h2 id="操作系统"><a href="#操作系统" class="headerlink" title="操作系统"></a>操作系统</h2><p>​设文件F1当前引用计数值为1，先建立F1的符号链接文件F2，再建立F1的硬链接文件F3，然后删除F1。此时，F2和F3的引用计数值分别是() 。</p><p>​当建立F2时，F1和F2的引用计数值都为1。当再建立F3时，F1和F3的引用计数值就都变成了2。当后来删除F1时，F3的引用计数值为2-1&#x3D;1。F2的引用计数值仍然保持不变。综上：F2的引用值为1，F3的引用值也为1。参考链接： <a href="https://blog.csdn.net/weixin_46264660/article/details/124763635">文件链接</a></p><p>​记住结论就行，硬链接删除原文件减一，软链接删除原文件不变</p><p>​记住结论就行，硬链接删除原文件引用数减1，软链接删除原文件引用数不变</p>]]></content>
      
      
      <categories>
          
          <category> 生活 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
